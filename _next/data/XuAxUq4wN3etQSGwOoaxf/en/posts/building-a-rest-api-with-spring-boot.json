{"pageProps":{"_nextI18Next":{"initialI18nStore":{"en":{"common":{"common":{"language":"Language","theme":"Theme","header":{"logoAlt":"My Blog Logo","title":"My Blog","menu":{"home":"Home","about":"About","contact":"Contact"},"themeToggle":"Toggle Theme","theme":{"light":"Light Mode","dark":"Dark Mode"}},"footer":{"text":"¬© {{year}} My Blog. All rights reserved."},"pagination":{"pageSize":"Page size","showingResults":"Showing {{start}}‚Äì{{end}} of {{total}} results"},"searchBar":{"placeholder":"Search"},"sort":{"newest":"Newest First","oldest":"Oldest First"},"contactInfo":{"email":"Email"},"codeBlock":{"copy":"Copy","copied":"Copied!"},"selected":"Selected","selectAll":"Select All","clearAll":"Clear All","noResults":"No results found","andMore":"and {{count}} more","datePicker":{"selectDate":"Select Date","today":"Today","yesterday":"Yesterday","last7Days":"Last 7 Days","last30Days":"Last 30 Days","customDate":"Custom Date","startDatePlaceholder":"Start Date","endDatePlaceholder":"End Date","startDateLabel":"Start Date","endDateLabel":"End Date","clearSelection":"Clear Selection"}}},"post":{"post":{"readMore":"Read More","noPostsFound":"No posts found."}}}},"initialLocale":"en","ns":["common","post"],"userConfig":{"debug":false,"i18n":{"defaultLocale":"en","locales":["en","tr"]},"localePath":"/home/runner/work/blog/blog/public/locales","default":{"debug":false,"i18n":{"defaultLocale":"en","locales":["en","tr"]},"localePath":"/home/runner/work/blog/blog/public/locales"}}},"post":{"contentHtml":"\nSpring Boot is an excellent tool for quickly developing RESTful web services. In this article, we‚Äôll walk through creating a REST API step by step using Spring Boot.\n\n---\n\n## üåü What is a REST API?\n\nREST (Representational State Transfer) is an architectural style for designing web services. It uses standard HTTP methods for communication between clients and servers.\n\n### **HTTP Methods**\n\n| **Method** | **Description**                | **Example Endpoint** |\n| ---------- | ------------------------------ | -------------------- |\n| **GET**    | Retrieves a resource.          | `/api/todos`         |\n| **POST**   | Creates a new resource.        | `/api/todos`         |\n| **PUT**    | Updates or creates a resource. | `/api/todos/1`       |\n| **DELETE** | Deletes a resource.            | `/api/todos/1`       |\n\n---\n\n## üõ†Ô∏è Step 1: Create a Project\n\nYou can create a Spring Boot project using [Spring Initializr](https://start.spring.io/). Select the following settings:\n\n- **Project:** Maven\n- **Language:** Java or Kotlin\n- **Spring Boot Version:** 3.0.0+\n- **Dependencies:** Spring Web, Spring Boot DevTools, Lombok\n\nDownload the project, open it in your IDE, and get ready to run it.\n\n---\n\n## üìñ Step 2: Create a Model Class\n\nCreate a model class for a `Todo` object:\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage com.example.demo.model;\n\nimport lombok.Data;\n\n@Data\npublic class Todo {\n    private Long id;\n    private String title;\n    private boolean completed;\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage com.example.demo.model\n\ndata class Todo(\n    var id: Long,\n    var title: String,\n    var completed: Boolean\n)\n```\n\n:::\n\n---\n\n## üìò Step 3: Create a Controller Class\n\nAdd a `TodoController` class to define CRUD operations as REST endpoints:\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage com.example.demo.controller;\n\nimport com.example.demo.model.Todo;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/todos\")\npublic class TodoController {\n\n    private List<Todo> todos = new ArrayList<>();\n\n    @GetMapping\n    public List<Todo> getAllTodos() {\n        return todos;\n    }\n\n    @PostMapping\n    public Todo createTodo(@RequestBody Todo todo) {\n        todo.setId((long) (todos.size() + 1));\n        todos.add(todo);\n        return todo;\n    }\n\n    @PutMapping(\"/{id}\")\n    public Todo updateTodo(@PathVariable Long id, @RequestBody Todo updatedTodo) {\n        Todo todo = todos.stream().filter(t -> t.getId().equals(id)).findFirst().orElse(null);\n        if (todo != null) {\n            todo.setTitle(updatedTodo.getTitle());\n            todo.setCompleted(updatedTodo.isCompleted());\n        }\n        return todo;\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public void deleteTodo(@PathVariable Long id) {\n        todos.removeIf(todo -> todo.getId().equals(id));\n    }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage com.example.demo.controller\n\nimport com.example.demo.model.Todo\nimport org.springframework.web.bind.annotation.*\n\n@RestController\n@RequestMapping(\"/api/todos\")\nclass TodoController {\n\n    private val todos = mutableListOf<Todo>()\n\n    @GetMapping\n    fun getAllTodos(): List<Todo> = todos\n\n    @PostMapping\n    fun createTodo(@RequestBody todo: Todo): Todo {\n        todo.id = (todos.size + 1).toLong()\n        todos.add(todo)\n        return todo\n    }\n\n    @PutMapping(\"/{id}\")\n    fun updateTodo(@PathVariable id: Long, @RequestBody updatedTodo: Todo): Todo? {\n        val todo = todos.find { it.id == id }\n        todo?.apply {\n            title = updatedTodo.title\n            completed = updatedTodo.completed\n        }\n        return todo\n    }\n\n    @DeleteMapping(\"/{id}\")\n    fun deleteTodo(@PathVariable id: Long) {\n        todos.removeIf { it.id == id }\n    }\n}\n```\n\n:::\n\n---\n\n## ‚ñ∂Ô∏è Step 4: Test the API\n\nTest your API using `curl` commands:\n\n- **GET All Todos:**\n\n```bash\ncurl -X GET http://localhost:8080/api/todos\n```\n\n- **POST New Todo:**\n\n```bash\ncurl -X POST http://localhost:8080/api/todos -H \"Content-Type: application/json\" -d '{\"title\": \"New Todo\", \"completed\": false}'\n```\n\n- **PUT Update Todo:**\n\n```bash\ncurl -X PUT http://localhost:8080/api/todos/1 -H \"Content-Type: application/json\" -d '{\"title\": \"Updated Todo\", \"completed\": true}'\n```\n\n- **DELETE Delete Todo:**\n\n```bash\ncurl -X DELETE http://localhost:8080/api/todos/1\n```\n\n---\n\nBy following these steps, you‚Äôll have built a REST API with Spring Boot.\n","id":"building-a-rest-api-with-spring-boot","title":"Building a REST API with Spring Boot","date":"2024-12-11","summary":"Learn how to create a REST API using Spring Boot. Includes HTTP methods, JSON handling, Lombok integration, and curl for testing.","thumbnail":"/images/spring-boot-rest-api-thumbnail.jpg","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"rest-api","name":"REST API","color":"blue"},{"id":"programming","name":"Programming","color":"orange"}]}},"__N_SSG":true}