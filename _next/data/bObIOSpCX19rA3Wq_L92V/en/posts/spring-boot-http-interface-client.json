{"pageProps":{"_nextI18Next":{"initialI18nStore":{"en":{"common":{"common":{"siteName":"≈ûuayb ≈ûim≈üek's Blog","language":"Language","theme":"Theme","header":{"logoAlt":"≈ûuayb's Blog Logo","title":"≈ûuayb's Blog","menu":{"home":"Home","about":"About","contact":"Contact","search":"Search"},"themeToggle":"Toggle Theme","theme":{"light":"Light Mode","dark":"Dark Mode"}},"sidebar":{"title":"Topics","loading":"Loading more topics..."},"footer":{"text":"¬© {{year}} ≈ûuayb's Blog. All rights reserved."},"pagination":{"pageSize":"Page size","showingResults":"Showing {{start}}‚Äì{{end}} of {{total}} results"},"searchBar":{"placeholder":"Search"},"sort":{"newest":"Newest First","oldest":"Oldest First"},"contactInfo":{"email":"Email"},"codeBlock":{"copy":"Copy","copied":"Copied!"},"selected":"Selected","selectAll":"Select All","clearAll":"Clear All","noResults":"No results found","andMore":"and {{count}} more","datePicker":{"selectDate":"Select Date","today":"Today","yesterday":"Yesterday","last7Days":"Last 7 Days","last30Days":"Last 30 Days","customDate":"Custom Date","startDatePlaceholder":"Start Date","endDatePlaceholder":"End Date","startDateLabel":"Start Date","endDateLabel":"End Date","clearSelection":"Clear Selection","applySelection":"Apply Selection"},"validation":{"required":"This field is required.","minlength":"This field must be at least {{ min }} characters.","maxlength":"This field cannot be longer than {{ max }} characters.","min":"This field should be at least {{ min }}.","max":"This field cannot be more than {{ max }}.","minbytes":"This field should be at least {{ min }} bytes.","maxbytes":"This field cannot be more than {{ max }} bytes.","pattern":"This field should match the pattern for {{ pattern }}.","number":"This field should be a number.","datetimelocal":"This field should be a date and time.","patternLogin":"This field can only contain letters, digits, and e-mail addresses.","email":"Please enter a valid email address.","url":"Please enter a valid URL.","alpha":"This field should only contain letters.","alphanumeric":"This field should only contain letters and numbers.","passwordStrength":"Password must contain at least 8 characters, including an uppercase letter, a number, and a special character.","startDateAfterEndDate":"Start date cannot be after end date.","endDateBeforeStartDate":"End date cannot be before start date."},"viewAllResults":"See all results for \"{{query}}\""}},"post":{"post":{"readMore":"Read More","noPostsFound":"No posts found."}}}},"initialLocale":"en","ns":["common","post"],"userConfig":{"debug":false,"i18n":{"defaultLocale":"en","locales":["en","tr"]},"localePath":"/home/circleci/project/public/locales","default":{"debug":false,"i18n":{"defaultLocale":"en","locales":["en","tr"]},"localePath":"/home/circleci/project/public/locales"}}},"post":{"contentHtml":"\nSpring Boot 3.2+ introduces the HTTP Interface Client, enabling you to define declarative, type-safe HTTP clients with simple Java or Kotlin interfaces. In this article, you‚Äôll learn to set it up from scratch using the JSONPlaceholder API.\n\n---\n\n## üåü Why HTTP Interface Client?\n\n- **Declarative**: Define an interface and annotate methods for HTTP calls.\n- **Type-safe**: Compiler catches mismatched signatures or misconfigured paths.\n- **Minimal boilerplate**: One bean definition, no manual proxy or template code.\n- **Spring-friendly**: Leverages Spring Framework 6.2‚Äôs `@HttpExchange`, `@GetExchange`, and `WebClientAdapter`.\n\n---\n\n## üåü Prerequisites\n\n- ‚òï **Java Development Kit (JDK) 21** or higher\n- üì¶ **Spring Boot 3.2+**\n- üî§ **IDE** (IntelliJ IDEA, Eclipse, etc.)\n\n---\n\n## üõ†Ô∏è Step 1: Add Dependencies\n\nAdd the Web starter to your build:\n\n**Maven**:\n\n```xml\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n**Gradle**:\n\n```groovy\nimplementation 'org.springframework.boot:spring-boot-starter-web'\n```\n\n---\n\n## üìù Step 2: Configure Base URL\n\nAdd to `application.yml` or `application.properties`:\n\n```yaml\njsonplaceholder:\n  base-url: https://jsonplaceholder.typicode.com\n```\n\n```properties\njsonplaceholder.base-url=https://jsonplaceholder.typicode.com\n```\n\n---\n\n## üõ†Ô∏è Step 3: Define DTO and Client Interface\n\n:::tabs\n@tab Java [icon=java]\n\n```java\n// src/main/java/com/example/client/dto/PostDTO.java\npackage com.example.client.dto;\n\npublic record PostDTO(\n    Integer userId,\n    Integer id,\n    String title,\n    String body\n) {}\n\n// src/main/java/com/example/client/JsonPlaceholderClient.java\npackage com.example.client;\n\nimport com.example.client.dto.PostDTO;\nimport org.springframework.web.service.annotation.GetExchange;\nimport org.springframework.web.service.annotation.HttpExchange;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport java.util.List;\n\n@HttpExchange(url = \"${jsonplaceholder.base-url}\", accept = \"application/json\")\npublic interface JsonPlaceholderClient {\n\n    @GetExchange(\"/posts\")\n    List<PostDTO> getPosts();\n\n    @GetExchange(\"/posts/{id}\")\n    PostDTO getPost(@PathVariable(\"id\") Integer id);\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\n// src/main/kotlin/com/example/client/dto/PostDTO.kt\npackage com.example.client.dto\n\ndata class PostDTO(\n    val userId: Int,\n    val id: Int,\n    val title: String,\n    val body: String\n)\n\n// src/main/kotlin/com/example/client/JsonPlaceholderClient.kt\npackage com.example.client\n\nimport com.example.client.dto.PostDTO\nimport org.springframework.web.service.annotation.GetExchange\nimport org.springframework.web.service.annotation.HttpExchange\nimport org.springframework.web.bind.annotation.PathVariable\n\n@HttpExchange(url = \"${jsonplaceholder.base-url}\", accept = \"application/json\")\ninterface JsonPlaceholderClient {\n\n    @GetExchange(\"/posts\")\n    fun getPosts(): List<PostDTO>\n\n    @GetExchange(\"/posts/{id}\")\n    fun getPost(@PathVariable(\"id\") id: Int): PostDTO\n}\n```\n\n:::\n\n---\n\n## üõ†Ô∏è Step 4: Configure the Client Bean\n\n:::tabs\n@tab Java [icon=java]\n\n```java\n// src/main/java/com/example/config/HttpClientConfig.java\npackage com.example.config;\n\nimport com.example.client.JsonPlaceholderClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.client.support.RestClientAdapter;\nimport org.springframework.web.service.invoker.HttpServiceProxyFactory;\nimport org.springframework.web.service.invoker.RestClient;\n\n@Configuration\npublic class HttpClientConfig {\n\n    @Bean\n    public JsonPlaceholderClient jsonPlaceholderClient(RestClient.Builder restClientBuilder) {\n        RestClient restClient = restClientBuilder\n            .baseUrl(\"https://jsonplaceholder.typicode.com\")\n            .build();\n\n        var factory = HttpServiceProxyFactory\n            .builderFor(RestClientAdapter.create(restClient))\n            .build();\n\n        return factory.createClient(JsonPlaceholderClient.class);\n    }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\n// src/main/kotlin/com/example/config/HttpClientConfig.kt\npackage com.example.config\n\nimport com.example.client.JsonPlaceholderClient\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\nimport org.springframework.web.client.support.RestClientAdapter\nimport org.springframework.web.service.invoker.HttpServiceProxyFactory\nimport org.springframework.web.service.invoker.RestClient\n\n@Configuration\nclass HttpClientConfig {\n\n    @Bean\n    fun jsonPlaceholderClient(restClientBuilder: RestClient.Builder): JsonPlaceholderClient {\n        val restClient = restClientBuilder\n            .baseUrl(\"https://jsonplaceholder.typicode.com\")\n            .build()\n\n        val factory = HttpServiceProxyFactory\n            .builderFor(RestClientAdapter.create(restClient))\n            .build()\n\n        return factory.createClient(JsonPlaceholderClient::class.java)\n    }\n}\n```\n\n:::\n\n---\n\n## üîÑ Step 5: Implement Service and Controller\n\n:::tabs\n@tab Java [icon=java]\n\n```java\n// src/main/java/com/example/service/PostService.java\npackage com.example.service;\n\nimport com.example.client.JsonPlaceholderClient;\nimport com.example.client.dto.PostDTO;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\n\n@Service\n@RequiredArgsConstructor\npublic class PostService {\n    private final JsonPlaceholderClient client;\n\n    public List<PostDTO> getAllPosts() {\n        return client.getPosts();\n    }\n\n    public PostDTO getPostById(Integer id) {\n        return client.getPost(id);\n    }\n}\n\n// src/main/java/com/example/controller/PostController.java\npackage com.example.controller;\n\nimport com.example.client.dto.PostDTO;\nimport com.example.service.PostService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/posts\")\n@RequiredArgsConstructor\npublic class PostController {\n    private final PostService postService;\n\n    @GetMapping\n    public List<PostDTO> getAllPosts() {\n        return postService.getAllPosts();\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<PostDTO> getPostById(@PathVariable Integer id) {\n        PostDTO post = postService.getPostById(id);\n        return post != null ? ResponseEntity.ok(post) : ResponseEntity.notFound().build();\n    }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\n// src/main/kotlin/com/example/service/PostService.kt\npackage com.example.service\n\nimport com.example.client.JsonPlaceholderClient\nimport com.example.client.dto.PostDTO\nimport org.springframework.stereotype.Service\n\n@Service\nclass PostService(private val client: JsonPlaceholderClient) {\n    fun getAllPosts(): List<PostDTO> = client.getPosts()\n    fun getPostById(id: Int): PostDTO = client.getPost(id)\n}\n\n// src/main/kotlin/com/example/controller/PostController.kt\npackage com.example.controller\n\nimport com.example.client.dto.PostDTO\nimport com.example.service.PostService\nimport org.springframework.http.ResponseEntity\nimport org.springframework.web.bind.annotation.*\n\n@RestController\n@RequestMapping(\"/posts\")\nclass PostController(private val postService: PostService) {\n    @GetMapping\n    fun getAllPosts(): List<PostDTO> = postService.getAllPosts()\n\n    @GetMapping(\"/{id}\")\n    fun getPostById(@PathVariable id: Int): ResponseEntity<PostDTO> =\n        ResponseEntity.ok(postService.getPostById(id))\n}\n```\n\n:::\n\n---\n\n## ‚ñ∂Ô∏è Run the Application\n\n```bash\n./mvnw spring-boot:run\n# or\ngradle bootRun\n```\n\n---\n\n## üß™ Test Endpoints\n\n```bash\ncurl http://localhost:8080/posts\ncurl http://localhost:8080/posts/1\n```\n\n---\n\nBy following these steps, you‚Äôve successfully configured Spring Boot‚Äôs HTTP Interface Client for declarative and type-safe REST communication. This approach reduces boilerplate and leverages Spring‚Äôs Rest Client under the hood for robust integrations.\n","id":"spring-boot-http-interface-client","title":"Spring Boot HTTP Interface Client","date":"2025-04-27","summary":"Learn how to use Spring Boot 3.2+ HTTP Interface Client for declarative, type-safe HTTP calls.","thumbnail":"/images/spring-boot-http-interface-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"rest-api","name":"REST API","color":"blue"},{"id":"rest-client","name":"Rest Client","color":"purple"},{"id":"programming","name":"Programming","color":"brown"}]},"posts":[{"id":"spring-boot-http-interface-client","title":"Spring Boot HTTP Interface Client","date":"2025-04-27","summary":"Learn how to use Spring Boot 3.2+ HTTP Interface Client for declarative, type-safe HTTP calls.","thumbnail":"/images/spring-boot-http-interface-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"rest-api","name":"REST API","color":"blue"},{"id":"rest-client","name":"Rest Client","color":"orange"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-async-tasks-virtual","title":"Spring Boot Async Tasks with Virtual Thread","date":"2025-04-26","summary":"Learn how to run asynchronous tasks with `@Async` on JDK 21 virtual threads in Spring Boot.","thumbnail":"/images/spring-boot-async-virtual-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"async-tasks","name":"Async Tasks","color":"blue"},{"id":"virtual-thread","name":"Virtual Thread","color":"orange"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-ai","title":"Spring Boot AI Integration","date":"2025-04-23","summary":"Learn how to integrate AI models into Spring Boot applications using Spring AI for modular, portable, and observable AI workflows.","thumbnail":"/images/spring-boot-ai-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"spring-ai","name":"Spring AI","color":"orange"},{"id":"ai","name":"Artificial Intelligence","color":"pink"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-jpa-auditing","title":"Spring Boot JPA Auditing","date":"2025-04-10","summary":"Learn how to automatically track created and modified fields in your Spring Boot applications using JPA Auditing.","thumbnail":"/images/spring-boot-jpa-auditing-thumbnail.webp","readingTime":"1 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"spring-data","name":"Spring Data","color":"yellow"},{"id":"jpa","name":"JPA","color":"blue"},{"id":"auditing","name":"Auditing","color":"orange"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-tdd","title":"Spring Boot Test-Driven Development (TDD)","date":"2025-04-09","summary":"Learn how to apply TDD in Spring Boot by writing unit tests first, implementing logic, and ensuring code quality through testing.","thumbnail":"/images/spring-boot-tdd-thumbnail.webp","readingTime":"1 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"tdd","name":"TDD","color":"blue"},{"id":"testing","name":"Testing","color":"orange"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-circuit-breaker","title":"Spring Boot Circuit Breaker","date":"2025-03-13","summary":"Learn how to implement Circuit Breaker in Spring Boot applications for resilient microservices.","thumbnail":"/images/spring-boot-circuit-breaker-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"spring-cloud","name":"Spring Cloud","color":"pink"},{"id":"circuit-breaker","name":"Circuit Breaker","color":"blue"},{"id":"microservice","name":"Microservice","color":"orange"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-eureka-server","title":"Spring Boot Eureka Server","date":"2025-02-23","summary":"Learn how to set up and configure a Spring Boot Eureka Server for service discovery in microservices architecture.","thumbnail":"/images/spring-boot-eureka-server-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"spring-cloud","name":"Spring Cloud","color":"pink"},{"id":"eureka-server","name":"Eureka Server","color":"blue"},{"id":"microservice","name":"Microservice","color":"orange"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-config-server","title":"Spring Boot Config Server","date":"2025-02-22","summary":"Learn how to use Spring Boot Config Server to centralize and manage application configurations efficiently.","thumbnail":"/images/spring-boot-config-server-thumbnail.webp","readingTime":"4 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"spring-cloud","name":"Spring Cloud","color":"pink"},{"id":"config-server","name":"Config Server","color":"blue"},{"id":"microservice","name":"Microservice","color":"orange"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-docker","title":"Spring Boot Docker Integration","date":"2025-02-21","summary":"Learn how to build and deploy Spring Boot applications using Docker with Buildpacks and Jib for efficient containerization.","thumbnail":"/images/spring-boot-docker-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"docker","name":"Docker","color":"blue"},{"id":"containerization","name":"Containerization","color":"orange"},{"id":"jib","name":"Jib","color":"pink"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-kubernetes","title":"Spring Boot Kubernetes Integration","date":"2025-02-21","summary":"Learn how to deploy Spring Boot applications on Kubernetes for scalable, containerized microservices.","thumbnail":"/images/spring-boot-kubernetes-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"kubernetes","name":"Kubernetes","color":"blue"},{"id":"microservice","name":"Microservice","color":"orange"},{"id":"containerization","name":"Containerization","color":"pink"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-async-tasks","title":"Spring Boot Async Tasks","date":"2025-02-20","summary":"Learn how to use @Async in Spring Boot to execute tasks asynchronously without blocking the main thread.","thumbnail":"/images/spring-boot-async-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"async-tasks","name":"Async Tasks","color":"blue"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-scheduled-tasks","title":"Spring Boot Scheduled Tasks","date":"2025-02-20","summary":"Learn how to use @Scheduled in Spring Boot to run background tasks at fixed intervals or cron expressions.","thumbnail":"/images/spring-boot-scheduled-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"scheduled-tasks","name":"Scheduled Tasks","color":"blue"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-reactive-programming","title":"Spring Boot Reactive Programming","date":"2025-02-19","summary":"Learn how to build reactive applications using Spring Boot with Project Reactor and WebFlux for high-performance asynchronous processing.","thumbnail":"/images/spring-boot-reactive-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"reactive-programming","name":"Reactive Programming","color":"blue"},{"id":"webflux","name":"Spring WebFlux","color":"orange"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-graalvm","title":"Spring Boot GraalVM Native Application","date":"2024-12-28","summary":"Learn how to build and deploy a Spring Boot application as a GraalVM native image for improved startup time and reduced resource usage.","thumbnail":"/images/spring-boot-graalvm-thumbnail.webp","readingTime":"2 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"graalvm","name":"GraalVM","color":"pink"},{"id":"native-image","name":"Native Image","color":"orange"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"spring-boot-kafka","title":"Spring Boot Kafka Integration","date":"2024-12-25","summary":"Learn how to integrate Apache Kafka with Spring Boot to send and consume JSON messages through Kafka topics.","thumbnail":"/images/spring-boot-kafka-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"kafka","name":"Kafka","color":"orange"},{"id":"messaging","name":"Messaging","color":"brown"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"spring-boot-redis-caching","title":"Spring Boot Redis Caching","date":"2024-12-22","summary":"Learn how to implement Redis caching in your Spring Boot application to improve performance and efficiency.","thumbnail":"/images/spring-boot-redis-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"redis","name":"Redis","color":"orange"},{"id":"caching","name":"Caching","color":"brown"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"spring-boot-openapi","title":"Spring Boot with OpenAPI","date":"2024-12-20","summary":"Learn how to integrate OpenAPI into your Spring Boot application for API documentation and testing using SpringDoc.","thumbnail":"/images/spring-boot-openapi-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"openapi","name":"OpenAPI","color":"orange"},{"id":"documentation","name":"Documentation","color":"brown"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"spring-boot-clean-coding","title":"Clean Coding Practices in Spring Boot","date":"2024-12-19","summary":"Learn how to apply clean coding principles in Spring Boot projects. Includes best practices, examples, and benefits of using Lombok in Java and Kotlin clean code techniques.","thumbnail":"/images/spring-boot-clean-coding-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"clean-coding","name":"Clean Coding","color":"orange"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"spring-boot-devtools","title":"Spring Boot DevTools","date":"2024-12-19","summary":"Learn how to utilize Spring Boot DevTools for rapid development. Includes live reload, caching, and debugging tips.","thumbnail":"/images/spring-boot-devtools-thumbnail.webp","readingTime":"2 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"devtools","name":"Dev Tools","color":"orange"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"spring-boot-actuator","title":"Spring Boot Actuator","date":"2024-12-18","summary":"Learn how to use Spring Boot Actuator to monitor and manage your applications with ease. Includes endpoints, customization, and security examples.","thumbnail":"/images/spring-boot-actuator-thumbnail.webp","readingTime":"2 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"actuator","name":"Actuator","color":"orange"},{"id":"monitoring","name":"Monitoring","color":"purple"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"spring-boot-aop","title":"Aspect-Oriented Programming (AOP) in Spring Boot","date":"2024-12-18","summary":"Learn how to implement Aspect-Oriented Programming (AOP) in Spring Boot using Java and Kotlin. Covers core concepts, use cases, and practical examples.","thumbnail":"/images/spring-boot-aop-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"aop","name":"AOP","color":"orange"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"spring-boot-di","title":"Dependency Injection in Spring Boot","date":"2024-12-18","summary":"Learn how Dependency Injection (DI) works in Spring Boot, including examples in Java and Kotlin. Covers key concepts, annotations, and practical use cases.","thumbnail":"/images/spring-boot-di-thumbnail.webp","readingTime":"2 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"dependency-injection","name":"Dependency Injection","color":"orange"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"object-relational-mapping","title":"Object-Relational Mapping (ORM)","date":"2024-12-16","summary":"Learn how to set up an ORM-based application with Spring Boot using Java, Kotlin, and Go (Gin). Includes PostgreSQL integration and basic CRUD operations.","thumbnail":"/images/orm-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"go","name":"Go","color":"brown"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"gin","name":"Gin","color":"green"},{"id":"orm","name":"ORM","color":"orange"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"rest-api-input-validation","title":"Input Validation in REST APIs","date":"2024-12-15","summary":"Learn how to implement input validation in REST APIs using Java, Kotlin, and Go with frameworks like Spring Boot and Gin. Covers annotations, custom validators, and error handling.","thumbnail":"/images/input-validation-thumbnail.webp","readingTime":"4 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"go","name":"Go","color":"brown"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"gin","name":"Gin","color":"green"},{"id":"validation","name":"Validation","color":"orange"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"spring-boot-graphql","title":"Building APIs with Spring for GraphQL","date":"2024-12-15","summary":"Learn how to build GraphQL APIs using Spring for GraphQL with Java and Kotlin. Includes schema creation, query handling, and integration.","thumbnail":"/images/spring-boot-graphql-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"graphql","name":"GraphQL","color":"pink"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"golang-gin-first-application","title":"Gin - First Application","date":"2024-12-14","summary":"A beginner-friendly guide to creating your first Golang Gin application from scratch. Learn the basics and start your journey with Gin.","thumbnail":"/images/golang-gin-first-app-thumbnail.webp","readingTime":"1 min read","topics":[{"id":"go","name":"Go","color":"brown"},{"id":"gin","name":"Gin","color":"green"},{"id":"beginner-guide","name":"Beginner Guide","color":"orange"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"building-a-rest-api-with-spring-boot","title":"Building a REST API with Spring Boot","date":"2024-12-11","summary":"Learn how to create a REST API using Spring Boot. Includes HTTP methods, JSON handling, Lombok integration, and curl for testing.","thumbnail":"/images/spring-boot-rest-api-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"rest-api","name":"REST API","color":"blue"},{"id":"programming","name":"Programming","color":"orange"}]},{"id":"spring-boot-first-application","title":"Spring Boot - First Application","date":"2024-12-10","summary":"A beginner-friendly guide to creating your first Spring Boot application from scratch. Learn the basics and start your journey with Spring Boot.","thumbnail":"/images/spring-boot-first-app-thumbnail.webp","readingTime":"2 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"beginner-guide","name":"Beginner Guide","color":"orange"},{"id":"programming","name":"Programming","color":"blue"}]}]},"__N_SSG":true}