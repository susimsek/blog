{"pageProps":{"_nextI18Next":{"initialI18nStore":{"tr":{"common":{"common":{"siteName":"Şuayb Şimşek'in Blogu","language":"Dil","theme":"Tema","header":{"logoAlt":"Şuayb'in Blogu Logo","title":"Şuayb'in Blogu","menu":{"home":"Ana Sayfa","about":"Hakkında","contact":"İletişim","search":"Ara"},"themeToggle":"Temayı Değiştir","theme":{"light":"Açık Mod","dark":"Koyu Mod"}},"sidebar":{"title":"Konular","loading":"Daha fazla konu yükleniyor..."},"footer":{"text":"© {{year}} Şuayb'in Blogu. Tüm hakları saklıdır."},"pagination":{"pageSize":"Sayfa Boyutu","showingResults":"{{start}}–{{end}} arası {{total}} sonuç"},"searchBar":{"placeholder":"Ara"},"sort":{"newest":"En Yeni Önce","oldest":"En Eski Önce"},"contactInfo":{"email":"E-posta"},"codeBlock":{"copy":"Kopyala","copied":"Kopyalandı!"},"selected":"Seçildi","selectAll":"Tümünü Seç","clearAll":"Tümünü Temizle","noResults":"Sonuç bulunamadı","andMore":"ve {{count}} daha","datePicker":{"selectDate":"Tarih Seçin","today":"Bugün","yesterday":"Dün","last7Days":"Son 7 Gün","last30Days":"Son 30 Gün","customDate":"Özel Tarih","startDatePlaceholder":"Başlangıç Tarihi","endDatePlaceholder":"Bitiş Tarihi","startDateLabel":"Başlangıç Tarihi","endDateLabel":"Bitiş Tarihi","clearSelection":"Seçimi Temizle","applySelection":"Seçimi Uygula"},"validation":{"required":"Bu alan zorunludur.","minlength":"Bu alan en az {{ min }} karakter olmalıdır.","maxlength":"Bu alan en fazla {{ max }} karakter olabilir.","min":"Bu alan en az {{ min }} olmalıdır.","max":"Bu alan en fazla {{ max }} olabilir.","minbytes":"Bu alan en az {{ min }} bayt olmalıdır.","maxbytes":"Bu alan en fazla {{ max }} bayt olabilir.","pattern":"Bu alan {{ pattern }} deseniyle eşleşmelidir.","number":"Bu alan bir sayı olmalıdır.","datetimelocal":"Bu alan bir tarih ve saat olmalıdır.","patternLogin":"Bu alan sadece harfler, rakamlar ve e-posta adresleri içerebilir.","email":"Lütfen geçerli bir e-posta adresi girin.","url":"Lütfen geçerli bir URL girin.","alpha":"Bu alan sadece harf içermelidir.","alphanumeric":"Bu alan sadece harf ve rakam içermelidir.","passwordStrength":"Şifre en az bir büyük harf, bir sayı ve bir özel karakter içeren en az 8 karakter olmalıdır.","startDateAfterEndDate":"Başlangıç tarihi, bitiş tarihinden sonra olamaz.","endDateBeforeStartDate":"Bitiş tarihi, başlangıç tarihinden önce olamaz."},"viewAllResults":"\"{{query}}\" için tüm sonuçları gör"}},"post":{"post":{"noPostsFound":"Hiçbir gönderi bulunamadı.","readMore":"Daha Fazla Oku"}}},"en":{"common":{"common":{"siteName":"Şuayb Şimşek's Blog","language":"Language","theme":"Theme","header":{"logoAlt":"Şuayb's Blog Logo","title":"Şuayb's Blog","menu":{"home":"Home","about":"About","contact":"Contact","search":"Search"},"themeToggle":"Toggle Theme","theme":{"light":"Light Mode","dark":"Dark Mode"}},"sidebar":{"title":"Topics","loading":"Loading more topics..."},"footer":{"text":"© {{year}} Şuayb's Blog. All rights reserved."},"pagination":{"pageSize":"Page size","showingResults":"Showing {{start}}–{{end}} of {{total}} results"},"searchBar":{"placeholder":"Search"},"sort":{"newest":"Newest First","oldest":"Oldest First"},"contactInfo":{"email":"Email"},"codeBlock":{"copy":"Copy","copied":"Copied!"},"selected":"Selected","selectAll":"Select All","clearAll":"Clear All","noResults":"No results found","andMore":"and {{count}} more","datePicker":{"selectDate":"Select Date","today":"Today","yesterday":"Yesterday","last7Days":"Last 7 Days","last30Days":"Last 30 Days","customDate":"Custom Date","startDatePlaceholder":"Start Date","endDatePlaceholder":"End Date","startDateLabel":"Start Date","endDateLabel":"End Date","clearSelection":"Clear Selection","applySelection":"Apply Selection"},"validation":{"required":"This field is required.","minlength":"This field must be at least {{ min }} characters.","maxlength":"This field cannot be longer than {{ max }} characters.","min":"This field should be at least {{ min }}.","max":"This field cannot be more than {{ max }}.","minbytes":"This field should be at least {{ min }} bytes.","maxbytes":"This field cannot be more than {{ max }} bytes.","pattern":"This field should match the pattern for {{ pattern }}.","number":"This field should be a number.","datetimelocal":"This field should be a date and time.","patternLogin":"This field can only contain letters, digits, and e-mail addresses.","email":"Please enter a valid email address.","url":"Please enter a valid URL.","alpha":"This field should only contain letters.","alphanumeric":"This field should only contain letters and numbers.","passwordStrength":"Password must contain at least 8 characters, including an uppercase letter, a number, and a special character.","startDateAfterEndDate":"Start date cannot be after end date.","endDateBeforeStartDate":"End date cannot be before start date."},"viewAllResults":"See all results for \"{{query}}\""}},"post":{"post":{"readMore":"Read More","noPostsFound":"No posts found."}}}},"initialLocale":"tr","ns":["common","post"],"userConfig":{"debug":false,"i18n":{"defaultLocale":"en","locales":["en","tr"]},"localePath":"/home/circleci/project/public/locales","default":{"debug":false,"i18n":{"defaultLocale":"en","locales":["en","tr"]},"localePath":"/home/circleci/project/public/locales"}}},"post":{"contentHtml":"\nSpring Boot GraphQL JWE Kimlik Doğrulaması, GraphQL’in esnekliğini, stateless şifreli JWT’leri (JWE) ve JPA'yı birleştirerek güvenli ve ölçeklendirilebilir bir API sunar.\n\n---\n\n## 🌟 GraphQL + JWE Kimlik Doğrulaması Neden Kullanılmalı?\n\n- **Stateless Güvenlik**: Tokenlar kendi içinde tüm bilgiyi barındırır ve sunucu tarafında saklama gerektirmez.\n- **GraphQL Esnekliği**: Her query veya mutationu tutarlı bir şekilde koruyun.\n- **Veri Hassasiyeti**: İstemcilerin tam olarak istediği veriyi çeker.\n- **Bütünlük**: İmzalı tokenlar, içeriğin değiştirilmediğini garanti eder.\n- **Gizlilik**: Şifrelenmiş JWT’ler hassas bilgileri dışarıdan okunamaz halde tutar.\n- **Standartlara Dayalı**: JOSE, Spring Security ve GraphQL’den yararlanın.\n- **Ölçeklenebilirlik**: Session replikasyonu veya sticky session gerektirmeden yatay ölçeklenebilir.\n\n---\n\n## 🌟 Ön Koşullar\n\n- ☕ **JDK 17** veya üzeri\n- 📦 **Spring Boot 3.2+**\n- 🔤 **IDE** (IntelliJ IDEA, Eclipse)\n- 🛢️ **PostgreSQL** (veya geliştirme için H2)\n\n---\n\n## 🛠️ Step 1: Add Dependencies\n\n`pom.xml` veya `build.gradle` dosyanıza şunları ekleyin.\n\n**Maven:**\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n  </dependency>\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-websocket</artifactId>\n  </dependency>\n  <dependency>\n    <groupId>org.springframework.security</groupId>\n    <artifactId>spring-security-oauth2-resource-server</artifactId>\n  </dependency>\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n  </dependency>\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-graphql</artifactId>\n  </dependency>\n  <dependency>\n    <groupId>com.graphql-java</groupId>\n    <artifactId>graphql-java-extended-scalars</artifactId>\n    <version>22.0</version>\n  </dependency>\n  <dependency>\n    <groupId>org.liquibase</groupId>\n    <artifactId>liquibase-core</artifactId>\n  </dependency>\n  <dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <optional>true</optional>\n  </dependency>\n  <dependency>\n    <groupId>com.h2database</groupId>\n    <artifactId>h2</artifactId>\n    <scope>runtime</scope>\n  </dependency>\n</dependencies>\n\n<build>\n<plugins>\n  <plugin>\n    <groupId>org.hibernate.orm.tooling</groupId>\n    <artifactId>hibernate-enhance-maven-plugin</artifactId>\n    <version>${hibernate.version}</version>\n    <executions>\n      <execution>\n        <id>enhance</id>\n        <goals>\n          <goal>enhance</goal>\n        </goals>\n        <configuration>\n          <enableLazyInitialization>true</enableLazyInitialization>\n          <enableDirtyTracking>true</enableDirtyTracking>\n          <enableAssociationManagement>true</enableAssociationManagement>\n        </configuration>\n      </execution>\n    </executions>\n  </plugin>\n  <plugin>\n    <groupId>org.graalvm.buildtools</groupId>\n    <artifactId>native-maven-plugin</artifactId>\n  </plugin>\n</plugins>\n</build>\n```\n\n**Gradle:**\n\n```groovy\ndependencies {\n  implementation 'org.springframework.boot:spring-boot-starter-web'\n  implementation 'org.springframework.boot:spring-boot-starter-websocket'\n  implementation 'org.springframework.security:spring-security-oauth2-resource-server'\n  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'\n  implementation 'org.springframework.boot:spring-boot-starter-graphql'\n  implementation 'com.graphql-java:graphql-java-extended-scalars:22.0'\n  implementation 'org.liquibase:liquibase-core'\n  compileOnly 'org.projectlombok:lombok'\n  runtimeOnly 'com.h2database:h2'\n}\n\nplugins {\n  id 'org.hibernate.orm' version '6.6.13.Final'\n  id 'org.graalvm.buildtools.native' version '0.10.6'\n}\n\nhibernate {\n  enhancement {\n    enableAssociationManagement = true\n  }\n}\n```\n\n---\n\n## 🛠️ Adım 2: Yapılandırma Dosyaları\n\nBu bölümde, Spring Boot uygulamamızı H2/PostgreSQL, JPA, Liquibase changelog’ları, veri yüklemeleri, JWE anahtar özellikleri, GraphQL şema tanımları ve GraalVM native-image reflection tanımları ile yapılandırmak için gereken tüm uygulama ve veritabanı düzeyindeki yapılandırma dosyalarını tanımlıyoruz.\n\n- **`application.yml`**\n  Spring datasource, H2 konsolu, JPA/Hibernate, Liquibase changelog path’i, GraphQL subscriptions pathi ve tüm JWT/JWE anahtarları, issuer ve geçerlilik süresi (expiration) ayarlarını içerir.\n\n- **`liquibase/master.xml`**\n  Liquibase **master changelog** dosyası; H2 ve PostgreSQL için DBMS özel özellikler ve alt changelog tanımlarını barındırır.\n\n- **`liquibase/changelog/changelog-user.xml`**\n  `user_identity`, `authority` ve `user_authority_mapping` tabloları, indeksler, yabancı anahtarlar (FK) ve ilk `<loadData>` adımlarını tanımlayan temel şema değişiklik changelogu.\n\n- **`liquibase/data/user.csv`**\n  Kullanıcı kayıtları (UUID, kullanıcı adı, bcrypt ile şifrelenmiş parola, e-posta, enabled flagi, zaman damgaları ve oluşturan kullanıcı bilgisi).\n\n- **`liquibase/data/authority.csv`**\n  Yetki kayıtları (UUID, ad, açıklama, zaman damgaları ve oluşturan kullanıcı bilgisi).\n\n- **`liquibase/data/user_authority_mapping.csv`**\n  Kullanıcılar ile yetkiler arasındaki mappingler (composite birincil anahtar, zaman damgaları ve oluşturan kullanıcı bilgisi).\n\n- **`graphql/schema.graphqls`**\n  API için özel scalar tipler, query, subscription ve mutation tanımları ile DTO şema tanımlamalarını içeren GraphQL şema dosyası.\n\n- **`META-INF/native-image/liquibase/reflect-config.json`**\n  GraalVM native-image oluştururken Liquibase sınıfları için gerekli reflection kurallarını tanımlar.\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### application.yml\n\n```yaml\nspring:\n  datasource:\n    url: jdbc:h2:mem:testdb;MODE=PostgreSQL;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE\n    driver-class-name: org.h2.Driver\n    username: sa\n    password: password\n  h2:\n    console:\n      enabled: true\n  jpa:\n    open-in-view: false\n    hibernate:\n      ddl-auto: none\n    show-sql: true\n    properties:\n      hibernate.format_sql: true\n  liquibase:\n    change-log: classpath:liquibase/master.xml\n  graphql:\n    websocket:\n      path: /subscriptions\n    graphiql:\n      enabled: true\nsecurity:\n  admin:\n    username: admin\n    password: adminpass\n  user:\n    username: user\n    password: userpass\n  jwt:\n    issuer: demo-issuer\n    expiration-duration: 3600s\n    signing:\n      key-id: signing-key\n      public-key: |-\n        -----BEGIN PUBLIC KEY-----\n        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjZEcz5itWkDGOSqZdB5P\n        JE0ccOCckskp0hN3kQbT1qnv+9/k66jlWgVi4HSTppwdNF/Ylu5u541Qj+Okyg+u\n        8o2PvKo5CfgvTDsFLTrZHUXU6hCSGatLAQoeN6lT8wzov2r4DFecXrIqcO6SvMB5\n        ecPqsfiTi4trsNKgJ4cWS6gILH62ISd1ipUadfpnUzDMO1OulV0CJNV6bcBk7Es9\n        RW6AHfg9j8osSanpwvRM4MJkB0SRxYUnrN9faGpkBZISZJ8TShhaTHEGfSNgKe5y\n        8iu+AMGGZu8DYczVmqS3Ske1fq6y5HEGCma7Mo019GmwKeHBo1obuET6cZRygj4y\n        twIDAQAB\n        -----END PUBLIC KEY-----\n      private-key: |-\n        -----BEGIN PRIVATE KEY-----\n        MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCNkRzPmK1aQMY5\n        Kpl0Hk8kTRxw4JySySnSE3eRBtPWqe/73+TrqOVaBWLgdJOmnB00X9iW7m7njVCP\n        46TKD67yjY+8qjkJ+C9MOwUtOtkdRdTqEJIZq0sBCh43qVPzDOi/avgMV5xesipw\n        7pK8wHl5w+qx+JOLi2uw0qAnhxZLqAgsfrYhJ3WKlRp1+mdTMMw7U66VXQIk1Xpt\n        wGTsSz1FboAd+D2PyixJqenC9EzgwmQHRJHFhSes319oamQFkhJknxNKGFpMcQZ9\n        I2Ap7nLyK74AwYZm7wNhzNWapLdKR7V+rrLkcQYKZrsyjTX0abAp4cGjWhu4RPpx\n        lHKCPjK3AgMBAAECggEABMo/sNCIMREXA/EqjxDFecN4LmOTOK5A0YBiH9Cc01sd\n        qSaavtSQqhqbjV+0bUNEA7UohXbc3s3bx3qa5VFhiIh8sBQMaQdyRkCK/MxMc16d\n        BSx5XQ/8MjVO73A1zHgH2g47BWPjgRrDL94KrgNPOO0FoG76QxL9GlcOHzhFa1rf\n        xbb2auLBtflKy+5TZNnB/sbFC9ISpWywzfblD2Fsvxupl0vNWtA0Y2rPbKMZRnY+\n        V6NC38yxW3HHAdWQRYLGOitM59I0HBgnjQKzTBNIsjPnJA2BSZvMBtQ1e3RQV0qE\n        8VVoktZ8A0KDUxqdKWYlGYAY5hIw1y3UUsPRUbS3fQKBgQDAZehu+Kb5Sw+h00Qu\n        vViNHDvi0PwmhQrHVpgjrppCnWsTk6FJFm+EBLY+87usXuRCnfZ1semb6P+yjLh2\n        bJ9IXIrFAztcyE+7eZfn0H7mHA7E2ICKTjNdKbjy8kHViHpgdXREnAOrFTTk/BqW\n        dq+weG2OuxYczWsY4XliWaVyiwKBgQC8XYExpSmoyI37o+jr9405k30tbGUw4X+/\n        xYOvSUuafI8IOSLfKTpsvkMN3hxpJO6apIRAjOALbotKUA5FrHQPenuBWOr3mBJT\n        euLiaWphqU8YN5dbNd+JhC/Jh5DLhY5FpB2Fv2MKSoF7+onpjDy9pEU5aReeBB0v\n        ekUw4nWiBQKBgHxyrnjxP1frFG5xMB4nfZqw04+v7BmiXsl3mqsh6kgCeNtN17pl\n        17YGMjfgAdnJ+02XzW5tqRSfDp3YZgy7z//HVD+BCqnGK8SxLu/ULfD73xW2kNZl\n        JNYzAZ2r06eiQr4X2x/x5nGIIxGmfDAtDxFPpFX5b6ErwgVy+sgCAoFnAoGAWSpu\n        EMEdQk+FnnwNsz2g9YNSuyDXmdb08SOfXWd1yXBzCLJ7RmYuyPEbrsHYcxFPfZap\n        ICFPoTm35/qTdvnWiskxE56yw3eSHUBLjF/YQtixn0YZeMy8v0z6jgyFR0I2gdLZ\n        QsnBKUrxlm2XwR1oV2Eef7m2u085PZNEk4pvor0CgYA6n060r48/CgRVslAeGder\n        fZ3n+2ru8q2UVB38evepjLifn5+tKdFzZ7/NckXMC0NOVzm74qG46VFLMw5TtyT4\n        /hRvGSYxA6dMjXy+tcrAns9Isrz2PnYFntlbhU6hw0um809tFunbvITfyeOjAsDW\n        stC4thnhzXXT1Y3RfFtYEg==\n        -----END PRIVATE KEY-----\n    encryption:\n      key-id: encryption-key\n      public-key: |-\n        -----BEGIN PUBLIC KEY-----\n        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtU7Vu4tML8qg9BISaUH0\n        BTU0+qkHJS3TUl3R0hEPttZJGf8EgT7bpWqRjdhMC2SYt2ifNF82EgMo/eva1rLn\n        wYtCsxjJ7oB4U2m16/JKHtphmMUGhSLgbp+Y8pGAQ+P6u4HLlI0qbL92Syb6QCTr\n        nYIlzZ2uUAvUQg/SbuAvdS4kdauZtpMNbhryusMVvILVBC5yUhfLJAkjbU3qWo/n\n        2NKPr4kjwwFh6FaAf0HLsXCFmJbPPok6WMZeDqPORPZCt5gU2t04fS7s/2SSbhQ/\n        i+7yyT4pl44cUlNLLN3Qo73sai5H90q7Dvmk3M5/YMJB0Ueyb705LHyOO5xA618s\n        qQIDAQAB\n        -----END PUBLIC KEY-----\n      private-key: |-\n        -----BEGIN PRIVATE KEY-----\n        MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC1TtW7i0wvyqD0\n        EhJpQfQFNTT6qQclLdNSXdHSEQ+21kkZ/wSBPtulapGN2EwLZJi3aJ80XzYSAyj9\n        69rWsufBi0KzGMnugHhTabXr8koe2mGYxQaFIuBun5jykYBD4/q7gcuUjSpsv3ZL\n        JvpAJOudgiXNna5QC9RCD9Ju4C91LiR1q5m2kw1uGvK6wxW8gtUELnJSF8skCSNt\n        Tepaj+fY0o+viSPDAWHoVoB/QcuxcIWYls8+iTpYxl4Oo85E9kK3mBTa3Th9Luz/\n        ZJJuFD+L7vLJPimXjhxSU0ss3dCjvexqLkf3SrsO+aTczn9gwkHRR7JvvTksfI47\n        nEDrXyypAgMBAAECggEAREnJHrY8n9OGA+e6n4KD0mJT7gUz98Dm0yMbIC/k50yW\n        hAAVRkjSmd8lq3NIURI2ov342NTznJ0sF1d6OVtxBujY2nP/uqEQsPoj1xaO7Ef8\n        cnnjFsooFgJurQ44bVm02mLstqrky8jhWTT5FKfTRqP6cRNu0B9kdu1WqQQvW8a/\n        C8xD8XUFzzJFQsEstJ076NjlZNH3EeqFiLxyVdV7tPEJRnOe2V2BAAgda3ByA6Jc\n        Nd4xYHTVr5rZ+KES9gaAgb86+S7hNigsxz5Gp58NimLEyz1Qd+d9QCgPRgKOV5Uq\n        0ci6c28ZrxW9wa/2CGCpoow1V7hRy1fZ24g2Tz91cQKBgQDbSdP/FQYuem0pUf8u\n        mA/niEC8Jz30FW3ix5aqbQ8YRudK48Xy8F7AWnlS0wT2k/Xaeppn9YSPK4HlsNk2\n        1gnpNfzdqXpJQtuxcPPeFNzUdXzBrsLXYqtlhOX/afrzqMhp73gkqoxXtqwD7BqN\n        VfMcVXsWrEZQrRPBn/RUnnLdJwKBgQDTqUGupm93UlhoPgLXHGF/seQwPPHcU6lS\n        SS9l512Ie21B+vZecgO4r77BXJwbY4rZVA5/m+wrsNmsT2f8yfdbs84cBDDWiKy5\n        t2Um8zrus+BCIffxc9Fck9/htK33jLLcYwdSAm3a9pJxR9f/kAdredSTGBNJ3W/2\n        rfh3cdNprwKBgDi7WfBFRSsjGzi0cPth9cNlubGzyVBrdtlT34PJ4Tzboxz53o1i\n        aHEFNxwZYdBVKSbTzzyUBS5xCBMfdKK+LyQ5hmjmXq+zb1jxqvXKmfMRTixhhSDp\n        8wO5pTM1/Omqwea+QGvj/5j1tnzxSVFFajbrWoPcH/jhPho6wqBducPDAoGBALOJ\n        MEOavZXy7TaO0w3v7uvH0wzvxR/kfw1jMqc3l2j7ePOskmoOQAXaXO3bRjcdOlua\n        Jyoq8islOZ4lRMlx7zWD0OKG035GNGzbmRtu2aA8R48RDSVr3jyu2gqznZULbXPv\n        M/hmQxSmbhVUoW0PmJubnaqfk0zmXeBaNRXsIS3VAoGBALdsAtqR23PVeL6sYj2l\n        dRNTDXpfvjFqJ5NThRO/4mT0CrPHQVj+Mz2bTc/Dxiwi8s8m3L+g23i3hodh/QMb\n        Iz+UbcJZBGAKsFbPKGOtj6Bi07y/L11mcuNJzOWe61/JbVmJss0s+N/v3XucK/Ge\n        CUaGOccsMO221v6JoBh9J3Hz\n        -----END PRIVATE KEY-----\n```\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### master.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<databaseChangeLog\n  xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"\n      http://www.liquibase.org/xml/ns/dbchangelog\n      http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.9.xsd\">\n\n  <!-- H2 defaults -->\n  <property name=\"now\" value=\"now()\" dbms=\"h2\"/>\n  <property name=\"floatType\" value=\"float4\" dbms=\"h2\"/>\n  <property name=\"uuidType\" value=\"uuid\" dbms=\"h2\"/>\n  <property name=\"datetimeType\" value=\"datetime(6)\" dbms=\"h2\"/>\n  <property name=\"binaryType\" value=\"LONGVARBINARY\" dbms=\"h2\"/>\n  <property name=\"clobType\" value=\"longvarchar\" dbms=\"h2\"/>\n  <property name=\"blobType\" value=\"blob\" dbms=\"h2\"/>\n\n  <!-- PostgreSQL overrides -->\n  <property name=\"now\" value=\"current_timestamp\" dbms=\"postgresql\"/>\n  <property name=\"floatType\" value=\"float4\" dbms=\"postgresql\"/>\n  <property name=\"uuidType\" value=\"uuid\" dbms=\"postgresql\"/>\n  <property name=\"datetimeType\" value=\"datetime\" dbms=\"postgresql\"/>\n  <property name=\"binaryType\" value=\"BYTEA\" dbms=\"postgresql\"/>\n  <property name=\"clobType\" value=\"clob\" dbms=\"postgresql\"/>\n  <property name=\"blobType\" value=\"blob\" dbms=\"postgresql\"/>\n\n  <!-- include the core auth changelog -->\n  <include file=\"classpath:db/changelog/changelog-user.xml\"/>\n\n</databaseChangeLog>\n```\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### changelog-user.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<databaseChangeLog\n  xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"\n      http://www.liquibase.org/xml/ns/dbchangelog\n      http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.9.xsd\">\n\n  <changeSet id=\"20250510-1\" author=\"susimsek\">\n    <createTable tableName=\"user_identity\">\n      <column name=\"id\" type=\"varchar(36)\">\n        <constraints primaryKey=\"true\" primaryKeyName=\"pk_user_identity\" nullable=\"false\"/>\n      </column>\n      <column name=\"username\" type=\"varchar(50)\">\n        <constraints nullable=\"false\" unique=\"true\"/>\n      </column>\n      <column name=\"password\" type=\"varchar(100)\">\n        <constraints nullable=\"false\"/>\n      </column>\n      <column name=\"email\" type=\"varchar(100)\">\n        <constraints nullable=\"false\" unique=\"true\"/>\n      </column>\n      <column name=\"first_name\" type=\"varchar(50)\"/>\n      <column name=\"last_name\" type=\"varchar(50)\"/>\n      <column name=\"enabled\" type=\"boolean\">\n        <constraints nullable=\"false\"/>\n      </column>\n      <column name=\"created_at\" type=\"datetime\">\n        <constraints nullable=\"false\"/>\n      </column>\n      <column name=\"created_by\" type=\"varchar(50)\">\n        <constraints nullable=\"false\"/>\n      </column>\n      <column name=\"updated_at\" type=\"datetime\"/>\n      <column name=\"updated_by\" type=\"varchar(50)\"/>\n    </createTable>\n\n    <createIndex indexName=\"idx_user_identity_username\" tableName=\"user_identity\">\n      <column name=\"username\"/>\n    </createIndex>\n    <createIndex indexName=\"idx_user_identity_email\" tableName=\"user_identity\">\n      <column name=\"email\"/>\n    </createIndex>\n  </changeSet>\n\n  <changeSet id=\"20250510-2\" author=\"susimsek\">\n    <createTable tableName=\"authority\">\n      <column name=\"id\" type=\"varchar(36)\">\n        <constraints primaryKey=\"true\" primaryKeyName=\"pk_authority\" nullable=\"false\"/>\n      </column>\n      <column name=\"name\" type=\"varchar(50)\">\n        <constraints nullable=\"false\" unique=\"true\"/>\n      </column>\n      <column name=\"description\" type=\"varchar(255)\"/>\n      <column name=\"created_at\" type=\"datetime\">\n        <constraints nullable=\"false\"/>\n      </column>\n      <column name=\"created_by\" type=\"varchar(50)\">\n        <constraints nullable=\"false\"/>\n      </column>\n      <column name=\"updated_at\" type=\"datetime\"/>\n      <column name=\"updated_by\" type=\"varchar(50)\"/>\n    </createTable>\n\n    <createIndex indexName=\"idx_authority_name\" tableName=\"authority\">\n      <column name=\"name\"/>\n    </createIndex>\n  </changeSet>\n\n  <changeSet id=\"20250510-3\" author=\"susimsek\">\n    <createTable tableName=\"user_authority_mapping\">\n      <column name=\"user_id\" type=\"varchar(36)\">\n        <constraints nullable=\"false\"/>\n      </column>\n      <column name=\"authority_id\" type=\"varchar(36)\">\n        <constraints nullable=\"false\"/>\n      </column>\n      <column name=\"created_at\" type=\"datetime\">\n        <constraints nullable=\"false\"/>\n      </column>\n      <column name=\"created_by\" type=\"varchar(50)\">\n        <constraints nullable=\"false\"/>\n      </column>\n      <column name=\"updated_at\" type=\"datetime\"/>\n      <column name=\"updated_by\" type=\"varchar(50)\"/>\n    </createTable>\n\n    <addPrimaryKey\n      tableName=\"user_authority_mapping\"\n      columnNames=\"user_id, authority_id\"\n      constraintName=\"pk_user_authority_mapping\"/>\n  </changeSet>\n\n  <changeSet id=\"20250510-4\" author=\"susimsek\">\n    <addForeignKeyConstraint\n      baseTableName=\"user_authority_mapping\"\n      baseColumnNames=\"user_id\"\n      constraintName=\"fk_user_authority_user\"\n      referencedTableName=\"user_identity\"\n      referencedColumnNames=\"id\"/>\n  </changeSet>\n\n  <changeSet id=\"20250510-5\" author=\"susimsek\">\n    <addForeignKeyConstraint\n      baseTableName=\"user_authority_mapping\"\n      baseColumnNames=\"authority_id\"\n      constraintName=\"fk_user_authority_authority\"\n      referencedTableName=\"authority\"\n      referencedColumnNames=\"id\"/>\n  </changeSet>\n\n  <changeSet id=\"20250510-1-data\" author=\"susimsek\">\n    <loadData\n      file=\"db/data/user.csv\"\n      separator=\";\"\n      tableName=\"user_identity\">\n      <column name=\"id\" type=\"string\"/>\n      <column name=\"username\" type=\"string\"/>\n      <column name=\"password\" type=\"string\"/>\n      <column name=\"email\" type=\"string\"/>\n      <column name=\"first_name\" type=\"string\"/>\n      <column name=\"last_name\" type=\"string\"/>\n      <column name=\"enabled\" type=\"boolean\"/>\n      <column name=\"created_at\" type=\"datetime\"/>\n      <column name=\"created_by\" type=\"string\"/>\n      <column name=\"updated_at\" type=\"datetime\"/>\n      <column name=\"updated_by\" type=\"string\"/>\n    </loadData>\n  </changeSet>\n\n  <changeSet id=\"20250510-2-data\" author=\"susimsek\">\n    <loadData\n      file=\"db/data/authority.csv\"\n      separator=\";\"\n      tableName=\"authority\">\n      <column name=\"id\" type=\"string\"/>\n      <column name=\"name\" type=\"string\"/>\n      <column name=\"description\" type=\"string\"/>\n      <column name=\"created_at\" type=\"datetime\"/>\n      <column name=\"created_by\" type=\"string\"/>\n      <column name=\"updated_at\" type=\"datetime\"/>\n      <column name=\"updated_by\" type=\"string\"/>\n    </loadData>\n  </changeSet>\n\n  <changeSet id=\"20250510-3-data\" author=\"susimsek\">\n    <loadData\n      file=\"db/data/user_authority_mapping.csv\"\n      separator=\";\"\n      tableName=\"user_authority_mapping\">\n      <column name=\"user_id\" type=\"string\"/>\n      <column name=\"authority_id\" type=\"string\"/>\n      <column name=\"created_at\" type=\"datetime\"/>\n      <column name=\"created_by\" type=\"string\"/>\n      <column name=\"updated_at\" type=\"datetime\"/>\n      <column name=\"updated_by\" type=\"string\"/>\n    </loadData>\n  </changeSet>\n\n</databaseChangeLog>\n```\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### user.csv\n\n```csv\nid;username;password;email;first_name;last_name;enabled;created_at;created_by;updated_at;updated_by\na1b2c3d4-e5f6-7890-abcd-ef1234567890;admin;$2a$10$sva6wl8pmGKJE6NIWrxwcuJK1Jaa2I/LOI43iHVpbR4YB8KjGViiK;admin@example.com;Admin;User;true;2025-05-10 12:00:00;system;2025-05-10 12:00:00;system\n09876543-21fe-dcba-0987-654321fedcba;user;$2a$10$5Py4PyteLuXEqnGpSigzfu0V55C7Hi7zX18lmh.J8Bpmft.h23voG;user@example.com;Normal;User;true;2025-05-10 12:00:00;system;2025-05-10 12:00:00;system\n```\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### authority.csv\n\n```csv\nid;name;description;created_at;created_by;updated_at;updated_by\nf47ac10b-58cc-4372-a567-0e02b2c3d479;ROLE_ADMIN;Administrator role;2025-05-10 12:00:00;system;2025-05-10 12:00:00;system\n9c858901-8a57-4791-81fe-4c455b099bc9;ROLE_USER;User role;2025-05-10 12:00:00;system;2025-05-10 12:00:00;system\n```\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### user_authority_mapping.csv\n\n```csv\nuser_id;authority_id;created_at;created_by;updated_at;updated_by\na1b2c3d4-e5f6-7890-abcd-ef1234567890;9c858901-8a57-4791-81fe-4c455b099bc9;2025-05-10 12:00:00;system;2025-05-10 12:00:00;system\na1b2c3d4-e5f6-7890-abcd-ef1234567890;f47ac10b-58cc-4372-a567-0e02b2c3d479;2025-05-10 12:00:00;system;2025-05-10 12:00:00;system\n09876543-21fe-dcba-0987-654321fedcba;9c858901-8a57-4791-81fe-4c455b099bc9;2025-05-10 12:00:00;system;2025-05-10 12:00:00;system\n```\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### schema.graphqls\n\n```graphql\nscalar Long\nscalar Date\nscalar Instant\n\ntype Query {\n  helloAll: String!\n  helloAdmin: String!\n}\n\ntype Mutation {\n  login(input: LoginInput!): TokenDTO!\n  logout: Boolean!\n  greet(input: GreetInput!): GreetDTO!\n}\n\ntype Subscription {\n  greetStream(input: GreetInput!): GreetDTO!\n  greetStreamAdmin(input: GreetInput!): GreetDTO!\n}\n\ninput LoginInput {\n  username: String!\n  password: String!\n}\n\ninput GreetInput {\n  message: String!\n}\n\ntype TokenDTO {\n  accessToken: String!\n  tokenType: String!\n  accessTokenExpiresIn: Long!\n}\n\ntype GreetDTO {\n  greeting: String!\n  timestamp: Instant!\n}\n```\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### reflect-config.json\n\n```json\n[\n  {\n    \"name\": \"liquibase.logging.mdc.MdcManagerFactory\",\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.change.core.LoadDataColumnConfig\",\n    \"queryAllPublicMethods\": true,\n    \"allDeclaredMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.command.CommandFactory\",\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.changelog.ChangeLogHistoryServiceFactory\",\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.BigIntType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.BlobType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.BooleanType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.CharType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.ClobType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.CurrencyType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.DatabaseFunctionType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.DateTimeType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.DateType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.DecimalType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.DoubleType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.FloatType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.IntType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.MediumIntType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.NCharType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.NumberType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.NVarcharType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.SmallIntType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.TimestampType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.TimeType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.TinyIntType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.UnknownType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.UUIDType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.VarcharType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  },\n  {\n    \"name\": \"liquibase.datatype.core.XMLType\",\n    \"allPublicMethods\": true,\n    \"methods\": [{ \"name\": \"<init>\", \"parameterTypes\": [] }]\n  }\n]\n```\n\n---\n\n## 📋 Adım 3: GraphQL & Güvenlik & Veritabanı Yapılandırması\n\nBu bölümde JWE tabanlı kimlik doğrulama, GraphQL entegrasyonu, GraalVM native-image çalışma zamanı ipuçları ve özel scalars için gerekli bean'leri ve ayarları tanımlıyoruz:\n\n- **JwtProperties**: JWT düzenleyicisi (issuer), geçerlilik süresi ve imzalama/şifreleme anahtar çiftlerini yapılandırır.\n- **SecurityJwtConfig**: RSA JWK nesnelerini oluşturur, JWT encoder/decoder’ı, authentication converter ve token resolver ve WebSocket interceptor bean’lerini yapılandırır.\n- **SecurityConfig**: `DomainUserDetailsService` ile entegre olur, kimlik doğrulama yöneticisi (authentication manager), password encoder ve JWE desteği ile stateless güvenlik filtre zincirini yapılandırır.\n- **DatabaseConfig**: JPA repository'lerini, auditing ve transaction yönetimini etkinleştirir.\n- **GraphQLConfig**: GraphQL için özel scalarları (`Long`, `Date`, `Instant`) tanımlar.\n- **InstantScalar**: GraphQL şemasında ISO-8601 uyumlu `Instant` tipini tanımlayan custom scalar.\n- **NativeConfig**: GraalVM native-image derlemesi için çalışma zamanı ipuçlarını (reflection ve kaynak desenleri) kaydeder.\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### SecurityJwtConfig\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.config;\n\nimport com.nimbusds.jose.EncryptionMethod;\nimport com.nimbusds.jose.JWEAlgorithm;\nimport com.nimbusds.jose.JWSAlgorithm;\nimport com.nimbusds.jose.jwk.JWKSet;\nimport com.nimbusds.jose.jwk.RSAKey;\nimport com.nimbusds.jose.jwk.source.JWKSource;\nimport com.nimbusds.jose.proc.JWEDecryptionKeySelector;\nimport com.nimbusds.jose.proc.JWSVerificationKeySelector;\nimport com.nimbusds.jose.proc.SecurityContext;\nimport com.nimbusds.jwt.proc.DefaultJWTProcessor;\nimport io.github.susimsek.springbootgraphqljwedemo.security.CookieAuthenticationWebSocketInterceptor;\nimport io.github.susimsek.springbootgraphqljwedemo.security.CookieBearerTokenResolver;\nimport io.github.susimsek.springbootgraphqljwedemo.security.KeyUtils;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.graphql.server.WebSocketGraphQlInterceptor;\nimport org.springframework.graphql.server.support.BearerTokenAuthenticationExtractor;\nimport org.springframework.security.authentication.ProviderManager;\nimport org.springframework.security.oauth2.jwt.JwtDecoder;\nimport org.springframework.security.oauth2.jwt.JwtEncoder;\nimport org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\nimport org.springframework.security.oauth2.jwt.NimbusJwtEncoder;\nimport org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;\nimport org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;\nimport org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationProvider;\nimport org.springframework.security.oauth2.server.resource.web.BearerTokenResolver;\n\nimport java.util.List;\n\nimport static io.github.susimsek.springbootgraphqljwedemo.security.SecurityUtils.AUTHORITIES_KEY;\n\n@Configuration\npublic class SecurityJwtConfig {\n\n  private final JwtProperties props;\n\n  public SecurityJwtConfig(JwtProperties props) {\n    this.props = props;\n  }\n\n  @Bean\n  public RSAKey signingKey() throws Exception {\n    return KeyUtils.buildRsaKey(\n      props.getSigning().getPublicKey(),\n      props.getSigning().getPrivateKey(),\n      props.getSigning().getKeyId(),\n      true\n    );\n  }\n\n  @Bean\n  public RSAKey encryptionKey() throws Exception {\n    return KeyUtils.buildRsaKey(\n      props.getEncryption().getPublicKey(),\n      props.getEncryption().getPrivateKey(),\n      props.getEncryption().getKeyId(),\n      false\n    );\n  }\n\n  @Bean\n  public JWKSource<SecurityContext> jwkSource(RSAKey signingKey, RSAKey encryptionKey) {\n    JWKSet jwkSet = new JWKSet(List.of(signingKey, encryptionKey));\n    return (jwkSelector, context) -> jwkSelector.select(jwkSet);\n  }\n\n  @Bean\n  public JwtDecoder jwtDecoder(JWKSource<SecurityContext> jwkSource) {\n    DefaultJWTProcessor<SecurityContext> jwtProcessor = new DefaultJWTProcessor<>();\n\n    jwtProcessor.setJWEKeySelector(new JWEDecryptionKeySelector<>(\n      JWEAlgorithm.RSA_OAEP_256,\n      EncryptionMethod.A128GCM,\n      jwkSource\n    ));\n    jwtProcessor.setJWSKeySelector(new JWSVerificationKeySelector<>(\n      JWSAlgorithm.RS256,\n      jwkSource\n    ));\n    jwtProcessor.setJWTClaimsSetVerifier((claims, ctx) -> {});\n\n    return new NimbusJwtDecoder(jwtProcessor);\n  }\n\n  @Bean\n  public JwtEncoder jwtEncoder(JWKSource<SecurityContext> jwkSource) {\n    return new NimbusJwtEncoder(jwkSource);\n  }\n\n  @Bean\n  public JwtAuthenticationConverter jwtAuthenticationConverter() {\n    JwtGrantedAuthoritiesConverter converter = new JwtGrantedAuthoritiesConverter();\n    converter.setAuthorityPrefix(\"\");\n    converter.setAuthoritiesClaimName(AUTHORITIES_KEY);\n\n    JwtAuthenticationConverter authConverter = new JwtAuthenticationConverter();\n    authConverter.setJwtGrantedAuthoritiesConverter(converter);\n    return authConverter;\n  }\n\n  @Bean\n  public BearerTokenResolver bearerTokenResolver() {\n    CookieBearerTokenResolver resolver = new CookieBearerTokenResolver();\n    resolver.setAllowUriQueryParameter(false);\n    resolver.setAllowFormEncodedBodyParameter(false);\n    resolver.setAllowCookie(true);\n    return resolver;\n  }\n\n  @Bean\n  public WebSocketGraphQlInterceptor authenticationInterceptor(JwtDecoder jwtDecoder) {\n    return new CookieAuthenticationWebSocketInterceptor(\n      new BearerTokenAuthenticationExtractor(),\n      new ProviderManager(new JwtAuthenticationProvider(jwtDecoder))\n    );\n  }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.config\n\nimport com.nimbusds.jose.EncryptionMethod\nimport com.nimbusds.jose.JWEAlgorithm\nimport com.nimbusds.jose.JWSAlgorithm\nimport com.nimbusds.jose.jwk.JWKSet\nimport com.nimbusds.jose.jwk.RSAKey\nimport com.nimbusds.jose.jwk.source.JWKSource\nimport com.nimbusds.jose.proc.JWEDecryptionKeySelector\nimport com.nimbusds.jose.proc.JWSVerificationKeySelector\nimport com.nimbusds.jose.proc.SecurityContext\nimport com.nimbusds.jwt.proc.DefaultJWTProcessor\nimport io.github.susimsek.springbootgraphqljwedemo.security.CookieAuthenticationWebSocketInterceptor\nimport io.github.susimsek.springbootgraphqljwedemo.security.CookieBearerTokenResolver\nimport io.github.susimsek.springbootgraphqljwedemo.security.KeyUtils\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\nimport org.springframework.graphql.server.WebSocketGraphQlInterceptor\nimport org.springframework.graphql.server.support.BearerTokenAuthenticationExtractor\nimport org.springframework.security.authentication.ProviderManager\nimport org.springframework.security.oauth2.jwt.JwtDecoder\nimport org.springframework.security.oauth2.jwt.JwtEncoder\nimport org.springframework.security.oauth2.jwt.NimbusJwtDecoder\nimport org.springframework.security.oauth2.jwt.NimbusJwtEncoder\nimport org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter\nimport org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter\nimport org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationProvider\nimport org.springframework.security.oauth2.server.resource.web.BearerTokenResolver\n\n@Configuration\nclass SecurityJwtConfig(\n  private val props: JwtProperties\n) {\n\n  @Bean\n  @Throws(Exception::class)\n  fun signingKey(): RSAKey = KeyUtils.buildRsaKey(\n    props.signing.publicKey,\n    props.signing.privateKey,\n    props.signing.keyId,\n    true\n  )\n\n  @Bean\n  @Throws(Exception::class)\n  fun encryptionKey(): RSAKey = KeyUtils.buildRsaKey(\n    props.encryption.publicKey,\n    props.encryption.privateKey,\n    props.encryption.keyId,\n    false\n  )\n\n  @Bean\n  fun jwkSource(\n    signingKey: RSAKey,\n    encryptionKey: RSAKey\n  ): JWKSource<SecurityContext> {\n    val jwkSet = JWKSet(listOf(signingKey, encryptionKey))\n    return JWKSource { jwkSelector, _ -> jwkSelector.select(jwkSet) }\n  }\n\n  @Bean\n  fun jwtDecoder(jwkSource: JWKSource<SecurityContext>): JwtDecoder {\n    val processor = DefaultJWTProcessor<SecurityContext>().apply {\n      setJWEKeySelector(JWEDecryptionKeySelector(\n        JWEAlgorithm.RSA_OAEP_256,\n        EncryptionMethod.A128GCM,\n        jwkSource\n      ))\n      setJWSKeySelector(JWSVerificationKeySelector(\n        JWSAlgorithm.RS256,\n        jwkSource\n      ))\n      setJWTClaimsSetVerifier { _, _ -> }\n    }\n    return NimbusJwtDecoder(processor)\n  }\n\n  @Bean\n  fun jwtEncoder(jwkSource: JWKSource<SecurityContext>): JwtEncoder =\n    NimbusJwtEncoder(jwkSource)\n\n  @Bean\n  fun jwtAuthenticationConverter(): JwtAuthenticationConverter {\n    val granted = JwtGrantedAuthoritiesConverter().apply {\n      authorityPrefix = \"\"\n      authoritiesClaimName = SecurityUtils.AUTHORITIES_KEY\n    }\n    return JwtAuthenticationConverter().apply {\n      setJwtGrantedAuthoritiesConverter(granted)\n    }\n  }\n\n  @Bean\n  fun bearerTokenResolver(): BearerTokenResolver =\n    CookieBearerTokenResolver().apply {\n      setAllowUriQueryParameter(false)\n      setAllowFormEncodedBodyParameter(false)\n      setAllowCookie(true)\n    }\n\n  @Bean\n  fun authenticationInterceptor(jwtDecoder: JwtDecoder): WebSocketGraphQlInterceptor =\n    CookieAuthenticationWebSocketInterceptor(\n      BearerTokenAuthenticationExtractor(),\n      ProviderManager(JwtAuthenticationProvider(jwtDecoder))\n    )\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### SecurityConfig\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.config;\n\nimport io.github.susimsek.springbootgraphqljwedemo.repository.UserRepository;\nimport io.github.susimsek.springbootgraphqljwedemo.security.DomainUserDetailsService;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.ProviderManager;\nimport org.springframework.security.authentication.dao.DaoAuthenticationProvider;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher;\nimport org.springframework.web.servlet.handler.HandlerMappingIntrospector;\n\nimport static org.springframework.security.config.Customizer.withDefaults;\n\n@Configuration\n@EnableMethodSecurity(securedEnabled = true)\npublic class SecurityConfig {\n\n  @Bean\n  public SecurityFilterChain securityFilterChain(HttpSecurity http,\n                                                 MvcRequestMatcher.Builder mvc) throws Exception {\n    http\n      .cors(withDefaults())\n      .csrf(AbstractHttpConfigurer::disable)\n      .authorizeHttpRequests(authz ->\n        authz\n          .requestMatchers(\n            mvc.pattern(\"/webjars/**\"),\n            mvc.pattern(\"/css/**\"),\n            mvc.pattern(\"/js/**\")\n          ).permitAll()\n          .requestMatchers(\n            mvc.pattern(\"/*.ico\"),\n            mvc.pattern(\"/*.png\"),\n            mvc.pattern(\"/*.svg\"),\n            mvc.pattern(\"/*.webapp\")\n          ).permitAll()\n          .requestMatchers(\"/actuator/**\").permitAll()\n          .requestMatchers(\n            \"/v3/api-docs/**\",\n            \"/swagger-ui.html\",\n            \"/swagger-ui/**\"\n          ).permitAll()\n          .requestMatchers(\n            mvc.pattern(\"/graphql\"),\n            mvc.pattern(\"/graphiql\"),\n            mvc.pattern(\"/subscriptions\")\n          ).permitAll()\n          .anyRequest().authenticated()\n      )\n      .sessionManagement(session ->\n        session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\n      .oauth2ResourceServer(oauth2 -> oauth2\n        .jwt(withDefaults())\n      );\n\n    return http.build();\n  }\n\n  @Bean\n  public UserDetailsService userDetailsService(UserRepository userRepository) {\n    return new DomainUserDetailsService(userRepository);\n  }\n\n  @Bean\n  public PasswordEncoder passwordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n\n  @Bean\n  public AuthenticationManager authenticationManager(\n    UserDetailsService userDetailsService,\n    PasswordEncoder passwordEncoder) {\n    DaoAuthenticationProvider provider = new DaoAuthenticationProvider();\n    provider.setUserDetailsService(userDetailsService);\n    provider.setPasswordEncoder(passwordEncoder);\n    return new ProviderManager(provider);\n  }\n\n  @Bean\n  public MvcRequestMatcher.Builder mvc(HandlerMappingIntrospector introspector) {\n    return new MvcRequestMatcher.Builder(introspector);\n  }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.config\n\nimport io.github.susimsek.springbootgraphqljwedemo.repository.UserRepository\nimport io.github.susimsek.springbootgraphqljwedemo.security.DomainUserDetailsService\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\nimport org.springframework.security.authentication.AuthenticationManager\nimport org.springframework.security.authentication.ProviderManager\nimport org.springframework.security.authentication.dao.DaoAuthenticationProvider\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer\nimport org.springframework.security.config.http.SessionCreationPolicy\nimport org.springframework.security.core.userdetails.UserDetailsService\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder\nimport org.springframework.security.crypto.password.PasswordEncoder\nimport org.springframework.security.web.SecurityFilterChain\nimport org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher\nimport org.springframework.web.servlet.handler.HandlerMappingIntrospector\nimport org.springframework.security.config.Customizer.withDefaults\n\n@Configuration\n@EnableMethodSecurity(securedEnabled = true)\nclass SecurityConfig {\n\n  @Bean\n  @Throws(Exception::class)\n  fun securityFilterChain(\n    http: HttpSecurity,\n    mvc: MvcRequestMatcher.Builder\n  ): SecurityFilterChain {\n    http\n      .cors(withDefaults())\n      .csrf { it.disable() }\n      .authorizeHttpRequests { authz ->\n        authz\n          .requestMatchers(\n            mvc.pattern(\"/webjars/**\"),\n            mvc.pattern(\"/css/**\"),\n            mvc.pattern(\"/js/**\")\n          ).permitAll()\n          .requestMatchers(\n            mvc.pattern(\"/*.ico\"),\n            mvc.pattern(\"/*.png\"),\n            mvc.pattern(\"/*.svg\"),\n            mvc.pattern(\"/*.webapp\")\n          ).permitAll()\n          .requestMatchers(\"/actuator/**\").permitAll()\n          .requestMatchers(\n            \"/v3/api-docs/**\",\n            \"/swagger-ui.html\",\n            \"/swagger-ui/**\"\n          ).permitAll()\n          .requestMatchers(\n            mvc.pattern(\"/graphql\"),\n            mvc.pattern(\"/graphiql\"),\n            mvc.pattern(\"/subscriptions\")\n          ).permitAll()\n          .anyRequest().authenticated()\n      }\n      .sessionManagement {\n        it.sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n      }\n      .oauth2ResourceServer {\n        it.jwt(withDefaults())\n      }\n\n    return http.build()\n  }\n\n  @Bean\n  fun userDetailsService(userRepository: UserRepository): UserDetailsService =\n    DomainUserDetailsService(userRepository)\n\n  @Bean\n  fun passwordEncoder(): PasswordEncoder = BCryptPasswordEncoder()\n\n  @Bean\n  fun authenticationManager(\n    userDetailsService: UserDetailsService,\n    passwordEncoder: PasswordEncoder\n  ): AuthenticationManager {\n    val provider = DaoAuthenticationProvider().apply {\n      setUserDetailsService(userDetailsService)\n      setPasswordEncoder(passwordEncoder)\n    }\n    return ProviderManager(provider)\n  }\n\n  @Bean\n  fun mvc(introspector: HandlerMappingIntrospector): MvcRequestMatcher.Builder =\n    MvcRequestMatcher.Builder(introspector)\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### JwtProperties\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.config;\n\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.time.Duration;\n\n@Configuration\n@ConfigurationProperties(prefix = \"security.jwt\")\n@Data\npublic class JwtProperties {\n\n    @Data\n    public static class Pair {\n        private String publicKey;\n        private String privateKey;\n        private String keyId;\n    }\n\n    private Pair signing;\n    private Pair encryption;\n    private String issuer;\n    private Duration expirationDuration;\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.config\n\nimport org.springframework.boot.context.properties.ConfigurationProperties\nimport org.springframework.context.annotation.Configuration\nimport java.time.Duration\n\n@Configuration\n@ConfigurationProperties(prefix = \"security.jwt\")\nclass JwtProperties {\n\n  class Pair {\n    lateinit var publicKey: String\n    lateinit var privateKey: String\n    lateinit var keyId: String\n  }\n\n  lateinit var signing: Pair\n  lateinit var encryption: Pair\n  lateinit var issuer: String\n  lateinit var expirationDuration: Duration\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### DatabaseConfig\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.jpa.repository.config.EnableJpaAuditing;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\n@Configuration\n@EnableJpaRepositories(\"io.github.susimsek.springbootgraphqljwedemo.repository\")\n@EnableJpaAuditing(auditorAwareRef = \"springSecurityAuditorAware\")\n@EnableTransactionManagement\npublic class DatabaseConfig {\n\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.config\n\nimport org.springframework.context.annotation.Configuration\nimport org.springframework.data.jpa.repository.config.EnableJpaAuditing\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories\nimport org.springframework.transaction.annotation.EnableTransactionManagement\n\n@Configuration\n@EnableJpaRepositories(\"io.github.susimsek.springbootgraphqljwedemo.repository\")\n@EnableJpaAuditing(auditorAwareRef = \"springSecurityAuditorAware\")\n@EnableTransactionManagement\nclass DatabaseConfig\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### GraphQLConfig\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.config;\n\nimport graphql.scalars.ExtendedScalars;\nimport io.github.susimsek.springbootgraphqljwedemo.scalar.InstantScalar;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.graphql.execution.RuntimeWiringConfigurer;\n\n@Configuration\npublic class GraphQLConfig {\n\n  @Bean\n  public RuntimeWiringConfigurer runtimeWiringConfigurer() {\n    return wiring -> wiring\n      .scalar(ExtendedScalars.GraphQLLong)\n      .scalar(ExtendedScalars.Date)\n      .scalar(InstantScalar.INSTANCE);\n  }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.config\n\nimport graphql.scalars.ExtendedScalars\nimport io.github.susimsek.springbootgraphqljwedemo.scalar.InstantScalar\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\nimport org.springframework.graphql.execution.RuntimeWiringConfigurer\n\n@Configuration\nclass GraphQLConfig {\n\n  @Bean\n  fun runtimeWiringConfigurer(): RuntimeWiringConfigurer {\n    return RuntimeWiringConfigurer { wiring ->\n      wiring\n        .scalar(ExtendedScalars.GraphQLLong)\n        .scalar(ExtendedScalars.Date)\n        .scalar(InstantScalar.INSTANCE)\n    }\n  }\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### InstantScalar\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.scalar;\n\nimport graphql.GraphQLContext;\nimport graphql.execution.CoercedVariables;\nimport graphql.language.StringValue;\nimport graphql.language.Value;\nimport graphql.scalars.util.Kit;\nimport graphql.schema.Coercing;\nimport graphql.schema.CoercingParseLiteralException;\nimport graphql.schema.CoercingParseValueException;\nimport graphql.schema.CoercingSerializeException;\nimport graphql.schema.GraphQLScalarType;\nimport lombok.AccessLevel;\nimport lombok.NoArgsConstructor;\nimport org.springframework.lang.NonNull;\n\nimport java.time.Instant;\nimport java.time.format.DateTimeParseException;\nimport java.util.Locale;\n\n@NoArgsConstructor(access = AccessLevel.PRIVATE)\npublic final class InstantScalar {\n\n  public static final GraphQLScalarType INSTANCE;\n\n  static {\n    Coercing<Instant, String> coercing = new Coercing<>() {\n      @Override\n      public String serialize(\n        @NonNull Object input,\n        @NonNull GraphQLContext context,\n        @NonNull Locale locale\n      ) throws CoercingSerializeException {\n        if (input instanceof Instant instant) {\n          return instant.toString();\n        }\n        throw new CoercingSerializeException(\n          \"Expected java.time.Instant but was: \" + Kit.typeName(input) + \"'.\"\n        );\n      }\n\n      @Override\n      public Instant parseValue(\n        @NonNull Object input,\n        @NonNull GraphQLContext context,\n        @NonNull Locale locale\n      ) throws CoercingParseValueException {\n        if (input instanceof String s) {\n          try {\n            return Instant.parse(s);\n          } catch (DateTimeParseException e) {\n            throw new CoercingParseValueException(\"Invalid Instant value: \" + e.getMessage() + \"'.\");\n          }\n        }\n        throw new CoercingParseValueException(\n          \"Expected a String for Instant but was: \" + Kit.typeName(input) + \"'.\"\n        );\n      }\n\n      @Override\n      public Instant parseLiteral(\n        @NonNull Value<?> input,\n        @NonNull CoercedVariables variables,\n        @NonNull GraphQLContext context,\n        @NonNull Locale locale\n      ) throws CoercingParseLiteralException {\n        if (input instanceof StringValue sv) {\n          String s = sv.getValue();\n          try {\n            return Instant.parse(s);\n          } catch (DateTimeParseException e) {\n            throw new CoercingParseLiteralException(\"Invalid Instant literal: \" + e.getMessage() + \"'\");\n          }\n        }\n        throw new CoercingParseLiteralException(\n          \"Expected AST type 'StringValue' but was: \" + Kit.typeName(input) + \"'.\"\n        );\n      }\n\n      @Override\n      @NonNull\n      public Value<?> valueToLiteral(\n        @NonNull Object input,\n        @NonNull GraphQLContext context,\n        @NonNull Locale locale\n      ) {\n        String serialized = serialize(input, context, locale);\n        return StringValue.newStringValue(serialized).build();\n      }\n    };\n\n    INSTANCE = GraphQLScalarType.newScalar()\n      .name(\"Instant\")\n      .description(\"An ISO-8601 compliant java.time.Instant scalar\")\n      .specifiedByUrl(\"https://www.rfc-editor.org/rfc/rfc3339.html#section-5.6\")\n      .coercing(coercing)\n      .build();\n  }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.scalar\n\nimport graphql.GraphQLContext\nimport graphql.execution.CoercedVariables\nimport graphql.language.StringValue\nimport graphql.language.Value\nimport graphql.scalars.util.Kit\nimport graphql.schema.Coercing\nimport graphql.schema.CoercingParseLiteralException\nimport graphql.schema.CoercingParseValueException\nimport graphql.schema.CoercingSerializeException\nimport graphql.schema.GraphQLScalarType\nimport java.time.Instant\nimport java.time.format.DateTimeParseException\nimport java.util.Locale\n\nobject InstantScalar {\n\n  @JvmField\n  val INSTANCE: GraphQLScalarType = GraphQLScalarType.newScalar()\n    .name(\"Instant\")\n    .description(\"An ISO-8601 compliant java.time.Instant scalar\")\n    .specifiedByUrl(\"https://www.rfc-editor.org/rfc/rfc3339.html#section-5.6\")\n    .coercing(object : Coercing<Instant, String> {\n      override fun serialize(\n        input: Any,\n        context: GraphQLContext,\n        locale: Locale\n      ): String {\n        return if (input is Instant) {\n          input.toString()\n        } else {\n          throw CoercingSerializeException(\"Expected java.time.Instant but was: ${Kit.typeName(input)}'.\")\n        }\n      }\n\n      override fun parseValue(\n        input: Any,\n        context: GraphQLContext,\n        locale: Locale\n      ): Instant {\n        if (input is String) {\n          return try {\n            Instant.parse(input)\n          } catch (e: DateTimeParseException) {\n            throw CoercingParseValueException(\"Invalid Instant value: ${e.message}'.\")\n          }\n        }\n        throw CoercingParseValueException(\"Expected a String for Instant but was: ${Kit.typeName(input)}'.\")\n      }\n\n      override fun parseLiteral(\n        input: Value<*>,\n        variables: CoercedVariables,\n        context: GraphQLContext,\n        locale: Locale\n      ): Instant {\n        if (input is StringValue) {\n          return try {\n            Instant.parse(input.value)\n          } catch (e: DateTimeParseException) {\n            throw CoercingParseLiteralException(\"Invalid Instant literal: ${e.message}'\")\n          }\n        }\n        throw CoercingParseLiteralException(\"Expected AST type 'StringValue' but was: ${Kit.typeName(input)}'.\")\n      }\n\n      override fun valueToLiteral(\n        input: Any,\n        context: GraphQLContext,\n        locale: Locale\n      ): Value<*> {\n        val serialized = serialize(input, context, locale)\n        return StringValue.newStringValue(serialized).build()\n      }\n    })\n    .build()\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### NativeConfig\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.config;\n\nimport org.springframework.aot.hint.MemberCategory;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\n\npublic class NativeConfig {\n\n  public static class AppNativeRuntimeHints implements RuntimeHintsRegistrar {\n\n    @Override\n    public void registerHints(RuntimeHints hints, ClassLoader classLoader) {\n      hints.reflection()\n        .registerType(sun.misc.Unsafe.class,\n          hint -> hint.withMembers(MemberCategory.INVOKE_PUBLIC_METHODS));\n      hints.reflection()\n        .registerType(java.util.Locale.class,\n          hint -> hint.withMembers(MemberCategory.INVOKE_PUBLIC_METHODS));\n      hints.reflection()\n        .registerType(org.hibernate.binder.internal.BatchSizeBinder.class,\n          hint -> hint.withMembers(MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS));\n      hints.resources().registerPattern(\"liquibase/*\");\n      hints.reflection()\n        .registerType(liquibase.ui.LoggerUIService.class,\n          hint -> hint.withMembers(MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS));\n      hints.reflection()\n        .registerType(liquibase.database.LiquibaseTableNamesFactory.class,\n          hint -> hint.withMembers(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS));\n      hints.reflection()\n        .registerType(liquibase.report.ShowSummaryGeneratorFactory.class,\n          hint -> hint.withMembers(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS));\n      hints.reflection()\n        .registerType(liquibase.changelog.FastCheckService.class,\n          hint -> hint.withMembers(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS));\n      hints.reflection()\n        .registerType(liquibase.changelog.visitor.ValidatingVisitorGeneratorFactory.class,\n          hint -> hint.withMembers(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS));\n    }\n  }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.config\n\nimport org.springframework.aot.hint.MemberCategory\nimport org.springframework.aot.hint.RuntimeHints\nimport org.springframework.aot.hint.RuntimeHintsRegistrar\n\nclass NativeConfig {\n\n  class AppNativeRuntimeHints : RuntimeHintsRegistrar {\n    override fun registerHints(hints: RuntimeHints, classLoader: ClassLoader) {\n      hints.reflection().registerType(\n        sun.misc.Unsafe::class.java,\n        hint = hint@{ it.withMembers(MemberCategory.INVOKE_PUBLIC_METHODS) }\n      )\n      hints.reflection().registerType(\n        java.util.Locale::class.java,\n        hint = hint@{ it.withMembers(MemberCategory.INVOKE_PUBLIC_METHODS) }\n      )\n      hints.reflection().registerType(\n        org.hibernate.binder.internal.BatchSizeBinder::class.java,\n        hint = hint@{ it.withMembers(MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS) }\n      )\n      hints.resources().registerPattern(\"liquibase/*\")\n      hints.reflection().registerType(\n        liquibase.ui.LoggerUIService::class.java,\n        hint = hint@{ it.withMembers(MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS) }\n      )\n      hints.reflection().registerType(\n        liquibase.database.LiquibaseTableNamesFactory::class.java,\n        hint = hint@{ it.withMembers(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS) }\n      )\n      hints.reflection().registerType(\n        liquibase.report.ShowSummaryGeneratorFactory::class.java,\n        hint = hint@{ it.withMembers(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS) }\n      )\n      hints.reflection().registerType(\n        liquibase.changelog.FastCheckService::class.java,\n        hint = hint@{ it.withMembers(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS) }\n      )\n      hints.reflection().registerType(\n        liquibase.changelog.visitor.ValidatingVisitorGeneratorFactory::class.java,\n        hint = hint@{ it.withMembers(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS) }\n      )\n    }\n  }\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### Main\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo;\n\nimport io.github.susimsek.springbootgraphqljwedemo.config.NativeConfig;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.ImportRuntimeHints;\n\n@SpringBootApplication\n@ImportRuntimeHints({ NativeConfig.AppNativeRuntimeHints.class })\npublic class SpringBootJweAuthJpaDemoApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(SpringBootJweAuthJpaDemoApplication.class, args);\n  }\n\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo\n\nimport io.github.susimsek.springbootgraphqljwedemo.config.NativeConfig\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.runApplication\nimport org.springframework.context.annotation.ImportRuntimeHints\n\n@SpringBootApplication\n@ImportRuntimeHints(NativeConfig.AppNativeRuntimeHints::class)\nclass SpringBootJweAuthJpaDemoApplication\n\nfun main(args: Array<String>) {\n  runApplication<SpringBootJweAuthJpaDemoApplication>(*args)\n}\n```\n\n:::\n\n---\n\n## 🗄️ Adım 4: JPA Entegrasyonu\n\nBu bölümde, kullanıcıları, rollerleri ve bunların eşlemelerini temsil eden JPA entity’lerini ve kullanıcıları yetkileriyle birlikte yüklemek için Spring Data JPA deposunu tanımlıyoruz.\n\n- **BaseEntity**: Audit alanları (`createdAt`, `createdBy`, `updatedAt`, `updatedBy`) sağlayan soyut üst sınıf.\n- **Authority**: Rol verilerini saklayan `authority` tablosu entity’si.\n- **User**: Kullanıcı kimlik bilgileri ve profili saklayan `user_identity` tablosu entity’si.\n- **UserAuthorityMapping**: Kullanıcıları ve rolleri birbirine bağlayan `user_authority_mapping` ilişki tablosunun entity’si.\n- **UserAuthorityMappingId**: `UserAuthorityMapping` için composite anahtar sınıfı.\n- **UserRepository**: Entity graph kullanarak kullanıcı ve yetkilerini getiren Spring Data JPA repository.\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### BaseEntity\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.entity;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.EntityListeners;\nimport jakarta.persistence.MappedSuperclass;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.annotation.CreatedBy;\nimport org.springframework.data.annotation.CreatedDate;\nimport org.springframework.data.annotation.LastModifiedBy;\nimport org.springframework.data.annotation.LastModifiedDate;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport java.time.Instant;\n\n@MappedSuperclass\n@EntityListeners(AuditingEntityListener.class)\n@Getter\n@Setter\npublic abstract class BaseEntity {\n\n  @CreatedDate\n  @Column(name = \"created_at\", nullable = false, updatable = false)\n  private Instant createdAt;\n\n  @CreatedBy\n  @Column(name = \"created_by\", nullable = false, updatable = false, length = 50)\n  private String createdBy;\n\n  @LastModifiedDate\n  @Column(name = \"updated_at\")\n  private Instant updatedAt;\n\n  @LastModifiedBy\n  @Column(name = \"updated_by\", length = 50)\n  private String updatedBy;\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.entity\n\nimport jakarta.persistence.Column\nimport jakarta.persistence.EntityListeners\nimport jakarta.persistence.MappedSuperclass\nimport org.springframework.data.annotation.CreatedBy\nimport org.springframework.data.annotation.CreatedDate\nimport org.springframework.data.annotation.LastModifiedBy\nimport org.springframework.data.annotation.LastModifiedDate\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener\nimport java.time.Instant\n\n@MappedSuperclass\n@EntityListeners(AuditingEntityListener::class)\nabstract class BaseEntity {\n\n  @CreatedDate\n  @Column(name = \"created_at\", nullable = false, updatable = false)\n  lateinit var createdAt: Instant\n\n  @CreatedBy\n  @Column(name = \"created_by\", nullable = false, updatable = false, length = 50)\n  lateinit var createdBy: String\n\n  @LastModifiedDate\n  @Column(name = \"updated_at\")\n  var updatedAt: Instant? = null\n\n  @LastModifiedBy\n  @Column(name = \"updated_by\", length = 50)\n  var updatedBy: String? = null\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### Authority\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.entity;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\nimport org.hibernate.proxy.HibernateProxy;\n\nimport java.util.Objects;\n\n@Entity\n@Table(name = \"authority\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Authority extends BaseEntity {\n\n  @Id\n  @Column(length = 36, nullable = false)\n  private String id;\n\n  @Column(length = 50, nullable = false, unique = true)\n  private String name;\n\n  @Column(length = 255)\n  private String description;\n\n  @Override\n  public final boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if (!(obj instanceof Authority other)) {\n      return false;\n    }\n    Class<?> objClass = obj instanceof HibernateProxy proxy\n      ? proxy.getHibernateLazyInitializer().getPersistentClass()\n      : obj.getClass();\n    Class<?> thisClass = this instanceof HibernateProxy proxy\n      ? proxy.getHibernateLazyInitializer().getPersistentClass()\n      : this.getClass();\n    if (!thisClass.equals(objClass)) {\n      return false;\n    }\n    return id != null && Objects.equals(id, other.id);\n  }\n\n  @Override\n  public final int hashCode() {\n    return this instanceof HibernateProxy proxy\n      ? proxy.getHibernateLazyInitializer().getPersistentClass().hashCode()\n      : getClass().hashCode();\n  }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.entity\n\nimport jakarta.persistence.Column\nimport jakarta.persistence.Entity\nimport jakarta.persistence.Id\nimport jakarta.persistence.Table\nimport org.hibernate.proxy.HibernateProxy\nimport java.util.Objects\n\n@Entity\n@Table(name = \"authority\")\nclass Authority(\n  @Id\n  @Column(length = 36, nullable = false)\n  var id: String,\n\n  @Column(length = 50, nullable = false, unique = true)\n  var name: String,\n\n  @Column(length = 255)\n  var description: String?\n) : BaseEntity() {\n\n  override fun equals(other: Any?): Boolean {\n    if (this === other) return true\n    if (other !is Authority) return false\n    val objClass = (other as? HibernateProxy)?.hibernateLazyInitializer?.persistentClass ?: other::class.java\n    val thisClass = (this as? HibernateProxy)?.hibernateLazyInitializer?.persistentClass ?: this::class.java\n    if (thisClass != objClass) return false\n    return id == other.id\n  }\n\n  override fun hashCode(): Int {\n    return (this as? HibernateProxy)?.hibernateLazyInitializer?.persistentClass?.hashCode()\n      ?: javaClass.hashCode()\n  }\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### User\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.entity;\n\nimport jakarta.persistence.CascadeType;\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.NamedAttributeNode;\nimport jakarta.persistence.NamedEntityGraph;\nimport jakarta.persistence.NamedSubgraph;\nimport jakarta.persistence.OneToMany;\nimport jakarta.persistence.Table;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\nimport org.hibernate.proxy.HibernateProxy;\n\nimport java.util.HashSet;\nimport java.util.Objects;\nimport java.util.Set;\n\n@Entity\n@Table(name = \"user_identity\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@NamedEntityGraph(\n  name = \"User.withAuthorities\",\n  attributeNodes = @NamedAttributeNode(value = \"authorities\", subgraph = \"auth-subgraph\"),\n  subgraphs = @NamedSubgraph(\n    name = \"auth-subgraph\",\n    attributeNodes = @NamedAttributeNode(\"authority\")\n  )\n)\npublic class User extends BaseEntity {\n\n  @Id\n  @Column(name = \"id\", length = 36, nullable = false, updatable = false)\n  private String id;\n\n  @Column(name = \"username\", length = 50, nullable = false, unique = true)\n  private String username;\n\n  @Column(name = \"password\", length = 100, nullable = false)\n  private String password;\n\n  @Column(name = \"email\", length = 100, nullable = false, unique = true)\n  private String email;\n\n  @Column(name = \"first_name\", length = 50)\n  private String firstName;\n\n  @Column(name = \"last_name\", length = 50)\n  private String lastName;\n\n  @Column(name = \"enabled\", nullable = false)\n  private boolean enabled;\n\n  @OneToMany(mappedBy = \"user\", fetch = FetchType.LAZY,\n    cascade = CascadeType.ALL, orphanRemoval = true)\n  private Set<UserAuthorityMapping> authorities = new HashSet<>();\n\n  @Override\n  public final boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (!(obj instanceof User other)) return false;\n    Class<?> objClass = (obj instanceof HibernateProxy hp\n      ? hp.getHibernateLazyInitializer().getPersistentClass()\n      : obj.getClass());\n    Class<?> thisClass = (this instanceof HibernateProxy hp\n      ? hp.getHibernateLazyInitializer().getPersistentClass()\n      : this.getClass());\n    if (!thisClass.equals(objClass)) return false;\n    return id != null && id.equals(other.id);\n  }\n\n  @Override\n  public final int hashCode() {\n    return (this instanceof HibernateProxy hp\n      ? hp.getHibernateLazyInitializer().getPersistentClass().hashCode()\n      : getClass().hashCode());\n  }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.entity\n\nimport jakarta.persistence.CascadeType\nimport jakarta.persistence.Column\nimport jakarta.persistence.Entity\nimport jakarta.persistence.FetchType\nimport jakarta.persistence.Id\nimport jakarta.persistence.NamedAttributeNode\nimport jakarta.persistence.NamedEntityGraph\nimport jakarta.persistence.NamedSubgraph\nimport jakarta.persistence.OneToMany\nimport jakarta.persistence.Table\nimport org.hibernate.proxy.HibernateProxy\nimport java.util.*\n\n@Entity\n@Table(name = \"user_identity\")\n@NamedEntityGraph(\n  name = \"User.withAuthorities\",\n  attributeNodes = [NamedAttributeNode(value = \"authorities\", subgraph = \"auth-subgraph\")],\n  subgraphs = [\n    NamedSubgraph(\n      name = \"auth-subgraph\",\n      attributeNodes = [NamedAttributeNode(\"authority\")]\n    )\n  ]\n)\nclass User(\n\n  @Id\n  @Column(name = \"id\", length = 36, nullable = false, updatable = false)\n  var id: String,\n\n  @Column(name = \"username\", length = 50, nullable = false, unique = true)\n  var username: String,\n\n  @Column(name = \"password\", length = 100, nullable = false)\n  var password: String,\n\n  @Column(name = \"email\", length = 100, nullable = false, unique = true)\n  var email: String,\n\n  @Column(name = \"first_name\", length = 50)\n  var firstName: String? = null,\n\n  @Column(name = \"last_name\", length = 50)\n  var lastName: String? = null,\n\n  @Column(name = \"enabled\", nullable = false)\n  var enabled: Boolean = true\n\n) : BaseEntity() {\n\n  @OneToMany(\n    mappedBy = \"user\",\n    fetch = FetchType.LAZY,\n    cascade = [CascadeType.ALL],\n    orphanRemoval = true\n  )\n  var authorities: MutableSet<UserAuthorityMapping> = HashSet()\n\n  override fun equals(other: Any?): Boolean {\n    if (this === other) return true\n    if (other !is User) return false\n    val objClass = (other as? HibernateProxy)?.hibernateLazyInitializer?.persistentClass\n      ?: other::class.java\n    val thisClass = (this as? HibernateProxy)?.hibernateLazyInitializer?.persistentClass\n      ?: this::class.java\n    if (thisClass != objClass) return false\n    return id == other.id\n  }\n\n  override fun hashCode(): Int =\n    ((this as? HibernateProxy)?.hibernateLazyInitializer?.persistentClass?.hashCode()\n      ?: javaClass.hashCode())\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### UserAuthorityMapping\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.entity;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.FetchType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.IdClass;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport jakarta.persistence.Table;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\nimport org.hibernate.proxy.HibernateProxy;\n\nimport java.util.Objects;\n\n@Entity\n@Table(name = \"user_authority_mapping\")\n@IdClass(UserAuthorityMappingId.class)\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class UserAuthorityMapping extends BaseEntity {\n\n  @Id\n  @Column(name = \"user_id\", length = 36, nullable = false)\n  private String userId;\n\n  @Id\n  @Column(name = \"authority_id\", length = 36, nullable = false)\n  private String authorityId;\n\n  @ManyToOne(fetch = FetchType.LAZY)\n  @JoinColumn(name = \"user_id\", insertable = false, updatable = false)\n  private User user;\n\n  @ManyToOne(fetch = FetchType.LAZY)\n  @JoinColumn(name = \"authority_id\", insertable = false, updatable = false)\n  private Authority authority;\n\n  @Override\n  public final boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (!(obj instanceof UserAuthorityMapping other)) return false;\n    Class<?> objCls = (obj instanceof HibernateProxy hp\n      ? hp.getHibernateLazyInitializer().getPersistentClass()\n      : obj.getClass());\n    Class<?> thisCls = (this instanceof HibernateProxy hp\n      ? hp.getHibernateLazyInitializer().getPersistentClass()\n      : this.getClass());\n    if (!thisCls.equals(objCls)) return false;\n    return userId != null && userId.equals(other.userId)\n      && authorityId != null && authorityId.equals(other.authorityId);\n  }\n\n  @Override\n  public final int hashCode() {\n    return (this instanceof HibernateProxy hp\n      ? hp.getHibernateLazyInitializer().getPersistentClass().hashCode()\n      : Objects.hash(userId, authorityId));\n  }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.entity\n\nimport jakarta.persistence.*\nimport org.hibernate.proxy.HibernateProxy\nimport java.util.*\n\n@Entity\n@Table(name = \"user_authority_mapping\")\n@IdClass(UserAuthorityMappingId::class)\ndata class UserAuthorityMapping(\n\n  @Id\n  @Column(name = \"user_id\", length = 36, nullable = false)\n  var userId: String = \"\",\n\n  @Id\n  @Column(name = \"authority_id\", length = 36, nullable = false)\n  var authorityId: String = \"\",\n\n  @ManyToOne(fetch = FetchType.LAZY)\n  @JoinColumn(name = \"user_id\", insertable = false, updatable = false)\n  var user: User? = null,\n\n  @ManyToOne(fetch = FetchType.LAZY)\n  @JoinColumn(name = \"authority_id\", insertable = false, updatable = false)\n  var authority: Authority? = null\n\n) : BaseEntity() {\n\n  override fun equals(other: Any?): Boolean {\n    if (this === other) return true\n    if (other !is UserAuthorityMapping) return false\n\n    val objCls = (other as? HibernateProxy)?.hibernateLazyInitializer?.persistentClass\n      ?: other::class.java\n    val thisCls = (this as? HibernateProxy)?.hibernateLazyInitializer?.persistentClass\n      ?: this::class.java\n\n    if (thisCls != objCls) return false\n    return userId == other.userId && authorityId == other.authorityId\n  }\n\n  override fun hashCode(): Int {\n    return (this as? HibernateProxy)?.hibernateLazyInitializer?.persistentClass?.hashCode()\n      ?: Objects.hash(userId, authorityId)\n  }\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### UserAuthorityMappingId\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.entity;\n\nimport java.io.Serializable;\nimport java.util.Objects;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class UserAuthorityMappingId implements Serializable {\n\n  private String userId;\n  private String authorityId;\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    UserAuthorityMappingId that = (UserAuthorityMappingId) o;\n    return Objects.equals(userId, that.userId) &&\n      Objects.equals(authorityId, that.authorityId);\n  }\n\n  @Override\n  public int hashCode() {\n    return Objects.hash(userId, authorityId);\n  }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.entity\n\nimport java.io.Serializable\nimport java.util.Objects\n\ndata class UserAuthorityMappingId(\n  var userId: String = \"\",\n  var authorityId: String = \"\"\n) : Serializable {\n\n  override fun equals(other: Any?): Boolean {\n    if (this === other) return true\n    if (other == null || this::class != other::class) return false\n    other as UserAuthorityMappingId\n    return userId == other.userId && authorityId == other.authorityId\n  }\n\n  override fun hashCode(): Int {\n    return Objects.hash(userId, authorityId)\n  }\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### UserRepository\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.repository;\n\nimport io.github.susimsek.springbootgraphqljwedemo.entity.User;\nimport org.springframework.data.jpa.repository.EntityGraph;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.Optional;\n\n@Repository\npublic interface UserRepository extends JpaRepository<User, String> {\n\n  @EntityGraph(\"User.withAuthorities\")\n  Optional<User> findOneWithAuthoritiesByUsername(String username);\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.repository\n\nimport io.github.susimsek.springbootgraphqljwedemo.entity.User\nimport org.springframework.data.jpa.repository.EntityGraph\nimport org.springframework.data.jpa.repository.JpaRepository\nimport org.springframework.stereotype.Repository\nimport java.util.Optional\n\n@Repository\ninterface UserRepository : JpaRepository<User, String> {\n\n  @EntityGraph(\"User.withAuthorities\")\n  fun findOneWithAuthoritiesByUsername(username: String): Optional<User>\n}\n```\n\n:::\n\n---\n\n## 🔐 Adım 5: Güvenli JWE Token Yardımcı Sınıfları Oluşturun\n\nBu bölümde, Spring Boot uygulamanızda JSON Web Encryption (JWE) tokenları oluşturmak, şifrelemek ve çözmek için gerekli temel yardımcı sınıfları ve sabitleri tanımlıyoruz. Ayrıca auditing entegrasyonu ve JPA tabanlı UserDetailsService de ekliyoruz:\n\n- **AuthoritiesConstants**: `ROLE_` ön ekiyle rol isimlerini merkezileştirir.\n- **CookieBearerTokenResolver**: Bearer token’ları yetkilendirme başlıklarından veya HTTP çerezlerinden çözer.\n- **CookieUtils**: Yeni veya süresi dolmuş token’ler için HTTP-only, secure `ResponseCookie` oluşturur ve `HttpHeaders` içinden `accessToken` değerini çıkartır.\n- **JweUtil**: Nimbus kütüphanesi ile RSA anahtarları kullanarak JWT’leri imzalar (JWS) ve şifreler (JWE).\n- **KeyUtils**: PEM formatındaki anahtar çiftinden RSA JWK’leri oluşturur.\n- **SecurityUtils**: SecurityContext oturum açan kullanıcının bilgisini sunar.\n- **SpringSecurityAuditorAware**: Auditing için oturum açan kullanıcıyı sağlayan `AuditorAware` implementasyonu.\n- **DomainUserDetailsService**: JPA tabanlı `UserDetailsService`, kullanıcı kimlik bilgilerini ve yetkilerini getirir.\n- **GraphQlTokenCookieInterceptor**: GraphQL yanıtlarını yakalar ve `GraphQLContext` içindeki `accessToken` veya `clearAccessToken` flaglerine göre erişim çerezini oluşturur veya siler.\n- **CookieAuthenticationWebSocketInterceptor**: Headerdan veya çerezlerden alınan JWE token’larla WebSocket bağlantılarını doğrular.\n\nBu yardımcılar, Spring Security ile durumsuz (stateless) JWE tabanlı bir kimlik doğrulama akışının temelini oluşturur.\n\n### AuthoritiesConstants\n\n:::tabs\n@tab Java [icon=java]\n\n```java\n\npackage io.github.susimsek.springbootgraphqljwedemo.security;\n\nimport lombok.AccessLevel;\nimport lombok.NoArgsConstructor;\n\n@NoArgsConstructor(access = AccessLevel.PRIVATE)\npublic final class AuthoritiesConstants {\n    public static final String ADMIN = \"ROLE_ADMIN\";\n    public static final String USER = \"ROLE_USER\";\n    public static final String ANONYMOUS = \"ROLE_ANONYMOUS\";\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\n\npackage io.github.susimsek.springbootgraphqljwedemo.security\n\nobject AuthoritiesConstants {\n  const val ADMIN = \"ROLE_ADMIN\"\n  const val USER = \"ROLE_USER\"\n  const val ANONYMOUS = \"ROLE_ANONYMOUS\"\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### CookieBearerTokenResolver\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.security;\n\nimport jakarta.servlet.http.Cookie;\nimport jakarta.servlet.http.HttpServletRequest;\nimport lombok.Setter;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.oauth2.core.OAuth2AuthenticationException;\nimport org.springframework.security.oauth2.server.resource.BearerTokenError;\nimport org.springframework.security.oauth2.server.resource.BearerTokenErrors;\nimport org.springframework.security.oauth2.server.resource.web.BearerTokenResolver;\nimport org.springframework.util.StringUtils;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n@Setter\npublic class CookieBearerTokenResolver implements BearerTokenResolver {\n    private static final String ACCESS_TOKEN_PARAMETER_NAME = \"access_token\";\n    private static final Pattern AUTHORIZATION_PATTERN =\n        Pattern.compile(\"^Bearer (?<token>[A-Za-z0-9-._~+/]+=*)$\", Pattern.CASE_INSENSITIVE);\n\n    private boolean allowFormEncodedBodyParameter = false;\n    private boolean allowUriQueryParameter       = false;\n    private boolean allowCookie                  = true;\n    private String  bearerTokenHeaderName       = \"Authorization\";\n    private String  cookieName                  = \"accessToken\";\n\n    @Override\n    public String resolve(HttpServletRequest request) {\n        String headerToken = resolveFromAuthorizationHeader(request);\n        String queryToken  = resolveAccessTokenFromQueryString(request);\n        String bodyToken   = resolveAccessTokenFromBody(request);\n        String cookieToken = (headerToken == null && queryToken == null && bodyToken == null)\n            ? resolveFromCookie(request)\n            : null;\n\n        return resolveToken(headerToken, queryToken, bodyToken, cookieToken);\n    }\n\n    private String resolveFromAuthorizationHeader(HttpServletRequest request) {\n        String authorization = request.getHeader(this.bearerTokenHeaderName);\n        if (!StringUtils.hasText(authorization) || !authorization.toLowerCase().startsWith(\"bearer\")) {\n            return null;\n        }\n        Matcher matcher = AUTHORIZATION_PATTERN.matcher(authorization.trim());\n        if (!matcher.matches()) {\n            BearerTokenError error = BearerTokenErrors.invalidToken(\"Bearer token is malformed\");\n            throw new OAuth2AuthenticationException(error);\n        }\n        return matcher.group(\"token\");\n    }\n\n    private String resolveAccessTokenFromQueryString(HttpServletRequest request) {\n        if (allowUriQueryParameter && HttpMethod.GET.matches(request.getMethod())) {\n            return resolveToken(request.getParameterValues(ACCESS_TOKEN_PARAMETER_NAME));\n        }\n        return null;\n    }\n\n    private String resolveAccessTokenFromBody(HttpServletRequest request) {\n        if (allowFormEncodedBodyParameter\n            && HttpMethod.POST.matches(request.getMethod())\n            && \"application/x-www-form-urlencoded\".equals(request.getContentType())) {\n            return resolveToken(request.getParameterValues(ACCESS_TOKEN_PARAMETER_NAME));\n        }\n        return null;\n    }\n\n    private String resolveFromCookie(HttpServletRequest request) {\n        if (!allowCookie || request.getCookies() == null) {\n            return null;\n        }\n        for (Cookie cookie : request.getCookies()) {\n            if (cookieName.equals(cookie.getName())) {\n                String val = cookie.getValue();\n                return StringUtils.hasText(val) ? val : null;\n            }\n        }\n        return null;\n    }\n\n    private String resolveToken(String... tokens) {\n        String found = null;\n        for (String token : tokens) {\n            if (token == null) continue;\n            if (found != null) {\n                BearerTokenError error = BearerTokenErrors.invalidRequest(\"Found multiple bearer tokens in the request\");\n                throw new OAuth2AuthenticationException(error);\n            }\n            found = token;\n        }\n        if (found != null && found.isBlank()) {\n            BearerTokenError error = BearerTokenErrors.invalidRequest(\"The requested token parameter is an empty string\");\n            throw new OAuth2AuthenticationException(error);\n        }\n        return found;\n    }\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.security\n\nimport jakarta.servlet.http.Cookie\nimport jakarta.servlet.http.HttpServletRequest\nimport org.springframework.http.HttpMethod\nimport org.springframework.security.oauth2.core.OAuth2AuthenticationException\nimport org.springframework.security.oauth2.server.resource.BearerTokenError\nimport org.springframework.security.oauth2.server.resource.BearerTokenErrors\nimport org.springframework.security.oauth2.server.resource.web.BearerTokenResolver\nimport org.springframework.util.StringUtils\nimport java.util.regex.Pattern\n\nclass CookieBearerTokenResolver {\n    var allowFormEncodedBodyParameter: Boolean = false\n    var allowUriQueryParameter: Boolean = false\n    var allowCookie: Boolean = true\n    var bearerTokenHeaderName: String = \"Authorization\"\n    var cookieName: String = \"accessToken\"\n\n    companion object {\n        private const val ACCESS_TOKEN_PARAMETER_NAME = \"access_token\"\n        private val AUTHORIZATION_PATTERN =\n            Pattern.compile(\"^Bearer (?<token>[A-Za-z0-9-._~+/]+=*)$\", Pattern.CASE_INSENSITIVE)\n    }\n\n    fun resolve(request: HttpServletRequest): String? {\n        val header = resolveFromAuthorizationHeader(request)\n        val query  = if (allowUriQueryParameter && HttpMethod.GET.matches(request.method))\n            request.getParameterValues(ACCESS_TOKEN_PARAMETER_NAME)?.let(::resolveToken)\n        else null\n        val body   = if (allowFormEncodedBodyParameter && HttpMethod.POST.matches(request.method)\n            && request.contentType == \"application/x-www-form-urlencoded\")\n            request.getParameterValues(ACCESS_TOKEN_PARAMETER_NAME)?.let(::resolveToken)\n        else null\n        val cookie = if (header == null && query == null && body == null)\n            resolveFromCookie(request)\n        else null\n      return listOf(header, query, body, cookie).filterNotNull().let {\n            if (it.size > 1) throw OAuth2AuthenticationException(BearerTokenErrors.invalidRequest(\"Found multiple bearer tokens\"))\n            it.firstOrNull()?: null\n        }\n    }\n\n    private fun resolveFromAuthorizationHeader(request: HttpServletRequest): String? {\n        val auth = request.getHeader(bearerTokenHeaderName) ?: return null\n        if (!auth.startsWith(\"Bearer \", true)) return null\n        val matcher = AUTHORIZATION_PATTERN.matcher(auth.trim())\n        return if (matcher.matches()) matcher.group(\"token\")\n        else throw OAuth2AuthenticationException(BearerTokenErrors.invalidToken(\"Malformed token\"))\n    }\n\n    private fun resolveFromCookie(request: HttpServletRequest): String? {\n        if (!allowCookie) return null\n        return request.cookies?.firstOrNull { it.name == cookieName }?.value?.takeIf { it.isNotBlank() }\n    }\n\n    private fun resolveToken(tokens: Array<String>): String? {\n        return tokens.filter { it.isNotBlank() }.let {\n            when {\n                it.isEmpty() -> null\n                it.size > 1   -> throw OAuth2AuthenticationException(BearerTokenErrors.invalidRequest(\"Multiple tokens\"))\n                else          -> it[0]\n            }\n        }\n    }\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### CookieUtils\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootjweauthjpademo.security;\n\nimport io.github.susimsek.springbootjweauthjpademo.dto.TokenDTO;\nimport lombok.experimental.UtilityClass;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.ResponseCookie;\n\nimport java.net.HttpCookie;\nimport java.util.Arrays;\nimport java.util.Optional;\n\n@UtilityClass\npublic class CookieUtils {\n\n  public static final String COOKIE_NAME = \"accessToken\";\n\n  public ResponseCookie createAccessTokenCookie(TokenDTO tokenDto) {\n    return ResponseCookie.from(COOKIE_NAME, tokenDto.accessToken())\n      .httpOnly(true)\n      .secure(true)\n      .path(\"/\")\n      .maxAge(tokenDto.accessTokenExpiresIn())\n      .sameSite(\"Strict\")\n      .build();\n  }\n\n  public static ResponseCookie removeAccessTokenCookie() {\n    return ResponseCookie.from(COOKIE_NAME, \"\")\n      .httpOnly(true)\n      .secure(true)\n      .path(\"/\")\n      .maxAge(0)\n      .sameSite(\"Strict\")\n      .build();\n  }\n\n  public String resolveToken(HttpHeaders headers) {\n    return Optional.ofNullable(headers.getFirst(HttpHeaders.COOKIE))\n      .map(h -> h.split(\";\"))\n      .stream()\n      .flatMap(Arrays::stream)\n      .flatMap(part -> HttpCookie.parse(part).stream())\n      .filter(c -> COOKIE_NAME.equals(c.getName()))\n      .map(HttpCookie::getValue)\n      .findFirst()\n      .orElse(null);\n  }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootjweauthjpademo.security\n\nimport io.github.susimsek.springbootjweauthjpademo.dto.TokenDTO\nimport org.springframework.http.HttpHeaders\nimport org.springframework.http.ResponseCookie\nimport java.net.HttpCookie\n\nobject CookieUtils {\n\n  const val COOKIE_NAME = \"accessToken\"\n\n  fun createAccessTokenCookie(tokenDto: TokenDTO): ResponseCookie =\n    ResponseCookie.from(COOKIE_NAME, tokenDto.accessToken())\n      .httpOnly(true)\n      .secure(true)\n      .path(\"/\")\n      .maxAge(tokenDto.accessTokenExpiresIn())\n      .sameSite(\"Strict\")\n      .build()\n\n  fun removeAccessTokenCookie(): ResponseCookie =\n    ResponseCookie.from(COOKIE_NAME, \"\")\n      .httpOnly(true)\n      .secure(true)\n      .path(\"/\")\n      .maxAge(0)\n      .sameSite(\"Strict\")\n      .build()\n\n  fun resolveToken(headers: HttpHeaders): String? =\n    headers.getFirst(HttpHeaders.COOKIE)\n      ?.split(\";\")\n      .orEmpty()\n      .asSequence()\n      .flatMap { HttpCookie.parse(it).asSequence() }\n      .firstOrNull { it.name == COOKIE_NAME }\n      ?.value\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### JweUtil\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.security;\n\nimport com.nimbusds.jose.EncryptionMethod;\nimport com.nimbusds.jose.JOSEException;\nimport com.nimbusds.jose.JWEAlgorithm;\nimport com.nimbusds.jose.JWEHeader;\nimport com.nimbusds.jose.JWEObject;\nimport com.nimbusds.jose.Payload;\nimport com.nimbusds.jose.crypto.RSAEncrypter;\nimport com.nimbusds.jose.jwk.RSAKey;\nimport io.github.susimsek.springbootgraphqljwedemo.config.JwtProperties;\nimport io.github.susimsek.springbootgraphqljwedemo.dto.TokenDTO;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\nimport org.springframework.security.oauth2.jwt.*;\nimport org.springframework.stereotype.Component;\n\nimport java.time.Instant;\nimport java.util.List;\n\nimport static io.github.susimsek.springbootgraphqljwedemo.security.SecurityUtils.AUTHORITIES_KEY;\n\n@Component\n@RequiredArgsConstructor\npublic class JweUtil {\n\n    private final JwtEncoder jwtEncoder;\n    private final RSAKey signingKey;\n    private final RSAKey encryptionKey;\n    private final JwtProperties props;\n\n    public TokenDTO generateToken(Authentication authentication) throws JOSEException {\n        String subject = authentication.getName();\n        List<String> roles = authentication.getAuthorities()\n            .stream()\n            .map(GrantedAuthority::getAuthority)\n            .toList();\n\n        Instant now = Instant.now();\n        long expiresIn = props.getExpirationDuration().getSeconds();\n        Instant exp = now.plusSeconds(expiresIn);\n\n        JwtClaimsSet claims = JwtClaimsSet.builder()\n            .issuer(props.getIssuer())\n            .issuedAt(now)\n            .expiresAt(exp)\n            .subject(subject)\n            .claim(AUTHORITIES_KEY, roles)\n            .build();\n\n        JwsHeader jwsHeader = JwsHeader.with(SignatureAlgorithm.RS256)\n            .keyId(signingKey.getKeyID())\n            .build();\n\n        String jws = jwtEncoder\n            .encode(JwtEncoderParameters.from(jwsHeader, claims))\n            .getTokenValue();\n\n        JWEHeader jweHeader = new JWEHeader.Builder(JWEAlgorithm.RSA_OAEP_256, EncryptionMethod.A128GCM)\n            .contentType(\"JWT\")\n            .keyID(encryptionKey.getKeyID())\n            .build();\n\n        JWEObject jweObject = new JWEObject(jweHeader, new Payload(jws));\n        jweObject.encrypt(new RSAEncrypter(encryptionKey.toRSAPublicKey()));\n        String token = jweObject.serialize();\n\n        return new TokenDTO(token, \"Bearer\", expiresIn);\n    }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.security\n\nimport com.nimbusds.jose.EncryptionMethod\nimport com.nimbusds.jose.JOSEException\nimport com.nimbusds.jose.JWEAlgorithm\nimport com.nimbusds.jose.JWEHeader\nimport com.nimbusds.jose.JWEObject\nimport com.nimbusds.jose.Payload\nimport com.nimbusds.jose.crypto.RSAEncrypter\nimport com.nimbusds.jose.jwk.RSAKey\nimport io.github.susimsek.springbootgraphqljwedemo.config.JwtProperties\nimport io.github.susimsek.springbootgraphqljwedemo.dto.TokenDTO\nimport lombok.RequiredArgsConstructor\nimport org.springframework.security.core.Authentication\nimport org.springframework.security.oauth2.jose.jws.SignatureAlgorithm\nimport org.springframework.security.oauth2.jwt.JwtClaimsSet\nimport org.springframework.security.oauth2.jwt.JwtEncoder\nimport org.springframework.security.oauth2.jwt.JwtEncoderParameters\nimport org.springframework.stereotype.Component\n\nimport java.time.Instant\n\n@Component\n@RequiredArgsConstructor\nclass JweUtil(\n    private val jwtEncoder: JwtEncoder,\n    private val signingKey: RSAKey,\n    private val encryptionKey: RSAKey,\n    private val props: JwtProperties\n) {\n    fun generateToken(authentication: Authentication): TokenDTO {\n        val subject = authentication.name\n        val roles = authentication.authorities.map { it.authority }\n\n        val now = Instant.now()\n        val expiresIn = props.expirationDuration.seconds\n        val exp = now.plusSeconds(expiresIn)\n\n        val claims = JwtClaimsSet.builder()\n            .issuer(props.issuer)\n            .issuedAt(now)\n            .expiresAt(exp)\n            .subject(subject)\n            .claim(AUTHORITIES_KEY, roles)\n            .build()\n\n        val jwsHeader = org.springframework.security.oauth2.jwt.JwsHeader.with(SignatureAlgorithm.RS256)\n            .keyId(signingKey.keyID)\n            .build()\n\n        val jws = jwtEncoder\n            .encode(JwtEncoderParameters.from(jwsHeader, claims))\n            .tokenValue\n\n        val jweHeader = JWEHeader.Builder(JWEAlgorithm.RSA_OAEP_256, EncryptionMethod.A128GCM)\n            .contentType(\"JWT\")\n            .keyID(encryptionKey.keyID)\n            .build()\n\n        val jweObject = JWEObject(jweHeader, Payload(jws))\n        jweObject.encrypt(RSAEncrypter(encryptionKey.toRSAPublicKey()))\n        val token = jweObject.serialize()\n\n        return TokenDTO(token, \"Bearer\", expiresIn)\n    }\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### KeyUtils\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.security;\n\nimport com.nimbusds.jose.JWEAlgorithm;\nimport com.nimbusds.jose.JWSAlgorithm;\nimport com.nimbusds.jose.jwk.KeyUse;\nimport com.nimbusds.jose.jwk.RSAKey;\nimport lombok.experimental.UtilityClass;\n\nimport java.security.KeyFactory;\nimport java.security.interfaces.RSAPrivateKey;\nimport java.security.interfaces.RSAPublicKey;\nimport java.security.spec.PKCS8EncodedKeySpec;\nimport java.security.spec.X509EncodedKeySpec;\nimport java.util.Base64;\n\n@UtilityClass\npublic class KeyUtils {\n    public RSAKey buildRsaKey(\n            String pubPem,\n            String privPem,\n            String kid,\n            boolean forSign\n    ) throws Exception {\n        String pubContent = pubPem\n            .replace(\"-----BEGIN PUBLIC KEY-----\", \"\")\n            .replace(\"-----END PUBLIC KEY-----\", \"\")\n            .replaceAll(\"\\\\s\", \"\");\n        String privContent = privPem\n            .replace(\"-----BEGIN PRIVATE KEY-----\", \"\")\n            .replace(\"-----END PRIVATE KEY-----\", \"\")\n            .replaceAll(\"\\\\s\", \"\");\n\n        byte[] decodedPub = Base64.getDecoder().decode(pubContent);\n        byte[] decodedPriv = Base64.getDecoder().decode(privContent);\n\n        KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n        RSAPublicKey publicKey = (RSAPublicKey) kf.generatePublic(new X509EncodedKeySpec(decodedPub));\n        RSAPrivateKey privateKey = (RSAPrivateKey) kf.generatePrivate(new PKCS8EncodedKeySpec(decodedPriv));\n\n        RSAKey.Builder builder = new RSAKey.Builder(publicKey)\n            .privateKey(privateKey)\n            .keyID(kid);\n\n        if (forSign) {\n            builder\n                .algorithm(JWSAlgorithm.RS256)\n                .keyUse(KeyUse.SIGNATURE);\n        } else {\n            builder\n                .algorithm(JWEAlgorithm.RSA_OAEP_256)\n                .keyUse(KeyUse.ENCRYPTION);\n        }\n\n        return builder.build();\n    }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.security\n\nimport com.nimbusds.jose.JWEAlgorithm\nimport com.nimbusds.jose.JWSAlgorithm\nimport com.nimbusds.jose.jwk.KeyUse\nimport com.nimbusds.jose.jwk.RSAKey\nimport java.security.KeyFactory\nimport java.security.interfaces.RSAPrivateKey\nimport java.security.interfaces.RSAPublicKey\nimport java.security.spec.PKCS8EncodedKeySpec\nimport java.security.spec.X509EncodedKeySpec\nimport java.util.Base64\n\nobject KeyUtils {\n    @JvmStatic\n    @Throws(Exception::class)\n    fun buildRsaKey(\n        pubPem: String,\n        privPem: String,\n        kid: String,\n        forSign: Boolean\n    ): RSAKey {\n        val pubContent = pubPem\n            .replace(\"-----BEGIN PUBLIC KEY-----\", \"\")\n            .replace(\"-----END PUBLIC KEY-----\", \"\")\n            .replace(Regex(\"\\\\s\"), \"\")\n        val privContent = privPem\n            .replace(\"-----BEGIN PRIVATE KEY-----\", \"\")\n            .replace(\"-----END PRIVATE KEY-----\", \"\")\n            .replace(Regex(\"\\\\s\"), \"\")\n\n        val decodedPub = Base64.getDecoder().decode(pubContent)\n        val decodedPriv = Base64.getDecoder().decode(privContent)\n\n        val kf = KeyFactory.getInstance(\"RSA\")\n        val publicKey = kf.generatePublic(X509EncodedKeySpec(decodedPub)) as RSAPublicKey\n        val privateKey = kf.generatePrivate(PKCS8EncodedKeySpec(decodedPriv)) as RSAPrivateKey\n\n        val builder = RSAKey.Builder(publicKey)\n            .privateKey(privateKey)\n            .keyID(kid)\n\n        if (forSign) {\n            builder\n                .algorithm(JWSAlgorithm.RS256)\n                .keyUse(KeyUse.SIGNATURE)\n        } else {\n            builder\n                .algorithm(JWEAlgorithm.RSA_OAEP_256)\n                .keyUse(KeyUse.ENCRYPTION)\n        }\n\n        return builder.build()\n    }\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### SecurityUtils\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.security;\n\nimport lombok.experimental.UtilityClass;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.oauth2.jwt.Jwt;\n\nimport java.util.Optional;\n\n@UtilityClass\npublic class SecurityUtils {\n\n    public static final String AUTHORITIES_KEY = \"auth\";\n\n    public Optional<String> getCurrentUserLogin() {\n        var ctx = SecurityContextHolder.getContext();\n        return Optional.ofNullable(extractPrincipal(ctx.getAuthentication()));\n    }\n\n    private String extractPrincipal(Authentication authentication) {\n        if (authentication == null) {\n            return null;\n        }\n        Object principal = authentication.getPrincipal();\n        if (principal instanceof Jwt jwt) {\n            return jwt.getSubject();\n        }\n        if (principal instanceof UserDetails ud) {\n            return ud.getUsername();\n        }\n        if (principal instanceof String username) {\n            return username;\n        }\n        return null;\n    }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.security\n\nimport org.springframework.security.core.Authentication\nimport org.springframework.security.core.context.SecurityContextHolder\nimport org.springframework.security.core.userdetails.UserDetails\nimport org.springframework.security.oauth2.jwt.Jwt\nimport java.util.Optional\n\nobject SecurityUtils {\n  const val AUTHORITIES_KEY = \"auth\"\n\n  fun getCurrentUserLogin(): Optional<String> {\n    val authentication: Authentication? = SecurityContextHolder.getContext().authentication\n    return Optional.ofNullable(extractPrincipal(authentication))\n  }\n\n  private fun extractPrincipal(authentication: Authentication?): String? {\n    return when (val principal = authentication?.principal) {\n      is Jwt -> principal.subject\n      is UserDetails -> principal.username\n      is String -> principal\n      else -> null\n    }\n  }\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### DomainUserDetailsService\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.security;\n\nimport io.github.susimsek.springbootgraphqljwedemo.entity.User;\nimport io.github.susimsek.springbootgraphqljwedemo.repository.UserRepository;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@RequiredArgsConstructor\npublic class DomainUserDetailsService implements UserDetailsService {\n\n  private final UserRepository userRepository;\n\n  @Override\n  public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n    User user = userRepository.findOneWithAuthoritiesByUsername(username)\n      .orElseThrow(() -> new UsernameNotFoundException(\"User not found with username: \" + username));\n\n    List<GrantedAuthority> authorities = user.getAuthorities().stream()\n      .map(mapping -> mapping.getAuthority().getName())\n      .map(SimpleGrantedAuthority::new)\n      .collect(Collectors.toList());\n\n    return new org.springframework.security.core.userdetails.User(\n      user.getUsername(),\n      user.getPassword(),\n      user.isEnabled(),  // enabled\n      true,              // accountNonExpired\n      true,              // credentialsNonExpired\n      true,              // accountNonLocked\n      authorities\n    );\n  }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.security\n\nimport io.github.susimsek.springbootgraphqljwedemo.repository.UserRepository\nimport org.springframework.security.core.GrantedAuthority\nimport org.springframework.security.core.authority.SimpleGrantedAuthority\nimport org.springframework.security.core.userdetails.UserDetails\nimport org.springframework.security.core.userdetails.UserDetailsService\nimport org.springframework.security.core.userdetails.UsernameNotFoundException\nimport java.util.stream.Collectors\n\nclass DomainUserDetailsService(\n  private val userRepository: UserRepository\n) : UserDetailsService {\n  override fun loadUserByUsername(username: String): UserDetails {\n    val user = userRepository.findOneWithAuthoritiesByUsername(username)\n      .orElseThrow { UsernameNotFoundException(\"User not found with username: $username\") }\n\n    val authorities: List<GrantedAuthority> = user.authorities.stream()\n      .map { SimpleGrantedAuthority(it.authority.name) }\n      .collect(Collectors.toList())\n\n    return org.springframework.security.core.userdetails.User(\n      user.username,\n      user.password,\n      user.enabled,\n      true,\n      true,\n      true,\n      authorities\n    )\n  }\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### SpringSecurityAuditorAware\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.security;\n\nimport org.springframework.data.domain.AuditorAware;\nimport org.springframework.lang.NonNull;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Optional;\n\n@Component\npublic class SpringSecurityAuditorAware implements AuditorAware<String> {\n\n  @Override\n  @NonNull\n  public Optional<String> getCurrentAuditor() {\n    return Optional.of(SecurityUtils.getCurrentUserLogin().orElse(\"system\"));\n  }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.security\n\nimport org.springframework.data.domain.AuditorAware\nimport org.springframework.lang.NonNull\nimport org.springframework.stereotype.Component\n\n@Component\nclass SpringSecurityAuditorAware : AuditorAware<String> {\n    @NonNull\n    override fun getCurrentAuditor(): Optional<String> =\n        Optional.of(SecurityUtils.getCurrentUserLogin().orElse(\"system\"))\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### GraphQlTokenCookieInterceptor\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootjweauthjpademo.security;\n\nimport graphql.GraphQLContext;\nimport io.github.susimsek.springbootjweauthjpademo.dto.TokenDTO;\nimport org.springframework.graphql.server.WebGraphQlInterceptor;\nimport org.springframework.graphql.server.WebGraphQlRequest;\nimport org.springframework.graphql.server.WebGraphQlResponse;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.ResponseCookie;\nimport org.springframework.lang.NonNull;\nimport org.springframework.stereotype.Component;\nimport reactor.core.publisher.Mono;\n\n@Component\npublic class GraphQlTokenCookieInterceptor implements WebGraphQlInterceptor {\n\n  @Override\n  @NonNull\n  public Mono<WebGraphQlResponse> intercept(@NonNull WebGraphQlRequest request, Chain chain) {\n    return chain.next(request)\n      .doOnNext(response -> {\n        GraphQLContext ctx = response.getExecutionInput().getGraphQLContext();\n\n        if (Boolean.TRUE.equals(ctx.get(\"clearAccessToken\"))) {\n          ResponseCookie expired = CookieUtils.removeAccessTokenCookie();\n          response.getResponseHeaders().add(HttpHeaders.SET_COOKIE, expired.toString());\n          return;\n        }\n\n        TokenDTO tokenDto = ctx.get(\"accessToken\");\n        if (tokenDto != null) {\n          ResponseCookie cookie = CookieUtils.createAccessTokenCookie(tokenDto);\n          response.getResponseHeaders()\n            .add(HttpHeaders.SET_COOKIE, cookie.toString());\n        }\n      });\n  }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootjweauthjpademo.security\n\nimport graphql.GraphQLContext\nimport io.github.susimsek.springbootjweauthjpademo.dto.TokenDTO\nimport org.springframework.graphql.server.WebGraphQlInterceptor\nimport org.springframework.graphql.server.WebGraphQlRequest\nimport org.springframework.graphql.server.WebGraphQlResponse\nimport org.springframework.http.HttpHeaders\nimport org.springframework.http.ResponseCookie\nimport org.springframework.stereotype.Component\nimport reactor.core.publisher.Mono\n\n@Component\nclass GraphQlTokenCookieInterceptor : WebGraphQlInterceptor {\n\n  override fun intercept(\n    request: WebGraphQlRequest,\n    chain: WebGraphQlInterceptor.Chain\n  ): Mono<WebGraphQlResponse> {\n    return chain.next(request)\n      .doOnNext { response ->\n        val ctx: GraphQLContext = response.executionInput.graphQLContext\n\n        if (ctx.get<Boolean>(\"clearAccessToken\") == true) {\n          val expired: ResponseCookie = CookieUtils.removeAccessTokenCookie()\n          response.responseHeaders.add(HttpHeaders.SET_COOKIE, expired.toString())\n          return@doOnNext\n        }\n\n        ctx.get<TokenDTO>(\"accessToken\")?.let { tokenDto ->\n          val cookie: ResponseCookie = CookieUtils.createAccessTokenCookie(tokenDto)\n          response.responseHeaders.add(HttpHeaders.SET_COOKIE, cookie.toString())\n        }\n      }\n  }\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### CookieAuthenticationWebSocketInterceptor\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.security;\n\nimport io.github.susimsek.springbootgraphqljwedemo.security.CookieUtils;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.graphql.server.WebGraphQlInterceptor;\nimport org.springframework.graphql.server.WebGraphQlRequest;\nimport org.springframework.graphql.server.WebGraphQlResponse;\nimport org.springframework.graphql.server.WebSocketGraphQlInterceptor;\nimport org.springframework.graphql.server.WebSocketGraphQlRequest;\nimport org.springframework.graphql.server.WebSocketSessionInfo;\nimport org.springframework.graphql.server.support.AuthenticationExtractor;\nimport org.springframework.lang.NonNull;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContext;\nimport org.springframework.security.core.context.SecurityContextImpl;\nimport org.springframework.security.oauth2.server.resource.authentication.BearerTokenAuthenticationToken;\nimport reactor.core.publisher.Mono;\nimport reactor.util.context.Context;\nimport reactor.util.context.ContextView;\n\nimport java.util.Map;\n\n@RequiredArgsConstructor\npublic class CookieAuthenticationWebSocketInterceptor implements WebSocketGraphQlInterceptor {\n\n  private final String authenticationAttribute = this.getClass().getName() + \".AUTHENTICATION\";\n  private final AuthenticationExtractor authExtractor;\n  private final AuthenticationManager authenticationManager;\n\n  @Override\n  @NonNull\n  public Mono<Object> handleConnectionInitialization(@NonNull WebSocketSessionInfo info,\n                                                     @NonNull Map<String, Object> payload) {\n\n    Mono<Authentication> headerAuth = authExtractor.getAuthentication(payload);\n\n    Mono<Authentication> cookieAuth = Mono.defer(() -> {\n      String token = CookieUtils.resolveToken(info.getHeaders());\n      return token != null\n        ? Mono.just(new BearerTokenAuthenticationToken(token))\n        : Mono.empty();\n    });\n\n    return headerAuth\n      .switchIfEmpty(cookieAuth)\n      .flatMap(this::authenticate)\n      .doOnNext(auth -> {\n        SecurityContext securityContext = new SecurityContextImpl(auth);\n        info.getAttributes().put(this.authenticationAttribute, securityContext);\n      })\n      .then(Mono.empty());\n  }\n\n  @Override\n  @NonNull\n  public Mono<WebGraphQlResponse> intercept(@NonNull WebGraphQlRequest request,\n                                            @NonNull WebGraphQlInterceptor.Chain chain) {\n    if (request instanceof WebSocketGraphQlRequest webSocketRequest) {\n      Map<String, Object> attributes = webSocketRequest.getSessionInfo().getAttributes();\n      SecurityContext securityContext = (SecurityContext) attributes.get(this.authenticationAttribute);\n      ContextView contextView = this.getContextToWrite(securityContext);\n      return chain.next(request).contextWrite(contextView);\n    } else {\n      return chain.next(request);\n    }\n  }\n\n  protected Mono<Authentication> authenticate(Authentication authentication) {\n    return Mono.just(this.authenticationManager.authenticate(authentication));\n  }\n\n  protected ContextView getContextToWrite(SecurityContext securityContext) {\n    return Context.of(SecurityContext.class.getName(), securityContext);\n  }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.security\n\nimport io.github.susimsek.springbootgraphqljwedemo.security.CookieUtils\nimport org.springframework.graphql.server.WebGraphQlInterceptor\nimport org.springframework.graphql.server.WebGraphQlRequest\nimport org.springframework.graphql.server.WebGraphQlResponse\nimport org.springframework.graphql.server.WebSocketGraphQlInterceptor\nimport org.springframework.graphql.server.WebSocketGraphQlRequest\nimport org.springframework.graphql.server.WebSocketSessionInfo\nimport org.springframework.graphql.server.support.AuthenticationExtractor\nimport org.springframework.lang.NonNull\nimport org.springframework.security.authentication.AuthenticationManager\nimport org.springframework.security.core.Authentication\nimport org.springframework.security.core.context.SecurityContext\nimport org.springframework.security.core.context.SecurityContextImpl\nimport org.springframework.security.oauth2.server.resource.authentication.BearerTokenAuthenticationToken\nimport reactor.core.publisher.Mono\nimport reactor.util.context.Context\nimport reactor.util.context.ContextView\n\nclass CookieAuthenticationWebSocketInterceptor(\n  private val authExtractor: AuthenticationExtractor,\n  private val authenticationManager: AuthenticationManager\n) : WebSocketGraphQlInterceptor {\n\n  private val authenticationAttribute: String = \"${this::class.java.name}.AUTHENTICATION\"\n\n  @NonNull\n  override fun handleConnectionInitialization(\n    @NonNull info: WebSocketSessionInfo,\n    @NonNull payload: Map<String, Any>\n  ): Mono<Any> {\n    val headerAuth: Mono<Authentication> = authExtractor.getAuthentication(payload)\n\n    val cookieAuth: Mono<Authentication> = Mono.defer {\n      val token = CookieUtils.resolveToken(info.headers)\n      if (token != null) {\n        Mono.just(BearerTokenAuthenticationToken(token))\n      } else {\n        Mono.empty()\n      }\n    }\n\n    return headerAuth\n      .switchIfEmpty(cookieAuth)\n      .flatMap { authenticate(it) }\n      .doOnNext { auth ->\n        val securityContext = SecurityContextImpl(auth)\n        info.attributes[authenticationAttribute] = securityContext\n      }\n      .then(Mono.empty())\n  }\n\n  @NonNull\n  override fun intercept(\n    @NonNull request: WebGraphQlRequest,\n    @NonNull chain: WebGraphQlInterceptor.Chain\n  ): Mono<WebGraphQlResponse> {\n    return if (request is WebSocketGraphQlRequest) {\n      val attributes = request.sessionInfo.attributes\n      val securityContext = attributes[authenticationAttribute] as SecurityContext\n      val contextView: ContextView = getContextToWrite(securityContext)\n      chain.next(request).contextWrite(contextView)\n    } else {\n      chain.next(request)\n    }\n  }\n\n  protected fun authenticate(authentication: Authentication): Mono<Authentication> =\n    Mono.just(authenticationManager.authenticate(authentication))\n\n  protected fun getContextToWrite(securityContext: SecurityContext): ContextView =\n    Context.of(SecurityContext::class.java.name, securityContext)\n}\n```\n\n:::\n\n---\n\n## 🔐 Adım 6: Kimlik Doğrulama ve Güvenli Endpointler\n\nBu bölümde, aşağıdaki GraphQL controller ve DTO’ları tanımlıyoruz:\n\n- **AuthController**: Kullanıcıları doğrular, JWE token'ı GraphQL mutationu ile oluşturur ve GraphQLContext içine `accessToken` veya `clearAccessToken` flaglerini ekler.\n- **HelloController**: Kimliği doğrulanmış kullanıcılar ve yalnızca adminin erişebileceği GraphQL query, subscription ve mutationları sunar.\n- **LoginInput**: Login işlemi için (kullanıcı adı/şifre) GraphQL input tipi.\n- **GreetInput** & **GreetDTO**: greet mutationu için GraphQL input ve yanıt tipi.\n- **TokenDTO**: Token, tür ve geçerlilik süresini içeren JWE token yanıt modelidir.\n\nBu bileşenler, JWE token’ları ve JPA yı kullanarak GraphQL API’de stateless kimlik doğrulama akışını tamamlar.\n\n### AuthController\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootjweauthjpademo.controller;\n\nimport graphql.GraphQLContext;\nimport io.github.susimsek.springbootjweauthjpademo.dto.LoginInput;\nimport io.github.susimsek.springbootjweauthjpademo.dto.TokenDTO;\nimport io.github.susimsek.springbootjweauthjpademo.security.JweUtil;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.graphql.data.method.annotation.Argument;\nimport org.springframework.graphql.data.method.annotation.MutationMapping;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Controller;\n\n@Controller\n@RequiredArgsConstructor\npublic class AuthController {\n\n  private final AuthenticationManager authenticationManager;\n  private final JweUtil jweUtil;\n\n  @MutationMapping\n  public TokenDTO login(@Argument LoginInput input,\n                        GraphQLContext context) {\n    // Authenticate user\n    Authentication auth = authenticationManager.authenticate(\n      new UsernamePasswordAuthenticationToken(input.username(), input.password())\n    );\n    SecurityContextHolder.getContext().setAuthentication(auth);\n\n    // Generate JWE token\n    TokenDTO tokenDto = jweUtil.generateToken(auth);\n\n    // Store token in GraphQLContext for the interceptor to set cookie\n    context.put(\"accessToken\", tokenDto);\n\n    return tokenDto;\n  }\n\n  @PreAuthorize(\"isAuthenticated()\")\n  @MutationMapping\n  public Boolean logout(GraphQLContext context) {\n    // Signal the interceptor to clear the cookie\n    context.put(\"clearAccessToken\", Boolean.TRUE);\n    return true;\n  }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootjweauthjpademo.controller\n\nimport graphql.GraphQLContext\nimport io.github.susimsek.springbootjweauthjpademo.dto.LoginInput\nimport io.github.susimsek.springbootjweauthjpademo.dto.TokenDTO\nimport io.github.susimsek.springbootjweauthjpademo.security.JweUtil\nimport org.springframework.graphql.data.method.annotation.Argument\nimport org.springframework.graphql.data.method.annotation.MutationMapping\nimport org.springframework.security.access.prepost.PreAuthorize\nimport org.springframework.security.authentication.AuthenticationManager\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken\nimport org.springframework.security.core.context.SecurityContextHolder\nimport org.springframework.stereotype.Controller\n\n@Controller\nclass AuthController(\n  private val authenticationManager: AuthenticationManager,\n  private val jweUtil: JweUtil\n) {\n\n  @MutationMapping\n  fun login(\n    @Argument input: LoginInput,\n    context: GraphQLContext\n  ): TokenDTO {\n    // Authenticate user\n    val auth = authenticationManager.authenticate(\n      UsernamePasswordAuthenticationToken(input.username, input.password)\n    )\n    SecurityContextHolder.getContext().authentication = auth\n\n    // Generate JWE token\n    val tokenDto = jweUtil.generateToken(auth)\n\n    // Store token in GraphQLContext for the interceptor to set cookie\n    context.put(\"accessToken\", tokenDto)\n\n    return tokenDto\n  }\n\n  @PreAuthorize(\"isAuthenticated()\")\n  @MutationMapping\n  fun logout(context: GraphQLContext): Boolean {\n    // Signal the interceptor to clear the cookie\n    context.put(\"clearAccessToken\", true)\n    return true\n  }\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### HelloController\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.controller;\n\nimport io.github.susimsek.springbootgraphqljwedemo.dto.GreetDTO;\nimport io.github.susimsek.springbootgraphqljwedemo.dto.GreetInput;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.graphql.data.method.annotation.Argument;\nimport org.springframework.graphql.data.method.annotation.MutationMapping;\nimport org.springframework.graphql.data.method.annotation.QueryMapping;\nimport org.springframework.graphql.data.method.annotation.SubscriptionMapping;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.stereotype.Controller;\nimport reactor.core.publisher.Flux;\n\nimport java.time.Duration;\nimport java.time.Instant;\n\nimport static io.github.susimsek.springbootgraphqljwedemo.security.SecurityUtils.AUTHORITIES_KEY;\n\n@Controller\n@RequiredArgsConstructor\n@PreAuthorize(\"isAuthenticated()\")\npublic class HelloController {\n\n  @QueryMapping\n  public String helloAll(@AuthenticationPrincipal Jwt jwt) {\n    var roles = jwt.getClaimAsStringList(AUTHORITIES_KEY);\n    return \"Hello, \" + jwt.getSubject() + \"! Your roles: \" + roles;\n  }\n\n  @PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\n  @QueryMapping\n  public String helloAdmin(@AuthenticationPrincipal Jwt jwt) {\n    return \"Hello Admin, \" + jwt.getSubject() + \"!\";\n  }\n\n  @MutationMapping\n  public GreetDTO greet(\n    @Argument GreetInput input,\n    @AuthenticationPrincipal Jwt jwt\n  ) {\n    String msg = \"Hello \" + jwt.getSubject() + \", you said: \" + input.getMessage();\n    return new GreetDTO(msg, Instant.now());\n  }\n\n  @SubscriptionMapping(\"greetStream\")\n  public Flux<GreetDTO> greetStream(\n    @Argument GreetInput input,\n    @AuthenticationPrincipal Jwt jwt\n  ) {\n    return Flux.interval(Duration.ofSeconds(1))\n      .map(i -> {\n        String msg = \"Hello \" + jwt.getSubject()\n          + \", you said: \" + input.getMessage()\n          + \" (event \" + (i + 1) + \")\";\n        return new GreetDTO(msg, Instant.now());\n      });\n  }\n\n  @PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\n  @SubscriptionMapping(\"greetStreamAdmin\")\n  public Flux<GreetDTO> greetStreamAdmin(\n    @Argument GreetInput input,\n    @AuthenticationPrincipal Jwt jwt\n  ) {\n    return Flux.interval(Duration.ofSeconds(2))\n      .map(i -> {\n        String msg = \"Hello Admin \" + jwt.getSubject()\n          + \", you said: \" + input.getMessage()\n          + \" (admin event \" + (i + 1) + \")\";\n        return new GreetDTO(msg, Instant.now());\n      });\n  }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.controller\n\nimport io.github.susimsek.springbootgraphqljwedemo.dto.GreetDTO\nimport io.github.susimsek.springbootgraphqljwedemo.dto.GreetInput\nimport org.springframework.graphql.data.method.annotation.Argument\nimport org.springframework.graphql.data.method.annotation.MutationMapping\nimport org.springframework.graphql.data.method.annotation.QueryMapping\nimport org.springframework.graphql.data.method.annotation.SubscriptionMapping\nimport org.springframework.security.access.prepost.PreAuthorize\nimport org.springframework.security.core.annotation.AuthenticationPrincipal\nimport org.springframework.security.oauth2.jwt.Jwt\nimport org.springframework.stereotype.Controller\nimport reactor.core.publisher.Flux\nimport java.time.Duration\nimport java.time.Instant\n\n@Controller\n@RequiredArgsConstructor\n@PreAuthorize(\"isAuthenticated()\")\nclass HelloController {\n\n  @QueryMapping\n  fun helloAll(@AuthenticationPrincipal jwt: Jwt): String {\n    val roles = jwt.getClaimAsStringList(SecurityUtils.AUTHORITIES_KEY)\n    return \"Hello, ${jwt.subject}! Your roles: $roles\"\n  }\n\n  @PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\n  @QueryMapping\n  fun helloAdmin(@AuthenticationPrincipal jwt: Jwt): String =\n    \"Hello Admin, ${jwt.subject}!\"\n\n  @MutationMapping\n  fun greet(\n    @Argument input: GreetInput,\n    @AuthenticationPrincipal jwt: Jwt\n  ): GreetDTO {\n    val msg = \"Hello ${jwt.subject}, you said: ${input.message}\"\n    return GreetDTO(msg, Instant.now())\n  }\n\n  @SubscriptionMapping(\"greetStream\")\n  fun greetStream(\n    @Argument input: GreetInput,\n    @AuthenticationPrincipal jwt: Jwt\n  ): Flux<GreetDTO> =\n    Flux.interval(Duration.ofSeconds(1))\n      .map { i ->\n        val msg = \"Hello ${jwt.subject}, you said: ${input.message} (event ${i + 1})\"\n        GreetDTO(msg, Instant.now())\n      }\n\n  @PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\n  @SubscriptionMapping(\"greetStreamAdmin\")\n  fun greetStreamAdmin(\n    @Argument input: GreetInput,\n    @AuthenticationPrincipal jwt: Jwt\n  ): Flux<GreetDTO> =\n    Flux.interval(Duration.ofSeconds(2))\n      .map { i ->\n        val msg = \"Hello Admin ${jwt.subject}, you said: ${input.message} (admin event ${i + 1})\"\n        GreetDTO(msg, Instant.now())\n      }\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### LoginInput\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.dto;\n\npublic record LoginInput(\n  String username,\n  String password\n) {}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.dto\n\ndata class LoginInput(\n  val username: String,\n  val password: String\n)\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### GreetInput\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.dto;\n\npublic record GreetInput(\n  String message\n) {}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.dto\n\ndata class GreetInput(\n  val message: String\n)\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### GreetDTO\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.dto;\n\nimport java.time.Instant;\n\npublic record GreetDTO(\n  String greeting,\n  Instant timestamp\n) {}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.dto\n\nimport java.time.Instant\n\ndata class GreetDTO(\n  val greeting: String,\n  val timestamp: Instant\n)\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### TokenDTO\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootgraphqljwedemo.dto;\n\npublic record TokenDTO(\n  String accessToken,\n  String tokenType,\n  long accessTokenExpiresIn\n) {}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootgraphqljwedemo.dto\n\ndata class TokenDTO(\n  val accessToken: String,\n  val tokenType: String,\n  val accessTokenExpiresIn: Long\n)\n```\n\n:::\n\n---\n\n## ▶️ Uygulamayı Çalıştır\n\n```bash\n./mvnw spring-boot:run\n# or\ngradle bootRun\n```\n\nGraalVM 22.3+ yüklüyse, `native` profili ile native-image derlemek için şu komutu çalıştır:\n\n```bash\n./mvnw native:compile -Pnative\n```\n\nNative-image derlemesi başarıyla tamamlandıktan sonra, çalıştırılabilir dosya `target/` altında oluşturulur (örneğin: `target/spring-boot-graphql-jwe-auth-demo`). Doğrudan şu komut ile çalıştırın:\n\n```bash\n./target/spring-boot-graphql-jwe-auth-demo\n```\n\n**Opsiyonel:** UPX yüklüyse, yerel çalıştırılabilir dosyayı daha küçük boyut için sıkıştırabilirsiniz:\n\n```bash\nupx --ultra-brute --lzma target/spring-boot-graphql-jwe-auth-demo\n```\n\n---\n\n## 🧪 GraphQL Endpoint Testi\n\n### Admin Akışı\n\n**admin** olarak giriş yapın ve `Set-Cookie` başlığından JWE tokeni yakalayın:\n\n```bash\ncurl -i -X POST http://localhost:8080/graphql \\\n  -H \"Content-Type: application/json\" \\\n  -d '{ \"query\": \"mutation { login(input: { username: \\\"admin\\\", password: \\\"adminpass\\\" }) { accessToken tokenType accessTokenExpiresIn } }\" }'\n```\n\n- **Set-Cookie** başlığı `accessToken=<jwe-token>` içerir\n- Yanıt:\n\n```json\n{\n  \"data\": {\n    \"login\": {\n      \"accessToken\": \"<jwe-token>\",\n      \"tokenType\": \"Bearer\",\n      \"accessTokenExpiresIn\": 3600\n    }\n  }\n}\n```\n\n**Cookie** kullanarak `helloAll` sorgusuna erişin:\n\n```bash\ncurl -b \"accessToken=<jwe-token>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{ \"query\": \"{ helloAll }\" }' \\\n  http://localhost:8080/graphql\n```\n\nVeya **Authorization** başlığıyla:\n\n```bash\ncurl -H \"Authorization: Bearer <jwe-token>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{ \"query\": \"{ helloAll }\" }' \\\n  http://localhost:8080/graphql\n```\n\nadmin-özel `helloAdmin` sorgusunu çalıştırın:\n\n```bash\ncurl -H \"Authorization: Bearer <jwe-token>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{ \"query\": \"{ helloAdmin }\" }' \\\n  http://localhost:8080/graphql\n```\n\nOturum çerezini temizlemek için `logout` mutationu çalıştırın:\n\n```bash\ncurl -H \"Authorization: Bearer <jwe-token>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{ \"query\": \"mutation { logout }\" }' \\\n  http://localhost:8080/graphql\n```\n\n### User Flow\n\n**user** olarak giriş yapın ve **cookie**’den JWE tokeni yakalayın:\n\n```bash\ncurl -i -X POST http://localhost:8080/graphql \\\n  -H \"Content-Type: application/json\" \\\n  -d '{ \"query\": \"mutation { login(input: { username: \\\"user\\\", password: \\\"userpass\\\" }) { accessToken tokenType accessTokenExpiresIn } }\" }'\n```\n\n- **Set-Cookie** başlığı `accessToken=<jwe-token>` içerir\n\n`helloAll` sorgusunu çağırmak için **cookie** kullanın:\n\n```bash\ncurl -b \"accessToken=<jwe-token>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{ \"query\": \"{ helloAll }\" }' \\\n  http://localhost:8080/graphql\n```\n\n**Authorization** başlığıyla:\n\n```bash\ncurl -H \"Authorization: Bearer <jwe-token>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{ \"query\": \"{ helloAll }\" }' \\\n  http://localhost:8080/graphql\n```\n\n`helloAdmin` sorgusunu dene (403 hata dönmesi gerekir):\n\n```bash\ncurl -H \"Authorization: Bearer <jwe-token>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{ \"query\": \"{ helloAdmin }\" }' \\\n  http://localhost:8080/graphql\n```\n\n### GraphiQL Üzerinden Subscription Testi\n\nSubscriptionları doğrudan GraphiQL UI’ında `http://localhost:8080/graphiql` adresinde test edin:\n\n**1. GraphiQL’de Token Alma**\n\n1. **Sorgu (Query)** paneline şunu girin:\n\n   ```graphql\n   mutation Login($in: LoginInput!) {\n     login(input: $in) {\n       accessToken\n     }\n   }\n   ```\n\n2. **Değişkenler (Variables)** paneline geçip ekleyin:\n\n   ```json\n   {\n     \"in\": { \"username\": \"admin\", \"password\": \"adminpass\" }\n   }\n   ```\n\n3. ▶️ düğmesine tıklayın ve dönen yanıttaki `accessToken` değerini kopyalayın.\n\n<span style=\"display:block; height:1rem;\"></span>\n\n**2. Başlıkları (Headers) Yapılandırma**\n\n1. Kenar çubuğunda **Headers** sekmesine tıklayın.\n2. Aşağıdaki JSON’u ekleyin:\n\n   ```json\n   {\n     \"Authorization\": \"Bearer <accessToken>\"\n   }\n   ```\n\n<span style=\"display:block; height:1rem;\"></span>\n\n**3. Kullanıcı Olarak Abone Olma (greetStream)**\n\n1. **Subscriptions** paneline geçin.\n2. Aşağıdaki subscription sorgusunu girin:\n\n   ```graphql\n   subscription UserSubscribe($in: GreetInput!) {\n     greetStream(input: $in) {\n       greeting\n       timestamp\n     }\n   }\n   ```\n\n3. **Variables** paneline:\n\n   ```json\n   {\n     \"in\": { \"message\": \"GraphiQL üzerinden merhaba!\" }\n   }\n   ```\n\n4. ▶️ düğmesine tıklayarak `greetStream` akışını dinlemeye başlayın.\n\n<span style=\"display:block; height:1rem;\"></span>\n\n**4. Admin Olarak Abone Olma (greetStreamAdmin)**\n\n1. Aynı **Subscriptions** panelinde aşağıdaki sorguyu girin:\n\n   ```graphql\n   subscription AdminSubscribe($in: GreetInput!) {\n     greetStreamAdmin(input: $in) {\n       greeting\n       timestamp\n     }\n   }\n   ```\n\n2. Aynı **Variables** panelini kullanın.\n3. ▶️ düğmesine tıklayın. Sadece `ROLE_ADMIN` yetkisine sahip token’lar veri alacak; diğerleri yetki hatası görecektir.\n\n---\n\nBu GraphQL yapılandırması, Spring Boot, GraphQL ve JPA ile, stateless, şifreli JWT (JWE) tabanlı bir kimlik doğrulama akışı sunar ve sağlam güvenlik ile ölçeklenebilirlik sağlar.\n","id":"spring-boot-graphql-jwe-authentication","title":"Spring Boot GraphQL JWE Kimlik Doğrulama","date":"2025-05-17","summary":"Stateless şifreli JWT’ler (JWE) kullanarak Spring Boot GraphQL API’lerinizi nasıl güvenli hale getirirken, kullanıcı kimliklerini ve rolleri JPA destekli bir veritabanında nasıl saklayacağınızı öğrenin.","thumbnail":"/images/spring-boot-graphql-jwe-auth-thumbnail.webp","readingTime":"5 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"security","name":"Güvenlik","color":"blue"},{"id":"jwt","name":"JWT","color":"pink"},{"id":"jwe","name":"JWE"},{"id":"graphql","name":"GraphQL","color":"pink"},{"id":"programming","name":"Programlama","color":"brown"}]},"posts":[{"id":"spring-boot-graphql-jwe-authentication","title":"Spring Boot GraphQL JWE Kimlik Doğrulama","date":"2025-05-17","summary":"Stateless şifreli JWT’ler (JWE) kullanarak Spring Boot GraphQL API’lerinizi nasıl güvenli hale getirirken, kullanıcı kimliklerini ve rolleri JPA destekli bir veritabanında nasıl saklayacağınızı öğrenin.","thumbnail":"/images/spring-boot-graphql-jwe-auth-thumbnail.webp","readingTime":"5 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"security","name":"Güvenlik","color":"blue"},{"id":"jwt","name":"JWT","color":"pink"},{"id":"jwe","name":"JWE"},{"id":"graphql","name":"GraphQL","color":"pink"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-jwe-authentication-with-jpa","title":"Spring Boot JPA ile JWE Kimlik Doğrulaması","date":"2025-05-11","summary":"Stateless şifreli JWT’ler (JWE) kullanarak Spring Boot API’lerinizi güvenli hale getirirken, kullanıcı kimliklerini ve rolleri JPA destekli bir veritabanında nasıl saklayacağınızı öğrenin.","thumbnail":"/images/spring-boot-jwe-auth-with-jpa-thumbnail.webp","readingTime":"5 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"security","name":"Güvenlik","color":"blue"},{"id":"jwt","name":"JWT","color":"pink"},{"id":"jwe","name":"JWE","color":"orange"},{"id":"jpa","name":"JPA","color":"blue"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-ldap-jwe-authentication","title":"Spring Boot LDAP ve JWE Kimlik Doğrulama","date":"2025-05-10","summary":"LDAP kimlik doğrulama ve JWE şifreli JWT’lerle Spring Boot API’lerinizi external directory entegrasyonu ve token gizliliği ile nasıl güvene alacağınızı öğrenin.","thumbnail":"/images/spring-boot-ldap-jwe-auth-thumbnail.webp","readingTime":"5 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"security","name":"Güvenlik","color":"blue"},{"id":"jwt","name":"JWT","color":"pink"},{"id":"jwe","name":"JWE","color":"orange"},{"id":"ldap","name":"LDAP","color":"red"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-jwe-authentication","title":"Spring Boot JWE Kimlik Doğrulama","date":"2025-05-03","summary":"JWT’lerinizi JWE ile şifreleyerek gizlilik ve bütünlüğü sağlamak için Spring Boot API’lerinizi nasıl güvence altına alacağınızı öğrenin.","thumbnail":"/images/spring-boot-jwe-auth-thumbnail.webp","readingTime":"5 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"security","name":"Güvenlik","color":"blue"},{"id":"jwt","name":"JWT","color":"pink"},{"id":"jwe","name":"JWE","color":"orange"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-http-interface-client","title":"Spring Boot HTTP Interface Client","date":"2025-04-27","summary":"Deklaratif, tip güvenli HTTP çağrıları için Spring Boot 3.2+ HTTP Interface Client nasıl kullanılır öğrenin.","thumbnail":"/images/spring-boot-http-interface-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"rest-api","name":"REST API","color":"blue"},{"id":"rest-client","name":"Rest Client","color":"orange"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-async-tasks-virtual","title":"Spring Boot Sanal Thread’li Asenkron Görevler","date":"2025-04-26","summary":"Spring Boot’ta JDK 21 sanal thread’leri ve `@Async` anotasyonunu kullanarak hafif ve ölçeklenebilir asenkron görevleri nasıl oluşturacağınızı öğrenin.","thumbnail":"/images/spring-boot-async-virtual-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"async-tasks","name":"Asenkron Görevler","color":"blue"},{"id":"virtual-thread","name":"Sanal Thread","color":"orange"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-ai","title":"Spring Boot AI Entegrasyonu","date":"2025-04-23","summary":"Modüler, taşınabilir ve gözlemlenebilir AI iş akışları için Spring AI kullanarak Spring Boot uygulamalarına AI modellerini nasıl entegre edeceğinizi öğrenin.","thumbnail":"/images/spring-boot-ai-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"spring-ai","name":"Spring AI","color":"orange"},{"id":"ai","name":"Yapay Zeka","color":"pink"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-jpa-auditing","title":"Spring Boot JPA Auditing","date":"2025-04-10","summary":"Spring Boot uygulamalarında JPA Auditing ile oluşturulma/değiştirilme tarihlerini ve kullanıcılarını otomatik olarak nasıl yakalayacağınızı öğrenin.","thumbnail":"/images/spring-boot-jpa-auditing-thumbnail.webp","readingTime":"1 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"spring-data","name":"Spring Data","color":"yellow"},{"id":"jpa","name":"JPA","color":"blue"},{"id":"auditing","name":"Auditing","color":"orange"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-tdd","title":"Spring Boot ile Test Odaklı Geliştirme (TDD)","date":"2025-04-09","summary":"Spring Boot ile TDD yaklaşımını uygulamayı; önce test yazarak, iş mantığını geliştirerek ve testlerle kaliteyi garanti altına alarak öğrenin.","thumbnail":"/images/spring-boot-tdd-thumbnail.webp","readingTime":"1 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"tdd","name":"TDD","color":"blue"},{"id":"testing","name":"Test","color":"orange"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-circuit-breaker","title":"Spring Boot Circuit Breaker","date":"2025-03-13","summary":"Spring Boot uygulamalarında Circuit Breaker kullanımını öğrenerek mikro hizmetlerin dayanıklılığını artırın.","thumbnail":"/images/spring-boot-circuit-breaker-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"spring-cloud","name":"Spring Cloud","color":"pink"},{"id":"circuit-breaker","name":"Circuit Breaker","color":"blue"},{"id":"microservice","name":"Mikroservis","color":"orange"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-eureka-server","title":"Spring Boot Eureka Server","date":"2025-02-23","summary":"Mikro hizmet mimarisinde servis keşfi için Spring Boot Eureka serverın nasıl kurulacağını ve yapılandırılacağını öğrenin.","thumbnail":"/images/spring-boot-eureka-server-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"spring-cloud","name":"Spring Cloud","color":"pink"},{"id":"eureka-server","name":"Eureka Server","color":"blue"},{"id":"microservice","name":"Mikroservis","color":"orange"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-config-server","title":"Spring Boot Config Server","date":"2025-02-22","summary":"Spring Boot Config Server kullanarak merkezi yapılandırma yönetimini nasıl gerçekleştireceğinizi öğrenin.","thumbnail":"/images/spring-boot-config-server-thumbnail.webp","readingTime":"4 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"spring-cloud","name":"Spring Cloud","color":"pink"},{"id":"config-server","name":"Config Server","color":"blue"},{"id":"microservice","name":"Mikroservis","color":"orange"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-docker","title":"Spring Boot Docker Entegrasyonu","date":"2025-02-21","summary":"Spring Boot uygulamalarını Docker kullanarak Buildpacks ve Jib ile nasıl oluşturup dağıtabileceğinizi öğrenin.","thumbnail":"/images/spring-boot-docker-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"docker","name":"Docker","color":"blue"},{"id":"containerization","name":"Konteynerizasyon","color":"orange"},{"id":"jib","name":"Jib","color":"pink"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-kubernetes","title":"Spring Boot Kubernetes Entegrasyonu","date":"2025-02-21","summary":"Spring Boot uygulamalarını Kubernetes üzerinde nasıl ölçeklenebilir ve konteyner tabanlı olarak dağıtabileceğinizi öğrenin.","thumbnail":"/images/spring-boot-kubernetes-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"kubernetes","name":"Kubernetes","color":"blue"},{"id":"microservice","name":"Mikroservis","color":"orange"},{"id":"containerization","name":"Konteynerizasyon","color":"pink"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-async-tasks","title":"Spring Boot Asenkron Görevler","date":"2025-02-20","summary":"Spring Boot ile @Async kullanarak görevleri ana threadi engellemeden asenkron olarak nasıl çalıştıracağınızı öğrenin.","thumbnail":"/images/spring-boot-async-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"async-tasks","name":"Asenkron Görevler","color":"blue"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-scheduled-tasks","title":"Spring Boot Planlanmış Görevler","date":"2025-02-20","summary":"Spring Boot ile @Scheduled anotasyonunu kullanarak belirli aralıklarla veya cron ifadeleriyle arka plan görevlerini nasıl çalıştıracağınızı öğrenin.","thumbnail":"/images/spring-boot-scheduled-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"scheduled-tasks","name":"Planlanmış Görevler","color":"blue"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-reactive-programming","title":"Spring Boot Reaktif Programlama","date":"2025-02-19","summary":"Spring Boot ile Project Reactor ve WebFlux kullanarak yüksek performanslı, eşzamanlı işleme sahip reaktif uygulamalar oluşturmayı öğrenin.","thumbnail":"/images/spring-boot-reactive-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"reactive-programming","name":"Reaktif Programlama","color":"blue"},{"id":"webflux","name":"Spring WebFlux","color":"orange"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-graalvm","title":"Spring Boot ile GraalVM Native Uygulama","date":"2024-12-28","summary":"Spring Boot uygulamalarınızı GraalVM native imajı olarak derleyerek daha hızlı başlatma süreleri ve azaltılmış kaynak kullanımı elde etmeyi öğrenin.","thumbnail":"/images/spring-boot-graalvm-thumbnail.webp","readingTime":"2 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"graalvm","name":"GraalVM","color":"pink"},{"id":"native-image","name":"Native İmaj","color":"orange"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"spring-boot-kafka","title":"Spring Boot ile Kafka Entegrasyonu","date":"2024-12-25","summary":"Spring Boot uygulamanızın Kafka topicleri aracılığıyla JSON mesajları göndermesini ve tüketmesini nasıl entegre edeceğinizi öğrenin.","thumbnail":"/images/spring-boot-kafka-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"kafka","name":"Kafka","color":"orange"},{"id":"messaging","name":"Mesajlaşma","color":"brown"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"spring-boot-redis-caching","title":"Spring Boot ile Redis Önbellekleme","date":"2024-12-22","summary":"Spring Boot uygulamanıza Redis önbellekleme uygulayarak performansını ve verimliliğini artırmayı öğrenin.","thumbnail":"/images/spring-boot-redis-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"redis","name":"Redis","color":"orange"},{"id":"caching","name":"Önbellekleme","color":"brown"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"spring-boot-openapi","title":"Spring Boot ile OpenAPI","date":"2024-12-20","summary":"SpringDoc kullanarak Spring Boot uygulamanızda OpenAPI entegrasyonu ile API dokümantasyonu ve test yöntemlerini öğrenin.","thumbnail":"/images/spring-boot-openapi-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"openapi","name":"OpenAPI","color":"orange"},{"id":"documentation","name":"Dokümantasyon","color":"brown"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"spring-boot-clean-coding","title":"Spring Boot Temiz Kodlama Pratikleri","date":"2024-12-19","summary":"Spring Boot projelerinde temiz kodlama ilkelerini uygulamayı öğrenin. En iyi uygulamalar, örnekler ve Java'da Lombok ile Kotlin temiz kodlama tekniklerinin faydaları.","thumbnail":"/images/spring-boot-clean-coding-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"clean-coding","name":"Temiz Kodlama","color":"orange"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"spring-boot-devtools","title":"Spring Boot DevTools","date":"2024-12-19","summary":"Spring Boot DevTools ile hızlı geliştirme sürecinizi nasıl hızlandırabileceğinizi keşfedin. Canlı yeniden yükleme, önbellekleme ve hata ayıklama ipuçları içerir.","thumbnail":"/images/spring-boot-devtools-thumbnail.webp","readingTime":"2 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"devtools","name":"Geliştirme Araçları","color":"orange"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"spring-boot-actuator","title":"Spring Boot Actuator","date":"2024-12-18","summary":"Spring Boot Actuator kullanarak uygulamalarınızı izleme ve yönetme. Endpointler, özelleştirme ve güvenlik örneklerini içerir.","thumbnail":"/images/spring-boot-actuator-thumbnail.webp","readingTime":"2 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"actuator","name":"Actuator","color":"orange"},{"id":"monitoring","name":"İzleme","color":"purple"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"spring-boot-aop","title":"Spring Boot ile Aspect-Oriented Programming (AOP)","date":"2024-12-18","summary":"Spring Boot ile AOP uygulamasını nasıl yapacağınızı öğrenin. Java ve Kotlin örnekleri ile temel kavramlar ve uygulamalar.","thumbnail":"/images/spring-boot-aop-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"aop","name":"AOP","color":"orange"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"spring-boot-di","title":"Spring Boot ile Dependency Injection","date":"2024-12-18","summary":"Spring Boot ile Bağımlılık Enjeksiyonu (Dependency Injection - DI) nasıl çalışır? Java ve Kotlin örnekleriyle temel kavramlar, anotasyonlar ve pratik kullanım senaryolarını öğrenin.","thumbnail":"/images/spring-boot-di-thumbnail.webp","readingTime":"2 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"dependency-injection","name":"Bağımlılık Enjeksiyonu","color":"orange"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"object-relational-mapping","title":"Object-Relational Mapping (ORM)","date":"2024-12-16","summary":"Spring Boot kullanarak Java, Kotlin ve Go (Gin) ile PostgreSQL entegrasyonu ve temel CRUD işlemlerini içeren bir ORM tabanlı uygulamanın nasıl kurulacağını öğrenin.","thumbnail":"/images/orm-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"go","name":"Go","color":"brown"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"gin","name":"Gin","color":"green"},{"id":"orm","name":"ORM","color":"orange"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"rest-api-input-validation","title":"REST API’lerde Girdi Doğrulama","date":"2024-12-15","summary":"Spring Boot ve Gin gibi framework’leri kullanarak Java, Kotlin ve Go ile REST API’lerde girdi doğrulamasını nasıl uygulayacağnızı öğrenin. Anotasyonlar, özel doğrulama ve hata yönetimi örnekleri içerir.","thumbnail":"/images/input-validation-thumbnail.webp","readingTime":"4 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"go","name":"Go","color":"brown"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"gin","name":"Gin","color":"green"},{"id":"validation","name":"Doğrulama","color":"orange"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"spring-boot-graphql","title":"Spring GraphQL ile API Oluşturma","date":"2024-12-15","summary":"Java ve Kotlin kullanarak Spring for GraphQL ile GraphQL API\\u201leri nasıl oluşturacağınızı öğrenin. Şema oluşturma, sorgu işleme ve entegrasyonu içerir.","thumbnail":"/images/spring-boot-graphql-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"graphql","name":"GraphQL","color":"pink"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"golang-gin-first-application","title":"Gin - İlk Uygulama","date":"2024-12-14","summary":"Sıfırdan ilk Golang Gin uygulamanızı oluşturmanıza yardımcı olacak, yeni başlayanlar için rehber. Temelleri öğrenin ve Gin ile yolculuğunuza başlayın.","thumbnail":"/images/golang-gin-first-app-thumbnail.webp","readingTime":"1 dk okuma","topics":[{"id":"go","name":"Go","color":"brown"},{"id":"gin","name":"Gin","color":"green"},{"id":"beginner-guide","name":"Başlangıç Rehberi","color":"orange"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"building-a-rest-api-with-spring-boot","title":"Spring Boot ile REST API Geliştirme","date":"2024-12-10","summary":"Spring Boot kullanarak REST API nasıl geliştirilir? HTTP metodları, JSON veri işleme, Lombok entegrasyonu ve curl ile test etme.","thumbnail":"/images/spring-boot-rest-api-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"rest-api","name":"REST API","color":"orange"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"spring-boot-first-application","title":"Spring Boot - İlk Uygulama","date":"2024-12-10","summary":"Spring Boot ile ilk uygulamanızı sıfırdan oluşturmak için başlangıç seviyesinde bir rehber. Temel bilgileri öğrenin ve Spring Boot ile yolculuğunuza başlayın.","thumbnail":"/images/spring-boot-first-app-thumbnail.webp","readingTime":"2 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"beginner-guide","name":"Başlangıç Rehberi","color":"orange"},{"id":"programming","name":"Programlama","color":"blue"}]}]},"__N_SSG":true}