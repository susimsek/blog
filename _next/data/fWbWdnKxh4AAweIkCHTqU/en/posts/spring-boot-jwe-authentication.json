{"pageProps":{"_nextI18Next":{"initialI18nStore":{"en":{"common":{"common":{"siteName":"≈ûuayb ≈ûim≈üek's Blog","language":"Language","theme":"Theme","header":{"logoAlt":"≈ûuayb's Blog Logo","title":"≈ûuayb's Blog","menu":{"home":"Home","about":"About","contact":"Contact","search":"Search"},"themeToggle":"Toggle Theme","theme":{"light":"Light Mode","dark":"Dark Mode"}},"sidebar":{"title":"Topics","loading":"Loading more topics..."},"footer":{"text":"¬© {{year}} ≈ûuayb's Blog. All rights reserved."},"pagination":{"pageSize":"Page size","showingResults":"Showing {{start}}‚Äì{{end}} of {{total}} results"},"searchBar":{"placeholder":"Search"},"sort":{"newest":"Newest First","oldest":"Oldest First"},"contactInfo":{"email":"Email"},"codeBlock":{"copy":"Copy","copied":"Copied!"},"selected":"Selected","selectAll":"Select All","clearAll":"Clear All","noResults":"No results found","andMore":"and {{count}} more","datePicker":{"selectDate":"Select Date","today":"Today","yesterday":"Yesterday","last7Days":"Last 7 Days","last30Days":"Last 30 Days","customDate":"Custom Date","startDatePlaceholder":"Start Date","endDatePlaceholder":"End Date","startDateLabel":"Start Date","endDateLabel":"End Date","clearSelection":"Clear Selection","applySelection":"Apply Selection"},"validation":{"required":"This field is required.","minlength":"This field must be at least {{ min }} characters.","maxlength":"This field cannot be longer than {{ max }} characters.","min":"This field should be at least {{ min }}.","max":"This field cannot be more than {{ max }}.","minbytes":"This field should be at least {{ min }} bytes.","maxbytes":"This field cannot be more than {{ max }} bytes.","pattern":"This field should match the pattern for {{ pattern }}.","number":"This field should be a number.","datetimelocal":"This field should be a date and time.","patternLogin":"This field can only contain letters, digits, and e-mail addresses.","email":"Please enter a valid email address.","url":"Please enter a valid URL.","alpha":"This field should only contain letters.","alphanumeric":"This field should only contain letters and numbers.","passwordStrength":"Password must contain at least 8 characters, including an uppercase letter, a number, and a special character.","startDateAfterEndDate":"Start date cannot be after end date.","endDateBeforeStartDate":"End date cannot be before start date."},"viewAllResults":"See all results for \"{{query}}\""}},"post":{"post":{"readMore":"Read More","noPostsFound":"No posts found."}}}},"initialLocale":"en","ns":["common","post"],"userConfig":{"debug":false,"i18n":{"defaultLocale":"en","locales":["en","tr"]},"localePath":"/home/circleci/project/public/locales","default":{"debug":false,"i18n":{"defaultLocale":"en","locales":["en","tr"]},"localePath":"/home/circleci/project/public/locales"}}},"post":{"contentHtml":"\nSpring Boot lets you combine JWS signing with JWE encryption to protect both the integrity and confidentiality of your JWTs in Spring-powered microservices.\n\n---\n\n## üåü Why Use JWE Authentication?\n\n- **Integrity**: Ensure tokens are signed (JWS) and tamper-evident.\n- **Confidentiality**: Encrypt sensitive claims so only holders of the private key can read them (JWE).\n- **Standards-based**: Built on the JOSE (JWS, JWE) specifications.\n- **Spring Support**: Spring Security‚Äôs OAuth2 Resource Server handles JWE+JWS seamlessly.\n\n---\n\n## üåü Prerequisites\n\n- ‚òï **Java Development Kit (JDK) 17** or higher\n- üì¶ **Spring Boot 3.2+**\n- üî§ **IDE** (IntelliJ IDEA, Eclipse)\n\n---\n\n## üõ†Ô∏è Step 1: Add Dependencies\n\nInclude these in your `pom.xml` or `build.gradle` file.\n\n**Maven:**\n\n```xml\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<dependency>\n  <groupId>org.springframework.security</groupId>\n  <artifactId>spring-security-oauth2-resource-server</artifactId>\n</dependency>\n```\n\n**Gradle:**\n\n```groovy\nimplementation 'org.springframework.boot:spring-boot-starter-web'\nimplementation 'org.springframework.security:spring-security-oauth2-resource-server'\n```\n\n---\n\n## üõ†Ô∏è Step 2: Keys Configuration\n\nDefine RSA keys and user credentials in `application.yml`:\n\n```yaml\nsecurity:\n  admin:\n    username: admin\n    password: adminpass\n  user:\n    username: user\n    password: userpass\n  jwt:\n    issuer: demo-issuer\n    expiration-duration: 3600s\n    signing:\n      key-id: signing-key\n      public-key: |-\n        -----BEGIN PUBLIC KEY-----\n        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjZEcz5itWkDGOSqZdB5P\n        JE0ccOCckskp0hN3kQbT1qnv+9/k66jlWgVi4HSTppwdNF/Ylu5u541Qj+Okyg+u\n        8o2PvKo5CfgvTDsFLTrZHUXU6hCSGatLAQoeN6lT8wzov2r4DFecXrIqcO6SvMB5\n        ecPqsfiTi4trsNKgJ4cWS6gILH62ISd1ipUadfpnUzDMO1OulV0CJNV6bcBk7Es9\n        RW6AHfg9j8osSanpwvRM4MJkB0SRxYUnrN9faGpkBZISZJ8TShhaTHEGfSNgKe5y\n        8iu+AMGGZu8DYczVmqS3Ske1fq6y5HEGCma7Mo019GmwKeHBo1obuET6cZRygj4y\n        twIDAQAB\n        -----END PUBLIC KEY-----\n      private-key: |-\n        -----BEGIN PRIVATE KEY-----\n        MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCNkRzPmK1aQMY5\n        Kpl0Hk8kTRxw4JySySnSE3eRBtPWqe/73+TrqOVaBWLgdJOmnB00X9iW7m7njVCP\n        46TKD67yjY+8qjkJ+C9MOwUtOtkdRdTqEJIZq0sBCh43qVPzDOi/avgMV5xesipw\n        7pK8wHl5w+qx+JOLi2uw0qAnhxZLqAgsfrYhJ3WKlRp1+mdTMMw7U66VXQIk1Xpt\n        wGTsSz1FboAd+D2PyixJqenC9EzgwmQHRJHFhSes319oamQFkhJknxNKGFpMcQZ9\n        I2Ap7nLyK74AwYZm7wNhzNWapLdKR7V+rrLkcQYKZrsyjTX0abAp4cGjWhu4RPpx\n        lHKCPjK3AgMBAAECggEABMo/sNCIMREXA/EqjxDFecN4LmOTOK5A0YBiH9Cc01sd\n        qSaavtSQqhqbjV+0bUNEA7UohXbc3s3bx3qa5VFhiIh8sBQMaQdyRkCK/MxMc16d\n        BSx5XQ/8MjVO73A1zHgH2g47BWPjgRrDL94KrgNPOO0FoG76QxL9GlcOHzhFa1rf\n        xbb2auLBtflKy+5TZNnB/sbFC9ISpWywzfblD2Fsvxupl0vNWtA0Y2rPbKMZRnY+\n        V6NC38yxW3HHAdWQRYLGOitM59I0HBgnjQKzTBNIsjPnJA2BSZvMBtQ1e3RQV0qE\n        8VVoktZ8A0KDUxqdKWYlGYAY5hIw1y3UUsPRUbS3fQKBgQDAZehu+Kb5Sw+h00Qu\n        vViNHDvi0PwmhQrHVpgjrppCnWsTk6FJFm+EBLY+87usXuRCnfZ1semb6P+yjLh2\n        bJ9IXIrFAztcyE+7eZfn0H7mHA7E2ICKTjNdKbjy8kHViHpgdXREnAOrFTTk/BqW\n        dq+weG2OuxYczWsY4XliWaVyiwKBgQC8XYExpSmoyI37o+jr9405k30tbGUw4X+/\n        xYOvSUuafI8IOSLfKTpsvkMN3hxpJO6apIRAjOALbotKUA5FrHQPenuBWOr3mBJT\n        euLiaWphqU8YN5dbNd+JhC/Jh5DLhY5FpB2Fv2MKSoF7+onpjDy9pEU5aReeBB0v\n        ekUw4nWiBQKBgHxyrnjxP1frFG5xMB4nfZqw04+v7BmiXsl3mqsh6kgCeNtN17pl\n        17YGMjfgAdnJ+02XzW5tqRSfDp3YZgy7z//HVD+BCqnGK8SxLu/ULfD73xW2kNZl\n        JNYzAZ2r06eiQr4X2x/x5nGIIxGmfDAtDxFPpFX5b6ErwgVy+sgCAoFnAoGAWSpu\n        EMEdQk+FnnwNsz2g9YNSuyDXmdb08SOfXWd1yXBzCLJ7RmYuyPEbrsHYcxFPfZap\n        ICFPoTm35/qTdvnWiskxE56yw3eSHUBLjF/YQtixn0YZeMy8v0z6jgyFR0I2gdLZ\n        QsnBKUrxlm2XwR1oV2Eef7m2u085PZNEk4pvor0CgYA6n060r48/CgRVslAeGder\n        fZ3n+2ru8q2UVB38evepjLifn5+tKdFzZ7/NckXMC0NOVzm74qG46VFLMw5TtyT4\n        /hRvGSYxA6dMjXy+tcrAns9Isrz2PnYFntlbhU6hw0um809tFunbvITfyeOjAsDW\n        stC4thnhzXXT1Y3RfFtYEg==\n        -----END PRIVATE KEY-----\n    encryption:\n      key-id: encryption-key\n      public-key: |-\n        -----BEGIN PUBLIC KEY-----\n        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtU7Vu4tML8qg9BISaUH0\n        BTU0+qkHJS3TUl3R0hEPttZJGf8EgT7bpWqRjdhMC2SYt2ifNF82EgMo/eva1rLn\n        wYtCsxjJ7oB4U2m16/JKHtphmMUGhSLgbp+Y8pGAQ+P6u4HLlI0qbL92Syb6QCTr\n        nYIlzZ2uUAvUQg/SbuAvdS4kdauZtpMNbhryusMVvILVBC5yUhfLJAkjbU3qWo/n\n        2NKPr4kjwwFh6FaAf0HLsXCFmJbPPok6WMZeDqPORPZCt5gU2t04fS7s/2SSbhQ/\n        i+7yyT4pl44cUlNLLN3Qo73sai5H90q7Dvmk3M5/YMJB0Ueyb705LHyOO5xA618s\n        qQIDAQAB\n        -----END PUBLIC KEY-----\n      private-key: |-\n        -----BEGIN PRIVATE KEY-----\n        MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC1TtW7i0wvyqD0\n        EhJpQfQFNTT6qQclLdNSXdHSEQ+21kkZ/wSBPtulapGN2EwLZJi3aJ80XzYSAyj9\n        69rWsufBi0KzGMnugHhTabXr8koe2mGYxQaFIuBun5jykYBD4/q7gcuUjSpsv3ZL\n        JvpAJOudgiXNna5QC9RCD9Ju4C91LiR1q5m2kw1uGvK6wxW8gtUELnJSF8skCSNt\n        Tepaj+fY0o+viSPDAWHoVoB/QcuxcIWYls8+iTpYxl4Oo85E9kK3mBTa3Th9Luz/\n        ZJJuFD+L7vLJPimXjhxSU0ss3dCjvexqLkf3SrsO+aTczn9gwkHRR7JvvTksfI47\n        nEDrXyypAgMBAAECggEAREnJHrY8n9OGA+e6n4KD0mJT7gUz98Dm0yMbIC/k50yW\n        hAAVRkjSmd8lq3NIURI2ov342NTznJ0sF1d6OVtxBujY2nP/uqEQsPoj1xaO7Ef8\n        cnnjFsooFgJurQ44bVm02mLstqrky8jhWTT5FKfTRqP6cRNu0B9kdu1WqQQvW8a/\n        C8xD8XUFzzJFQsEstJ076NjlZNH3EeqFiLxyVdV7tPEJRnOe2V2BAAgda3ByA6Jc\n        Nd4xYHTVr5rZ+KES9gaAgb86+S7hNigsxz5Gp58NimLEyz1Qd+d9QCgPRgKOV5Uq\n        0ci6c28ZrxW9wa/2CGCpoow1V7hRy1fZ24g2Tz91cQKBgQDbSdP/FQYuem0pUf8u\n        mA/niEC8Jz30FW3ix5aqbQ8YRudK48Xy8F7AWnlS0wT2k/Xaeppn9YSPK4HlsNk2\n        1gnpNfzdqXpJQtuxcPPeFNzUdXzBrsLXYqtlhOX/afrzqMhp73gkqoxXtqwD7BqN\n        VfMcVXsWrEZQrRPBn/RUnnLdJwKBgQDTqUGupm93UlhoPgLXHGF/seQwPPHcU6lS\n        SS9l512Ie21B+vZecgO4r77BXJwbY4rZVA5/m+wrsNmsT2f8yfdbs84cBDDWiKy5\n        t2Um8zrus+BCIffxc9Fck9/htK33jLLcYwdSAm3a9pJxR9f/kAdredSTGBNJ3W/2\n        rfh3cdNprwKBgDi7WfBFRSsjGzi0cPth9cNlubGzyVBrdtlT34PJ4Tzboxz53o1i\n        aHEFNxwZYdBVKSbTzzyUBS5xCBMfdKK+LyQ5hmjmXq+zb1jxqvXKmfMRTixhhSDp\n        8wO5pTM1/Omqwea+QGvj/5j1tnzxSVFFajbrWoPcH/jhPho6wqBducPDAoGBALOJ\n        MEOavZXy7TaO0w3v7uvH0wzvxR/kfw1jMqc3l2j7ePOskmoOQAXaXO3bRjcdOlua\n        Jyoq8islOZ4lRMlx7zWD0OKG035GNGzbmRtu2aA8R48RDSVr3jyu2gqznZULbXPv\n        M/hmQxSmbhVUoW0PmJubnaqfk0zmXeBaNRXsIS3VAoGBALdsAtqR23PVeL6sYj2l\n        dRNTDXpfvjFqJ5NThRO/4mT0CrPHQVj+Mz2bTc/Dxiwi8s8m3L+g23i3hodh/QMb\n        Iz+UbcJZBGAKsFbPKGOtj6Bi07y/L11mcuNJzOWe61/JbVmJss0s+N/v3XucK/Ge\n        CUaGOccsMO221v6JoBh9J3Hz\n        -----END PRIVATE KEY-----\n```\n\n---\n\n## üìã Step 3: Security Configuration\n\nIn this section, we define the beans and properties required to load credentials, RSA keys, and HTTP security filters for JWE-based authentication:\n\n- **AdminProperties**: Loads admin username and password from application properties.\n- **UserProperties**: Loads normal user credentials from application properties.\n- **JwtProperties**: Configures JWT issuer, expiration, and signing/encryption key pairs.\n- **SecurityJwtConfig**: Builds RSA JWKs, JWT encoder/decoder, authentication converter, and token resolver.\n- **SecurityConfig**: Defines in-memory users and the stateless security filter chain with route authorization.\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### AdminProperties\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootjwedemo.config;\n\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@ConfigurationProperties(prefix = \"security.admin\")\n@Data\npublic class AdminProperties {\n    private String username;\n    private String password;\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootjwedemo.config\n\nimport org.springframework.boot.context.properties.ConfigurationProperties\nimport org.springframework.context.annotation.Configuration\n\n@Configuration\n@ConfigurationProperties(prefix = \"security.admin\")\nclass AdminProperties {\n  lateinit var username: String\n  lateinit var password: String\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### SecurityJwtConfig\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootjwedemo.config;\n\nimport com.nimbusds.jose.EncryptionMethod;\nimport com.nimbusds.jose.JWEAlgorithm;\nimport com.nimbusds.jose.JWSAlgorithm;\nimport com.nimbusds.jose.jwk.JWKSet;\nimport com.nimbusds.jose.jwk.RSAKey;\nimport com.nimbusds.jose.jwk.source.JWKSource;\nimport com.nimbusds.jose.proc.JWEDecryptionKeySelector;\nimport com.nimbusds.jose.proc.JWSVerificationKeySelector;\nimport com.nimbusds.jose.proc.SecurityContext;\nimport com.nimbusds.jwt.proc.DefaultJWTProcessor;\nimport io.github.susimsek.springbootjwedemo.security.CookieBearerTokenResolver;\nimport io.github.susimsek.springbootjwedemo.security.KeyUtils;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.oauth2.jwt.JwtDecoder;\nimport org.springframework.security.oauth2.jwt.JwtEncoder;\nimport org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\nimport org.springframework.security.oauth2.jwt.NimbusJwtEncoder;\nimport org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;\nimport org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;\nimport org.springframework.security.oauth2.server.resource.web.BearerTokenResolver;\n\nimport java.util.List;\n\nimport static io.github.susimsek.springbootjwedemo.security.SecurityUtils.AUTHORITIES_KEY;\n\n@Configuration\npublic class SecurityJwtConfig {\n\n    private final JwtProperties props;\n    public SecurityJwtConfig(JwtProperties props) { this.props = props; }\n\n    @Bean\n    public RSAKey signingKey() throws Exception {\n        return KeyUtils.buildRsaKey(\n            props.getSigning().getPublicKey(),\n            props.getSigning().getPrivateKey(),\n            props.getSigning().getKeyId(),\n            true\n        );\n    }\n\n    @Bean\n    public RSAKey encryptionKey() throws Exception {\n        return KeyUtils.buildRsaKey(\n            props.getEncryption().getPublicKey(),\n            props.getEncryption().getPrivateKey(),\n            props.getEncryption().getKeyId(),\n            false\n        );\n    }\n\n    @Bean\n    public JWKSource<SecurityContext> jwkSource(RSAKey signingKey, RSAKey encryptionKey) {\n        JWKSet jwkSet = new JWKSet(List.of(\n            signingKey,\n            encryptionKey\n        ));\n        return (jwkSelector, context) -> jwkSelector.select(jwkSet);\n    }\n\n    @Bean\n    public JwtDecoder jwtDecoder(JWKSource<SecurityContext> jwkSource) {\n        DefaultJWTProcessor<SecurityContext> jwtProcessor = new DefaultJWTProcessor<>();\n        JWEDecryptionKeySelector<SecurityContext> jweKeySelector =\n            new JWEDecryptionKeySelector<>(\n                JWEAlgorithm.RSA_OAEP_256,\n                EncryptionMethod.A128GCM,\n                jwkSource\n            );\n        jwtProcessor.setJWEKeySelector(jweKeySelector);\n\n        JWSVerificationKeySelector<SecurityContext> jwsKeySelector =\n            new JWSVerificationKeySelector<>(\n                JWSAlgorithm.RS256,\n                jwkSource\n            );\n        jwtProcessor.setJWSKeySelector(jwsKeySelector);\n        jwtProcessor.setJWTClaimsSetVerifier((claims, context) -> {});\n\n        return new NimbusJwtDecoder(jwtProcessor);\n    }\n\n    @Bean\n    public JwtEncoder jwtEncoder(JWKSource<SecurityContext> jwkSource) {\n        return new NimbusJwtEncoder(jwkSource);\n    }\n\n    @Bean\n    public JwtAuthenticationConverter jwtAuthenticationConverter() {\n        JwtGrantedAuthoritiesConverter converter = new JwtGrantedAuthoritiesConverter();\n        converter.setAuthorityPrefix(\"\");\n        converter.setAuthoritiesClaimName(AUTHORITIES_KEY);\n\n        JwtAuthenticationConverter authConverter = new JwtAuthenticationConverter();\n        authConverter.setJwtGrantedAuthoritiesConverter(converter);\n        return authConverter;\n    }\n\n    @Bean\n    public BearerTokenResolver bearerTokenResolver() {\n        CookieBearerTokenResolver resolver = new CookieBearerTokenResolver();\n        resolver.setAllowUriQueryParameter(false);\n        resolver.setAllowFormEncodedBodyParameter(false);\n        resolver.setAllowCookie(true);\n        return resolver;\n    }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootjwedemo.config\n\nimport com.nimbusds.jose.EncryptionMethod\nimport com.nimbusds.jose.JWEAlgorithm\nimport com.nimbusds.jose.JWSAlgorithm\nimport com.nimbusds.jose.jwk.JWKSet\nimport com.nimbusds.jose.jwk.RSAKey\nimport com.nimbusds.jose.jwk.source.JWKSource\nimport com.nimbusds.jose.proc.JWEDecryptionKeySelector\nimport com.nimbusds.jose.proc.JWSVerificationKeySelector\nimport com.nimbusds.jose.proc.SecurityContext\nimport com.nimbusds.jwt.proc.DefaultJWTProcessor\nimport io.github.susimsek.springbootjwedemo.security.CookieBearerTokenResolver\nimport io.github.susimsek.springbootjwedemo.security.KeyUtils\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\nimport org.springframework.security.oauth2.jwt.JwtDecoder\nimport org.springframework.security.oauth2.jwt.JwtEncoder\nimport org.springframework.security.oauth2.jwt.NimbusJwtDecoder\nimport org.springframework.security.oauth2.jwt.NimbusJwtEncoder\nimport org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter\nimport org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter\nimport org.springframework.security.oauth2.server.resource.web.BearerTokenResolver\n\n@Configuration\nclass SecurityJwtConfig(private val props: JwtProperties) {\n\n    @Bean\n    @Throws(Exception::class)\n    fun signingKey(): RSAKey =\n        KeyUtils.buildRsaKey(\n            props.signing.publicKey,\n            props.signing.privateKey,\n            props.signing.keyId,\n            true\n        )\n\n    @Bean\n    @Throws(Exception::class)\n    fun encryptionKey(): RSAKey =\n        KeyUtils.buildRsaKey(\n            props.encryption.publicKey,\n            props.encryption.privateKey,\n            props.encryption.keyId,\n            false\n        )\n\n    @Bean\n    fun jwkSource(signingKey: RSAKey, encryptionKey: RSAKey): JWKSource<SecurityContext> {\n        val jwkSet = JWKSet(listOf(signingKey, encryptionKey))\n        return JWKSource { jwkSelector, context -> jwkSelector.select(jwkSet) }\n    }\n\n    @Bean\n    fun jwtDecoder(jwkSource: JWKSource<SecurityContext>): JwtDecoder {\n        val jwtProcessor = DefaultJWTProcessor<SecurityContext>()\n        val jweKeySelector = JWEDecryptionKeySelector(\n            JWEAlgorithm.RSA_OAEP_256,\n            EncryptionMethod.A128GCM,\n            jwkSource\n        )\n        jwtProcessor.jweKeySelector = jweKeySelector\n        val jwsKeySelector = JWSVerificationKeySelector(\n            JWSAlgorithm.RS256,\n            jwkSource\n        )\n        jwtProcessor.jwsKeySelector = jwsKeySelector\n        jwtProcessor.jwtClaimsSetVerifier = { _, _ -> }\n        return NimbusJwtDecoder(jwtProcessor)\n    }\n\n    @Bean\n    fun jwtEncoder(jwkSource: JWKSource<SecurityContext>): JwtEncoder =\n        NimbusJwtEncoder(jwkSource)\n\n    @Bean\n    fun jwtAuthenticationConverter(): JwtAuthenticationConverter {\n        val converter = JwtGrantedAuthoritiesConverter().apply {\n            setAuthorityPrefix(\"\")\n            setAuthoritiesClaimName(AUTHORITIES_KEY)\n        }\n        return JwtAuthenticationConverter().apply {\n            setJwtGrantedAuthoritiesConverter(converter)\n        }\n    }\n\n    @Bean\n    fun bearerTokenResolver(): BearerTokenResolver =\n        CookieBearerTokenResolver().apply {\n            setAllowUriQueryParameter(false)\n            setAllowFormEncodedBodyParameter(false)\n            setAllowCookie(true)\n        }\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### SecurityConfig\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootjwedemo.config;\n\nimport io.github.susimsek.springbootjwedemo.security.AuthoritiesConstants;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.ProviderManager;\nimport org.springframework.security.authentication.dao.DaoAuthenticationProvider;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher;\nimport org.springframework.web.servlet.handler.HandlerMappingIntrospector;\n\nimport static org.springframework.security.config.Customizer.withDefaults;\n\n@Configuration\n@EnableMethodSecurity(securedEnabled = true)\npublic class SecurityConfig {\n\n    @Bean\n    public InMemoryUserDetailsManager userDetailsService(AdminProperties adminProps,\n                                                         UserProperties userProps,\n                                                         PasswordEncoder passwordEncoder) {\n        var admin = User.withUsername(adminProps.getUsername())\n            .password(passwordEncoder.encode(adminProps.getPassword()))\n            .authorities(AuthoritiesConstants.ADMIN)\n            .build();\n\n        var user = User.withUsername(userProps.getUsername())\n            .password(passwordEncoder.encode(userProps.getPassword()))\n            .authorities(AuthoritiesConstants.USER)\n            .build();\n\n        return new InMemoryUserDetailsManager(admin, user);\n    }\n\n    @Bean public PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); }\n\n    @Bean\n    public AuthenticationManager authenticationManager(UserDetailsService uds) {\n        var provider = new DaoAuthenticationProvider();\n        provider.setUserDetailsService(uds);\n        provider.setPasswordEncoder(passwordEncoder());\n        return new ProviderManager(provider);\n    }\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http,\n                                           MvcRequestMatcher.Builder mvc) throws Exception {\n        http\n            .cors(withDefaults())\n            .csrf(AbstractHttpConfigurer::disable)\n            .authorizeHttpRequests(authz ->\n                authz\n                    .requestMatchers(mvc.pattern(\"/*.ico\"), mvc.pattern(\"/*.png\"), mvc.pattern(\"/*.svg\"),\n                        mvc.pattern(\"/*.webapp\")\n                    ).permitAll()\n                    .requestMatchers(\"/actuator/**\").permitAll()\n                    .requestMatchers(\n                        \"/v3/api-docs/**\",\n                        \"/swagger-ui.html\",\n                        \"/swagger-ui/**\"\n                    ).permitAll()\n                    .requestMatchers(mvc.pattern(\"/api/auth/login\")).permitAll()\n                    .requestMatchers(mvc.pattern(\"/api/hello/admin\")).hasAuthority(AuthoritiesConstants.ADMIN)\n                .anyRequest().authenticated()\n            )\n            .sessionManagement(session ->\n                session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\n            .oauth2ResourceServer(oauth2 -> oauth2\n                .jwt(withDefaults())\n            );\n        return http.build();\n    }\n\n    @Bean\n    public MvcRequestMatcher.Builder mvc(HandlerMappingIntrospector introspector) {\n        return new MvcRequestMatcher.Builder(introspector);\n    }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootjwedemo.config\n\nimport io.github.susimsek.springbootjwedemo.security.AuthoritiesConstants\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\nimport org.springframework.security.authentication.AuthenticationManager\nimport org.springframework.security.authentication.ProviderManager\nimport org.springframework.security.authentication.dao.DaoAuthenticationProvider\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity\nimport org.springframework.security.config.http.SessionCreationPolicy\nimport org.springframework.security.core.userdetails.User\nimport org.springframework.security.core.userdetails.UserDetailsService\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder\nimport org.springframework.security.crypto.password.PasswordEncoder\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager\nimport org.springframework.security.web.SecurityFilterChain\nimport org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher\nimport org.springframework.web.servlet.handler.HandlerMappingIntrospector\nimport org.springframework.security.config.Customizer.withDefaults\n\n@Configuration\n@EnableMethodSecurity(securedEnabled = true)\nclass SecurityConfig {\n\n    @Bean\n    fun userDetailsService(\n        adminProps: AdminProperties,\n        userProps: UserProperties,\n        passwordEncoder: PasswordEncoder\n    ): UserDetailsService {\n        val admin = User.withUsername(adminProps.username)\n            .password(passwordEncoder.encode(adminProps.password))\n            .authorities(AuthoritiesConstants.ADMIN)\n            .build()\n        val user = User.withUsername(userProps.username)\n            .password(passwordEncoder.encode(userProps.password))\n            .authorities(AuthoritiesConstants.USER)\n            .build()\n        return InMemoryUserDetailsManager(admin, user)\n    }\n\n    @Bean\n    fun passwordEncoder(): PasswordEncoder = BCryptPasswordEncoder()\n\n    @Bean\n    fun authenticationManager(uds: UserDetailsService): AuthenticationManager {\n        val provider = DaoAuthenticationProvider().apply {\n            setUserDetailsService(uds)\n            setPasswordEncoder(passwordEncoder())\n        }\n        return ProviderManager(provider)\n    }\n\n    @Bean\n    fun filterChain(http: HttpSecurity, mvc: MvcRequestMatcher.Builder): SecurityFilterChain =\n        http.cors(withDefaults())\n            .csrf { it.disable() }\n            .authorizeHttpRequests { authz ->\n                authz\n                    .requestMatchers(mvc.pattern(\"/*.ico\"), mvc.pattern(\"/*.png\"), mvc.pattern(\"/*.svg\"), mvc.pattern(\"/*.webapp\")).permitAll()\n                    .requestMatchers(\"/actuator/**\").permitAll()\n                    .requestMatchers(\"/v3/api-docs/**\", \"/swagger-ui.html\", \"/swagger-ui/**\").permitAll()\n                    .requestMatchers(mvc.pattern(\"/api/auth/login\")).permitAll()\n                    .requestMatchers(mvc.pattern(\"/api/hello/admin\")).hasAuthority(AuthoritiesConstants.ADMIN)\n                    .anyRequest().authenticated()\n            }\n            .sessionManagement { it.sessionCreationPolicy(SessionCreationPolicy.STATELESS) }\n            .oauth2ResourceServer { it.jwt(withDefaults()) }\n            .build()\n\n    @Bean\n    fun mvc(introspector: HandlerMappingIntrospector): MvcRequestMatcher.Builder =\n        MvcRequestMatcher.Builder(introspector)\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### JwtProperties\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootjwedemo.config;\n\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.time.Duration;\n\n@Configuration\n@ConfigurationProperties(prefix = \"security.jwt\")\n@Data\npublic class JwtProperties {\n\n    @Data\n    public static class Pair {\n        private String publicKey;\n        private String privateKey;\n        private String keyId;\n    }\n\n    private Pair signing;\n    private Pair encryption;\n    private String issuer;\n    private Duration expirationDuration;\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootjwedemo.config\n\nimport org.springframework.boot.context.properties.ConfigurationProperties\nimport org.springframework.context.annotation.Configuration\nimport java.time.Duration\n\n@Configuration\n@ConfigurationProperties(prefix = \"security.jwt\")\nclass JwtProperties {\n\n  class Pair {\n    lateinit var publicKey: String\n    lateinit var privateKey: String\n    lateinit var keyId: String\n  }\n\n  lateinit var signing: Pair\n  lateinit var encryption: Pair\n  lateinit var issuer: String\n  lateinit var expirationDuration: Duration\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### UserProperties\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootjwedemo.config;\n\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@ConfigurationProperties(prefix = \"security.user\")\n@Data\npublic class UserProperties {\n    private String username;\n    private String password;\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootjwedemo.config\n\nimport org.springframework.boot.context.properties.ConfigurationProperties\nimport org.springframework.context.annotation.Configuration\n\n@Configuration\n@ConfigurationProperties(prefix = \"security.user\")\nclass UserProperties {\n  lateinit var username: String\n  lateinit var password: String\n}\n```\n\n:::\n\n---\n\n## üîê Step 4: Secure JWE Token Utilities\n\nIn this section, we define the core utility classes and constants needed to generate, encrypt, and resolve JSON Web Encryption (JWE) tokens in your Spring Boot application. These components work together to:\n\n- **AuthoritiesConstants**: Centralize role names with the `ROLE_` prefix.\n- **CookieBearerTokenResolver**: Resolve bearer tokens from Authorization headers or HTTP cookies.\n- **CookieUtils**: Create HTTP-only, secure cookies for access tokens.\n- **JweUtil**: Sign (JWS) and encrypt (JWE) JWTs using RSA keys and Nimbus.\n- **KeyUtils**: Build RSA JWKs from PEM‚Äêencoded key material.\n- **SecurityUtils**: Extract the current user‚Äôs login from the security context.\n\nThese utilities form the foundation for a stateless, JWE‚Äêbased authentication flow in Spring Security.\n\n### AuthoritiesConstants\n\n:::tabs\n@tab Java [icon=java]\n\n```java\n\npackage io.github.susimsek.springbootjwedemo.security;\n\nimport lombok.AccessLevel;\nimport lombok.NoArgsConstructor;\n\n@NoArgsConstructor(access = AccessLevel.PRIVATE)\npublic final class AuthoritiesConstants {\n    public static final String ADMIN = \"ROLE_ADMIN\";\n    public static final String USER = \"ROLE_USER\";\n    public static final String ANONYMOUS = \"ROLE_ANONYMOUS\";\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\n\npackage io.github.susimsek.springbootjwedemo.security\n\nobject AuthoritiesConstants {\n  const val ADMIN = \"ROLE_ADMIN\"\n  const val USER = \"ROLE_USER\"\n  const val ANONYMOUS = \"ROLE_ANONYMOUS\"\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### CookieBearerTokenResolver\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootjwedemo.security;\n\nimport jakarta.servlet.http.Cookie;\nimport jakarta.servlet.http.HttpServletRequest;\nimport lombok.Setter;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.oauth2.core.OAuth2AuthenticationException;\nimport org.springframework.security.oauth2.server.resource.BearerTokenError;\nimport org.springframework.security.oauth2.server.resource.BearerTokenErrors;\nimport org.springframework.security.oauth2.server.resource.web.BearerTokenResolver;\nimport org.springframework.util.StringUtils;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n@Setter\npublic class CookieBearerTokenResolver implements BearerTokenResolver {\n    private static final String ACCESS_TOKEN_PARAMETER_NAME = \"access_token\";\n    private static final Pattern AUTHORIZATION_PATTERN =\n        Pattern.compile(\"^Bearer (?<token>[A-Za-z0-9-._~+/]+=*)$\", Pattern.CASE_INSENSITIVE);\n\n    private boolean allowFormEncodedBodyParameter = false;\n    private boolean allowUriQueryParameter       = false;\n    private boolean allowCookie                  = true;\n    private String  bearerTokenHeaderName       = \"Authorization\";\n    private String  cookieName                  = \"accessToken\";\n\n    @Override\n    public String resolve(HttpServletRequest request) {\n        String headerToken = resolveFromAuthorizationHeader(request);\n        String queryToken  = resolveAccessTokenFromQueryString(request);\n        String bodyToken   = resolveAccessTokenFromBody(request);\n        String cookieToken = (headerToken == null && queryToken == null && bodyToken == null)\n            ? resolveFromCookie(request)\n            : null;\n\n        return resolveToken(headerToken, queryToken, bodyToken, cookieToken);\n    }\n\n    private String resolveFromAuthorizationHeader(HttpServletRequest request) {\n        String authorization = request.getHeader(this.bearerTokenHeaderName);\n        if (!StringUtils.hasText(authorization) || !authorization.toLowerCase().startsWith(\"bearer\")) {\n            return null;\n        }\n        Matcher matcher = AUTHORIZATION_PATTERN.matcher(authorization.trim());\n        if (!matcher.matches()) {\n            BearerTokenError error = BearerTokenErrors.invalidToken(\"Bearer token is malformed\");\n            throw new OAuth2AuthenticationException(error);\n        }\n        return matcher.group(\"token\");\n    }\n\n    private String resolveAccessTokenFromQueryString(HttpServletRequest request) {\n        if (allowUriQueryParameter && HttpMethod.GET.matches(request.getMethod())) {\n            return resolveToken(request.getParameterValues(ACCESS_TOKEN_PARAMETER_NAME));\n        }\n        return null;\n    }\n\n    private String resolveAccessTokenFromBody(HttpServletRequest request) {\n        if (allowFormEncodedBodyParameter\n            && HttpMethod.POST.matches(request.getMethod())\n            && \"application/x-www-form-urlencoded\".equals(request.getContentType())) {\n            return resolveToken(request.getParameterValues(ACCESS_TOKEN_PARAMETER_NAME));\n        }\n        return null;\n    }\n\n    private String resolveFromCookie(HttpServletRequest request) {\n        if (!allowCookie || request.getCookies() == null) {\n            return null;\n        }\n        for (Cookie cookie : request.getCookies()) {\n            if (cookieName.equals(cookie.getName())) {\n                String val = cookie.getValue();\n                return StringUtils.hasText(val) ? val : null;\n            }\n        }\n        return null;\n    }\n\n    private String resolveToken(String... tokens) {\n        String found = null;\n        for (String token : tokens) {\n            if (token == null) continue;\n            if (found != null) {\n                BearerTokenError error = BearerTokenErrors.invalidRequest(\"Found multiple bearer tokens in the request\");\n                throw new OAuth2AuthenticationException(error);\n            }\n            found = token;\n        }\n        if (found != null && found.isBlank()) {\n            BearerTokenError error = BearerTokenErrors.invalidRequest(\"The requested token parameter is an empty string\");\n            throw new OAuth2AuthenticationException(error);\n        }\n        return found;\n    }\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootjwedemo.security\n\nimport jakarta.servlet.http.Cookie\nimport jakarta.servlet.http.HttpServletRequest\nimport org.springframework.http.HttpMethod\nimport org.springframework.security.oauth2.core.OAuth2AuthenticationException\nimport org.springframework.security.oauth2.server.resource.BearerTokenError\nimport org.springframework.security.oauth2.server.resource.BearerTokenErrors\nimport org.springframework.security.oauth2.server.resource.web.BearerTokenResolver\nimport org.springframework.util.StringUtils\nimport java.util.regex.Pattern\n\nclass CookieBearerTokenResolver {\n    var allowFormEncodedBodyParameter: Boolean = false\n    var allowUriQueryParameter: Boolean = false\n    var allowCookie: Boolean = true\n    var bearerTokenHeaderName: String = \"Authorization\"\n    var cookieName: String = \"accessToken\"\n\n    companion object {\n        private const val ACCESS_TOKEN_PARAMETER_NAME = \"access_token\"\n        private val AUTHORIZATION_PATTERN =\n            Pattern.compile(\"^Bearer (?<token>[A-Za-z0-9-._~+/]+=*)$\", Pattern.CASE_INSENSITIVE)\n    }\n\n    fun resolve(request: HttpServletRequest): String? {\n        val header = resolveFromAuthorizationHeader(request)\n        val query  = if (allowUriQueryParameter && HttpMethod.GET.matches(request.method))\n            request.getParameterValues(ACCESS_TOKEN_PARAMETER_NAME)?.let(::resolveToken)\n        else null\n        val body   = if (allowFormEncodedBodyParameter && HttpMethod.POST.matches(request.method)\n            && request.contentType == \"application/x-www-form-urlencoded\")\n            request.getParameterValues(ACCESS_TOKEN_PARAMETER_NAME)?.let(::resolveToken)\n        else null\n        val cookie = if (header == null && query == null && body == null)\n            resolveFromCookie(request)\n        else null\n      return listOf(header, query, body, cookie).filterNotNull().let {\n            if (it.size > 1) throw OAuth2AuthenticationException(BearerTokenErrors.invalidRequest(\"Found multiple bearer tokens\"))\n            it.firstOrNull()?: null\n        }\n    }\n\n    private fun resolveFromAuthorizationHeader(request: HttpServletRequest): String? {\n        val auth = request.getHeader(bearerTokenHeaderName) ?: return null\n        if (!auth.startsWith(\"Bearer \", true)) return null\n        val matcher = AUTHORIZATION_PATTERN.matcher(auth.trim())\n        return if (matcher.matches()) matcher.group(\"token\")\n        else throw OAuth2AuthenticationException(BearerTokenErrors.invalidToken(\"Malformed token\"))\n    }\n\n    private fun resolveFromCookie(request: HttpServletRequest): String? {\n        if (!allowCookie) return null\n        return request.cookies?.firstOrNull { it.name == cookieName }?.value?.takeIf { it.isNotBlank() }\n    }\n\n    private fun resolveToken(tokens: Array<String>): String? {\n        return tokens.filter { it.isNotBlank() }.let {\n            when {\n                it.isEmpty() -> null\n                it.size > 1   -> throw OAuth2AuthenticationException(BearerTokenErrors.invalidRequest(\"Multiple tokens\"))\n                else          -> it[0]\n            }\n        }\n    }\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### CookieUtils\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootjwedemo.security;\n\nimport io.github.susimsek.springbootjwedemo.dto.TokenDTO;\nimport lombok.experimental.UtilityClass;\nimport org.springframework.http.ResponseCookie;\n\n@UtilityClass\npublic class CookieUtils {\n\n    private static final String COOKIE_NAME = \"accessToken\";\n\n    public ResponseCookie createAccessTokenCookie(TokenDTO tokenDto) {\n        return ResponseCookie.from(COOKIE_NAME, tokenDto.accessToken())\n            .httpOnly(true)\n            .secure(true)\n            .path(\"/\")\n            .maxAge(tokenDto.accessTokenExpiresIn())\n            .sameSite(\"Strict\")\n            .build();\n    }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootjwedemo.security\n\nimport io.github.susimsek.springbootjwedemo.dto.TokenDTO\nimport org.springframework.http.ResponseCookie\n\nobject CookieUtils {\n\n  private const val COOKIE_NAME = \"accessToken\"\n\n  fun createAccessTokenCookie(tokenDto: TokenDTO): ResponseCookie {\n    return ResponseCookie.from(COOKIE_NAME, tokenDto.accessToken())\n      .httpOnly(true)\n      .secure(true)\n      .path(\"/\")\n      .maxAge(tokenDto.accessTokenExpiresIn())\n      .sameSite(\"Strict\")\n      .build()\n  }\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### JweUtil\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootjwedemo.security;\n\nimport com.nimbusds.jose.EncryptionMethod;\nimport com.nimbusds.jose.JOSEException;\nimport com.nimbusds.jose.JWEAlgorithm;\nimport com.nimbusds.jose.JWEHeader;\nimport com.nimbusds.jose.JWEObject;\nimport com.nimbusds.jose.Payload;\nimport com.nimbusds.jose.crypto.RSAEncrypter;\nimport com.nimbusds.jose.jwk.RSAKey;\nimport io.github.susimsek.springbootjwedemo.config.JwtProperties;\nimport io.github.susimsek.springbootjwedemo.dto.TokenDTO;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\nimport org.springframework.security.oauth2.jwt.*;\nimport org.springframework.stereotype.Component;\n\nimport java.time.Instant;\nimport java.util.List;\n\nimport static io.github.susimsek.springbootjwedemo.security.SecurityUtils.AUTHORITIES_KEY;\n\n@Component\n@RequiredArgsConstructor\npublic class JweUtil {\n\n    private final JwtEncoder jwtEncoder;\n    private final RSAKey signingKey;\n    private final RSAKey encryptionKey;\n    private final JwtProperties props;\n\n    public TokenDTO generateToken(Authentication authentication) throws JOSEException {\n        String subject = authentication.getName();\n        List<String> roles = authentication.getAuthorities()\n            .stream()\n            .map(GrantedAuthority::getAuthority)\n            .toList();\n\n        Instant now = Instant.now();\n        long expiresIn = props.getExpirationDuration().getSeconds();\n        Instant exp = now.plusSeconds(expiresIn);\n\n        JwtClaimsSet claims = JwtClaimsSet.builder()\n            .issuer(props.getIssuer())\n            .issuedAt(now)\n            .expiresAt(exp)\n            .subject(subject)\n            .claim(AUTHORITIES_KEY, roles)\n            .build();\n\n        JwsHeader jwsHeader = JwsHeader.with(SignatureAlgorithm.RS256)\n            .keyId(signingKey.getKeyID())\n            .build();\n\n        String jws = jwtEncoder\n            .encode(JwtEncoderParameters.from(jwsHeader, claims))\n            .getTokenValue();\n\n        JWEHeader jweHeader = new JWEHeader.Builder(JWEAlgorithm.RSA_OAEP_256, EncryptionMethod.A128GCM)\n            .contentType(\"JWT\")\n            .keyID(encryptionKey.getKeyID())\n            .build();\n\n        JWEObject jweObject = new JWEObject(jweHeader, new Payload(jws));\n        jweObject.encrypt(new RSAEncrypter(encryptionKey.toRSAPublicKey()));\n        String token = jweObject.serialize();\n\n        return new TokenDTO(token, \"Bearer\", expiresIn);\n    }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootjwedemo.security\n\nimport com.nimbusds.jose.EncryptionMethod\nimport com.nimbusds.jose.JOSEException\nimport com.nimbusds.jose.JWEAlgorithm\nimport com.nimbusds.jose.JWEHeader\nimport com.nimbusds.jose.JWEObject\nimport com.nimbusds.jose.Payload\nimport com.nimbusds.jose.crypto.RSAEncrypter\nimport com.nimbusds.jose.jwk.RSAKey\nimport io.github.susimsek.springbootjwedemo.config.JwtProperties\nimport io.github.susimsek.springbootjwedemo.dto.TokenDTO\nimport lombok.RequiredArgsConstructor\nimport org.springframework.security.core.Authentication\nimport org.springframework.security.oauth2.jose.jws.SignatureAlgorithm\nimport org.springframework.security.oauth2.jwt.JwtClaimsSet\nimport org.springframework.security.oauth2.jwt.JwtEncoder\nimport org.springframework.security.oauth2.jwt.JwtEncoderParameters\nimport org.springframework.stereotype.Component\n\nimport java.time.Instant\n\n@Component\n@RequiredArgsConstructor\nclass JweUtil(\n    private val jwtEncoder: JwtEncoder,\n    private val signingKey: RSAKey,\n    private val encryptionKey: RSAKey,\n    private val props: JwtProperties\n) {\n    fun generateToken(authentication: Authentication): TokenDTO {\n        val subject = authentication.name\n        val roles = authentication.authorities.map { it.authority }\n\n        val now = Instant.now()\n        val expiresIn = props.expirationDuration.seconds\n        val exp = now.plusSeconds(expiresIn)\n\n        val claims = JwtClaimsSet.builder()\n            .issuer(props.issuer)\n            .issuedAt(now)\n            .expiresAt(exp)\n            .subject(subject)\n            .claim(AUTHORITIES_KEY, roles)\n            .build()\n\n        val jwsHeader = org.springframework.security.oauth2.jwt.JwsHeader.with(SignatureAlgorithm.RS256)\n            .keyId(signingKey.keyID)\n            .build()\n\n        val jws = jwtEncoder\n            .encode(JwtEncoderParameters.from(jwsHeader, claims))\n            .tokenValue\n\n        val jweHeader = JWEHeader.Builder(JWEAlgorithm.RSA_OAEP_256, EncryptionMethod.A128GCM)\n            .contentType(\"JWT\")\n            .keyID(encryptionKey.keyID)\n            .build()\n\n        val jweObject = JWEObject(jweHeader, Payload(jws))\n        jweObject.encrypt(RSAEncrypter(encryptionKey.toRSAPublicKey()))\n        val token = jweObject.serialize()\n\n        return TokenDTO(token, \"Bearer\", expiresIn)\n    }\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### KeyUtils\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootjwedemo.security;\n\nimport com.nimbusds.jose.JWEAlgorithm;\nimport com.nimbusds.jose.JWSAlgorithm;\nimport com.nimbusds.jose.jwk.KeyUse;\nimport com.nimbusds.jose.jwk.RSAKey;\nimport lombok.experimental.UtilityClass;\n\nimport java.security.KeyFactory;\nimport java.security.interfaces.RSAPrivateKey;\nimport java.security.interfaces.RSAPublicKey;\nimport java.security.spec.PKCS8EncodedKeySpec;\nimport java.security.spec.X509EncodedKeySpec;\nimport java.util.Base64;\n\n@UtilityClass\npublic class KeyUtils {\n    public RSAKey buildRsaKey(\n            String pubPem,\n            String privPem,\n            String kid,\n            boolean forSign\n    ) throws Exception {\n        String pubContent = pubPem\n            .replace(\"-----BEGIN PUBLIC KEY-----\", \"\")\n            .replace(\"-----END PUBLIC KEY-----\", \"\")\n            .replaceAll(\"\\\\s\", \"\");\n        String privContent = privPem\n            .replace(\"-----BEGIN PRIVATE KEY-----\", \"\")\n            .replace(\"-----END PRIVATE KEY-----\", \"\")\n            .replaceAll(\"\\\\s\", \"\");\n\n        byte[] decodedPub = Base64.getDecoder().decode(pubContent);\n        byte[] decodedPriv = Base64.getDecoder().decode(privContent);\n\n        KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n        RSAPublicKey publicKey = (RSAPublicKey) kf.generatePublic(new X509EncodedKeySpec(decodedPub));\n        RSAPrivateKey privateKey = (RSAPrivateKey) kf.generatePrivate(new PKCS8EncodedKeySpec(decodedPriv));\n\n        RSAKey.Builder builder = new RSAKey.Builder(publicKey)\n            .privateKey(privateKey)\n            .keyID(kid);\n\n        if (forSign) {\n            builder\n                .algorithm(JWSAlgorithm.RS256)\n                .keyUse(KeyUse.SIGNATURE);\n        } else {\n            builder\n                .algorithm(JWEAlgorithm.RSA_OAEP_256)\n                .keyUse(KeyUse.ENCRYPTION);\n        }\n\n        return builder.build();\n    }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootjwedemo.security\n\nimport com.nimbusds.jose.JWEAlgorithm\nimport com.nimbusds.jose.JWSAlgorithm\nimport com.nimbusds.jose.jwk.KeyUse\nimport com.nimbusds.jose.jwk.RSAKey\nimport java.security.KeyFactory\nimport java.security.interfaces.RSAPrivateKey\nimport java.security.interfaces.RSAPublicKey\nimport java.security.spec.PKCS8EncodedKeySpec\nimport java.security.spec.X509EncodedKeySpec\nimport java.util.Base64\n\nobject KeyUtils {\n    @JvmStatic\n    @Throws(Exception::class)\n    fun buildRsaKey(\n        pubPem: String,\n        privPem: String,\n        kid: String,\n        forSign: Boolean\n    ): RSAKey {\n        val pubContent = pubPem\n            .replace(\"-----BEGIN PUBLIC KEY-----\", \"\")\n            .replace(\"-----END PUBLIC KEY-----\", \"\")\n            .replace(Regex(\"\\\\s\"), \"\")\n        val privContent = privPem\n            .replace(\"-----BEGIN PRIVATE KEY-----\", \"\")\n            .replace(\"-----END PRIVATE KEY-----\", \"\")\n            .replace(Regex(\"\\\\s\"), \"\")\n\n        val decodedPub = Base64.getDecoder().decode(pubContent)\n        val decodedPriv = Base64.getDecoder().decode(privContent)\n\n        val kf = KeyFactory.getInstance(\"RSA\")\n        val publicKey = kf.generatePublic(X509EncodedKeySpec(decodedPub)) as RSAPublicKey\n        val privateKey = kf.generatePrivate(PKCS8EncodedKeySpec(decodedPriv)) as RSAPrivateKey\n\n        val builder = RSAKey.Builder(publicKey)\n            .privateKey(privateKey)\n            .keyID(kid)\n\n        if (forSign) {\n            builder\n                .algorithm(JWSAlgorithm.RS256)\n                .keyUse(KeyUse.SIGNATURE)\n        } else {\n            builder\n                .algorithm(JWEAlgorithm.RSA_OAEP_256)\n                .keyUse(KeyUse.ENCRYPTION)\n        }\n\n        return builder.build()\n    }\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### SecurityUtils\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootjwedemo.security;\n\nimport lombok.experimental.UtilityClass;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.oauth2.jwt.Jwt;\n\nimport java.util.Optional;\n\n@UtilityClass\npublic class SecurityUtils {\n\n    public static final String AUTHORITIES_KEY = \"auth\";\n\n    public Optional<String> getCurrentUserLogin() {\n        var ctx = SecurityContextHolder.getContext();\n        return Optional.ofNullable(extractPrincipal(ctx.getAuthentication()));\n    }\n\n    private String extractPrincipal(Authentication authentication) {\n        if (authentication == null) {\n            return null;\n        }\n        Object principal = authentication.getPrincipal();\n        if (principal instanceof Jwt jwt) {\n            return jwt.getSubject();\n        }\n        if (principal instanceof UserDetails ud) {\n            return ud.getUsername();\n        }\n        if (principal instanceof String username) {\n            return username;\n        }\n        return null;\n    }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootjwedemo.security\n\nimport org.springframework.security.core.Authentication\nimport org.springframework.security.core.context.SecurityContextHolder\nimport org.springframework.security.core.userdetails.UserDetails\nimport org.springframework.security.oauth2.jwt.Jwt\nimport java.util.Optional\n\nobject SecurityUtils {\n  const val AUTHORITIES_KEY = \"auth\"\n\n  fun getCurrentUserLogin(): Optional<String> {\n    val authentication: Authentication? = SecurityContextHolder.getContext().authentication\n    return Optional.ofNullable(extractPrincipal(authentication))\n  }\n\n  private fun extractPrincipal(authentication: Authentication?): String? {\n    return when (val principal = authentication?.principal) {\n      is Jwt -> principal.subject\n      is UserDetails -> principal.username\n      is String -> principal\n      else -> null\n    }\n  }\n}\n```\n\n:::\n\n---\n\n## üîê Step 5: Authentication & Protected Endpoints\n\nIn this section, we define the REST controllers and DTOs necessary for:\n\n- **AuthController**: Authenticate users, issue JWE tokens, and set secure cookies.\n- **HelloController**: Expose protected resource endpoints for authenticated users and admin-specific paths.\n- **LoginRequestDTO**: Model the login request payload (username/password).\n- **TokenDTO**: Model the authentication response including token and expiration.\n\nThese components complete the stateless authentication flow by handling login, token issuance, cookie management, and resource protection.\n\nIn this section, we expose REST controllers and DTOs to handle user authentication, token issuance, and protected resource access.\n\n### AuthController\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootjwedemo.controller;\n\nimport io.github.susimsek.springbootjwedemo.dto.LoginRequestDTO;\nimport io.github.susimsek.springbootjwedemo.dto.TokenDTO;\nimport io.github.susimsek.springbootjwedemo.security.CookieUtils;\nimport io.github.susimsek.springbootjwedemo.security.JweUtil;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.ResponseCookie;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(\"/api/auth\")\npublic class AuthController {\n\n    private final AuthenticationManager authenticationManager;\n    private final JweUtil jweUtil;\n\n    @PostMapping(\"/login\")\n    public ResponseEntity<TokenDTO> login(@RequestBody LoginRequestDTO loginRequest) throws Exception {\n        // Authenticate user\n        var authToken = new UsernamePasswordAuthenticationToken(\n            loginRequest.username(), loginRequest.password()\n        );\n        Authentication auth = authenticationManager.authenticate(authToken);\n        SecurityContextHolder.getContext().setAuthentication(auth);\n\n        // Generate JWE token and cookie\n        TokenDTO tokenDto = jweUtil.generateToken(auth);\n        ResponseCookie cookie = CookieUtils.createAccessTokenCookie(tokenDto);\n\n        return ResponseEntity.ok()\n            .header(HttpHeaders.SET_COOKIE, cookie.toString())\n            .body(tokenDto);\n    }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootjwedemo.controller\n\nimport io.github.susimsek.springbootjwedemo.dto.LoginRequestDTO\nimport io.github.susimsek.springbootjwedemo.dto.TokenDTO\nimport io.github.susimsek.springbootjwedemo.security.CookieUtils\nimport io.github.susimsek.springbootjwedemo.security.JweUtil\nimport lombok.RequiredArgsConstructor\nimport org.springframework.http.HttpHeaders\nimport org.springframework.http.ResponseCookie\nimport org.springframework.http.ResponseEntity\nimport org.springframework.security.authentication.AuthenticationManager\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken\nimport org.springframework.security.core.Authentication\nimport org.springframework.security.core.context.SecurityContextHolder\nimport org.springframework.web.bind.annotation.PostMapping\nimport org.springframework.web.bind.annotation.RequestBody\nimport org.springframework.web.bind.annotation.RequestMapping\nimport org.springframework.web.bind.annotation.RestController\n\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(\"/api/auth\")\nclass AuthController(\n    private val authenticationManager: AuthenticationManager,\n    private val jweUtil: JweUtil\n) {\n\n    @PostMapping(\"/login\")\n    fun login(@RequestBody loginRequest: LoginRequestDTO): ResponseEntity<TokenDTO> {\n        val authToken = UsernamePasswordAuthenticationToken(\n            loginRequest.username, loginRequest.password\n        )\n        val auth: Authentication = authenticationManager.authenticate(authToken)\n        SecurityContextHolder.getContext().authentication = auth\n\n        val tokenDto: TokenDTO = jweUtil.generateToken(auth)\n        val cookie: ResponseCookie = CookieUtils.createAccessTokenCookie(tokenDto)\n\n        return ResponseEntity.ok()\n            .header(HttpHeaders.SET_COOKIE, cookie.toString())\n            .body(tokenDto)\n    }\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### HelloController\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootjwedemo.controller;\n\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.web.bind.annotation.*;\n\nimport static io.github.susimsek.springbootjwedemo.security.SecurityUtils.AUTHORITIES_KEY;\n\n@RestController\n@RequestMapping(\"/api/hello\")\npublic class HelloController {\n\n    @GetMapping\n    public String helloAll(@AuthenticationPrincipal Jwt jwt) {\n        String user = jwt.getSubject();\n        var roles = jwt.getClaimAsStringList(AUTHORITIES_KEY);\n        return \"Hello, \" + user + \"! Your roles: \" + roles;\n    }\n\n    @GetMapping(\"/admin\")\n    public String helloAdmin(@AuthenticationPrincipal Jwt jwt) {\n        return \"Hello Admin, \" + jwt.getSubject() + \"!\";\n    }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootjwedemo.controller\n\nimport org.springframework.security.core.annotation.AuthenticationPrincipal\nimport org.springframework.security.oauth2.jwt.Jwt\nimport org.springframework.web.bind.annotation.*\n\nimport io.github.susimsek.springbootjwedemo.security.SecurityUtils.AUTHORITIES_KEY\n\n@RestController\n@RequestMapping(\"/api/hello\")\nclass HelloController {\n\n    @GetMapping\n    fun helloAll(@AuthenticationPrincipal jwt: Jwt): String {\n        val user = jwt.subject\n        val roles = jwt.getClaimAsStringList(AUTHORITIES_KEY)\n        return \"Hello, \\$user! Your roles: \\$roles\"\n    }\n\n    @GetMapping(\"/admin\")\n    fun helloAdmin(@AuthenticationPrincipal jwt: Jwt): String {\n        return \"Hello Admin, \\${jwt.subject}!\"\n    }\n}\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### LoginRequestDTO\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootjwedemo.dto;\n\npublic record LoginRequestDTO(\n    String username,\n    String password\n) { }\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootjwedemo.dto\n\ndata class LoginRequestDTO(\n    val username: String,\n    val password: String\n)\n```\n\n:::\n\n<span style=\"display:block; height:1rem;\"></span>\n\n### TokenDTO\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage io.github.susimsek.springbootjwedemo.dto;\n\npublic record TokenDTO(\n    String accessToken,\n    String tokenType,\n    long accessTokenExpiresIn\n) {}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage io.github.susimsek.springbootjwedemo.dto\n\nimport kotlin.Long\n\ndata class TokenDTO(\n    val accessToken: String,\n    val tokenType: String,\n    val accessTokenExpiresIn: Long\n)\n```\n\n:::\n\n---\n\n## ‚ñ∂Ô∏è Run the App\n\n```bash\n./mvnw spring-boot:run\n# or\ngradle bootRun\n```\n\n---\n\n## üß™ Test Endpoints\n\n### Admin Flow\n\nLogin as **admin** and capture the JWE token from the `Set-Cookie` header:\n\n```bash\ncurl -i -X POST http://localhost:8080/api/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\":\"admin\",\"password\":\"adminpass\"}'\n```\n\n- **Set-Cookie** header contains `accessToken=<jwe-token>`\n- Response body:\n\n```json\n{\n  \"accessToken\": \"<jwe-token>\",\n  \"tokenType\": \"Bearer\",\n  \"accessTokenExpiresIn\": 3600\n}\n```\n\nUse **cookie** to access hello endpoint:\n\n```bash\ncurl -b \"accessToken=<jwe-token>\" http://localhost:8080/api/hello\n```\n\nUse **Authorization** header instead:\n\n```bash\ncurl -H \"Authorization: Bearer <jwe-token>\" http://localhost:8080/api/hello\n```\n\nAccess admin-only endpoint:\n\n```bash\ncurl -H \"Authorization: Bearer <jwe-token>\" http://localhost:8080/api/hello/admin\n```\n\n### User Flow\n\nLogin as **user** and capture JWE token from **cookie**:\n\n```bash\ncurl -i -X POST http://localhost:8080/api/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\":\"user\",\"password\":\"userpass\"}'\n```\n\n- **Set-Cookie** header contains `accessToken=<jwe-token>`\n\nUse **cookie** to access hello endpoint:\n\n```bash\ncurl -b \"accessToken=<jwe-token>\" http://localhost:8080/api/hello\n```\n\nUse **Authorization** header:\n\n```bash\ncurl -H \"Authorization: Bearer <jwe-token>\" http://localhost:8080/api/hello\n```\n\nAttempt admin endpoint (should be **403 Forbidden**):\n\n```bash\ncurl -H \"Authorization: Bearer <jwe-token>\" http://localhost:8080/api/hello/admin\n# HTTP/1.1 403 Forbidden\n```\n\n---\n\nThis setup delivers a fully stateless, robust, and secure JWE‚Äëbased authentication solution in Spring Boot, combining the strengths of JWT, RSA encryption, and Spring Security.\n","id":"spring-boot-jwe-authentication","title":"Spring Boot JWE Authentication","date":"2025-05-03","summary":"Learn how to use JWE to encrypt your JWTs and secure your Spring Boot APIs for confidentiality and integrity.","thumbnail":"/images/spring-boot-jwe-auth-thumbnail.webp","readingTime":"5 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"security","name":"Security","color":"blue"},{"id":"jwt","name":"JWT","color":"pink"},{"id":"jwe","name":"JWE","color":"orange"},{"id":"programming","name":"Programming","color":"brown"}]},"posts":[{"id":"spring-boot-jwe-authentication","title":"Spring Boot JWE Authentication","date":"2025-05-03","summary":"Learn how to use JWE to encrypt your JWTs and secure your Spring Boot APIs for confidentiality and integrity.","thumbnail":"/images/spring-boot-jwe-auth-thumbnail.webp","readingTime":"5 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"security","name":"Security","color":"blue"},{"id":"jwt","name":"JWT","color":"pink"},{"id":"jwe","name":"JWE","color":"orange"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-http-interface-client","title":"Spring Boot HTTP Interface Client","date":"2025-04-27","summary":"Learn how to use Spring Boot 3.2+ HTTP Interface Client for declarative, type-safe HTTP calls.","thumbnail":"/images/spring-boot-http-interface-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"rest-api","name":"REST API","color":"blue"},{"id":"rest-client","name":"Rest Client","color":"orange"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-async-tasks-virtual","title":"Spring Boot Async Tasks with Virtual Thread","date":"2025-04-26","summary":"Learn how to run asynchronous tasks with `@Async` on JDK 21 virtual threads in Spring Boot.","thumbnail":"/images/spring-boot-async-virtual-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"async-tasks","name":"Async Tasks","color":"blue"},{"id":"virtual-thread","name":"Virtual Thread","color":"orange"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-ai","title":"Spring Boot AI Integration","date":"2025-04-23","summary":"Learn how to integrate AI models into Spring Boot applications using Spring AI for modular, portable, and observable AI workflows.","thumbnail":"/images/spring-boot-ai-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"spring-ai","name":"Spring AI","color":"orange"},{"id":"ai","name":"Artificial Intelligence","color":"pink"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-jpa-auditing","title":"Spring Boot JPA Auditing","date":"2025-04-10","summary":"Learn how to automatically track created and modified fields in your Spring Boot applications using JPA Auditing.","thumbnail":"/images/spring-boot-jpa-auditing-thumbnail.webp","readingTime":"1 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"spring-data","name":"Spring Data","color":"yellow"},{"id":"jpa","name":"JPA","color":"blue"},{"id":"auditing","name":"Auditing","color":"orange"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-tdd","title":"Spring Boot Test-Driven Development (TDD)","date":"2025-04-09","summary":"Learn how to apply TDD in Spring Boot by writing unit tests first, implementing logic, and ensuring code quality through testing.","thumbnail":"/images/spring-boot-tdd-thumbnail.webp","readingTime":"1 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"tdd","name":"TDD","color":"blue"},{"id":"testing","name":"Testing","color":"orange"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-circuit-breaker","title":"Spring Boot Circuit Breaker","date":"2025-03-13","summary":"Learn how to implement Circuit Breaker in Spring Boot applications for resilient microservices.","thumbnail":"/images/spring-boot-circuit-breaker-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"spring-cloud","name":"Spring Cloud","color":"pink"},{"id":"circuit-breaker","name":"Circuit Breaker","color":"blue"},{"id":"microservice","name":"Microservice","color":"orange"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-eureka-server","title":"Spring Boot Eureka Server","date":"2025-02-23","summary":"Learn how to set up and configure a Spring Boot Eureka Server for service discovery in microservices architecture.","thumbnail":"/images/spring-boot-eureka-server-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"spring-cloud","name":"Spring Cloud","color":"pink"},{"id":"eureka-server","name":"Eureka Server","color":"blue"},{"id":"microservice","name":"Microservice","color":"orange"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-config-server","title":"Spring Boot Config Server","date":"2025-02-22","summary":"Learn how to use Spring Boot Config Server to centralize and manage application configurations efficiently.","thumbnail":"/images/spring-boot-config-server-thumbnail.webp","readingTime":"4 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"spring-cloud","name":"Spring Cloud","color":"pink"},{"id":"config-server","name":"Config Server","color":"blue"},{"id":"microservice","name":"Microservice","color":"orange"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-docker","title":"Spring Boot Docker Integration","date":"2025-02-21","summary":"Learn how to build and deploy Spring Boot applications using Docker with Buildpacks and Jib for efficient containerization.","thumbnail":"/images/spring-boot-docker-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"docker","name":"Docker","color":"blue"},{"id":"containerization","name":"Containerization","color":"orange"},{"id":"jib","name":"Jib","color":"pink"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-kubernetes","title":"Spring Boot Kubernetes Integration","date":"2025-02-21","summary":"Learn how to deploy Spring Boot applications on Kubernetes for scalable, containerized microservices.","thumbnail":"/images/spring-boot-kubernetes-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"kubernetes","name":"Kubernetes","color":"blue"},{"id":"microservice","name":"Microservice","color":"orange"},{"id":"containerization","name":"Containerization","color":"pink"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-async-tasks","title":"Spring Boot Async Tasks","date":"2025-02-20","summary":"Learn how to use @Async in Spring Boot to execute tasks asynchronously without blocking the main thread.","thumbnail":"/images/spring-boot-async-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"async-tasks","name":"Async Tasks","color":"blue"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-scheduled-tasks","title":"Spring Boot Scheduled Tasks","date":"2025-02-20","summary":"Learn how to use @Scheduled in Spring Boot to run background tasks at fixed intervals or cron expressions.","thumbnail":"/images/spring-boot-scheduled-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"scheduled-tasks","name":"Scheduled Tasks","color":"blue"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-reactive-programming","title":"Spring Boot Reactive Programming","date":"2025-02-19","summary":"Learn how to build reactive applications using Spring Boot with Project Reactor and WebFlux for high-performance asynchronous processing.","thumbnail":"/images/spring-boot-reactive-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"reactive-programming","name":"Reactive Programming","color":"blue"},{"id":"webflux","name":"Spring WebFlux","color":"orange"},{"id":"programming","name":"Programming","color":"brown"}]},{"id":"spring-boot-graalvm","title":"Spring Boot GraalVM Native Application","date":"2024-12-28","summary":"Learn how to build and deploy a Spring Boot application as a GraalVM native image for improved startup time and reduced resource usage.","thumbnail":"/images/spring-boot-graalvm-thumbnail.webp","readingTime":"2 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"graalvm","name":"GraalVM","color":"pink"},{"id":"native-image","name":"Native Image","color":"orange"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"spring-boot-kafka","title":"Spring Boot Kafka Integration","date":"2024-12-25","summary":"Learn how to integrate Apache Kafka with Spring Boot to send and consume JSON messages through Kafka topics.","thumbnail":"/images/spring-boot-kafka-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"kafka","name":"Kafka","color":"orange"},{"id":"messaging","name":"Messaging","color":"brown"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"spring-boot-redis-caching","title":"Spring Boot Redis Caching","date":"2024-12-22","summary":"Learn how to implement Redis caching in your Spring Boot application to improve performance and efficiency.","thumbnail":"/images/spring-boot-redis-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"redis","name":"Redis","color":"orange"},{"id":"caching","name":"Caching","color":"brown"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"spring-boot-openapi","title":"Spring Boot with OpenAPI","date":"2024-12-20","summary":"Learn how to integrate OpenAPI into your Spring Boot application for API documentation and testing using SpringDoc.","thumbnail":"/images/spring-boot-openapi-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"openapi","name":"OpenAPI","color":"orange"},{"id":"documentation","name":"Documentation","color":"brown"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"spring-boot-clean-coding","title":"Clean Coding Practices in Spring Boot","date":"2024-12-19","summary":"Learn how to apply clean coding principles in Spring Boot projects. Includes best practices, examples, and benefits of using Lombok in Java and Kotlin clean code techniques.","thumbnail":"/images/spring-boot-clean-coding-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"clean-coding","name":"Clean Coding","color":"orange"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"spring-boot-devtools","title":"Spring Boot DevTools","date":"2024-12-19","summary":"Learn how to utilize Spring Boot DevTools for rapid development. Includes live reload, caching, and debugging tips.","thumbnail":"/images/spring-boot-devtools-thumbnail.webp","readingTime":"2 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"devtools","name":"Dev Tools","color":"orange"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"spring-boot-actuator","title":"Spring Boot Actuator","date":"2024-12-18","summary":"Learn how to use Spring Boot Actuator to monitor and manage your applications with ease. Includes endpoints, customization, and security examples.","thumbnail":"/images/spring-boot-actuator-thumbnail.webp","readingTime":"2 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"actuator","name":"Actuator","color":"orange"},{"id":"monitoring","name":"Monitoring","color":"purple"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"spring-boot-aop","title":"Aspect-Oriented Programming (AOP) in Spring Boot","date":"2024-12-18","summary":"Learn how to implement Aspect-Oriented Programming (AOP) in Spring Boot using Java and Kotlin. Covers core concepts, use cases, and practical examples.","thumbnail":"/images/spring-boot-aop-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"aop","name":"AOP","color":"orange"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"spring-boot-di","title":"Dependency Injection in Spring Boot","date":"2024-12-18","summary":"Learn how Dependency Injection (DI) works in Spring Boot, including examples in Java and Kotlin. Covers key concepts, annotations, and practical use cases.","thumbnail":"/images/spring-boot-di-thumbnail.webp","readingTime":"2 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"dependency-injection","name":"Dependency Injection","color":"orange"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"object-relational-mapping","title":"Object-Relational Mapping (ORM)","date":"2024-12-16","summary":"Learn how to set up an ORM-based application with Spring Boot using Java, Kotlin, and Go (Gin). Includes PostgreSQL integration and basic CRUD operations.","thumbnail":"/images/orm-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"go","name":"Go","color":"brown"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"gin","name":"Gin","color":"green"},{"id":"orm","name":"ORM","color":"orange"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"rest-api-input-validation","title":"Input Validation in REST APIs","date":"2024-12-15","summary":"Learn how to implement input validation in REST APIs using Java, Kotlin, and Go with frameworks like Spring Boot and Gin. Covers annotations, custom validators, and error handling.","thumbnail":"/images/input-validation-thumbnail.webp","readingTime":"4 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"go","name":"Go","color":"brown"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"gin","name":"Gin","color":"green"},{"id":"validation","name":"Validation","color":"orange"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"spring-boot-graphql","title":"Building APIs with Spring for GraphQL","date":"2024-12-15","summary":"Learn how to build GraphQL APIs using Spring for GraphQL with Java and Kotlin. Includes schema creation, query handling, and integration.","thumbnail":"/images/spring-boot-graphql-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"graphql","name":"GraphQL","color":"pink"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"golang-gin-first-application","title":"Gin - First Application","date":"2024-12-14","summary":"A beginner-friendly guide to creating your first Golang Gin application from scratch. Learn the basics and start your journey with Gin.","thumbnail":"/images/golang-gin-first-app-thumbnail.webp","readingTime":"1 min read","topics":[{"id":"go","name":"Go","color":"brown"},{"id":"gin","name":"Gin","color":"green"},{"id":"beginner-guide","name":"Beginner Guide","color":"orange"},{"id":"programming","name":"Programming","color":"blue"}]},{"id":"building-a-rest-api-with-spring-boot","title":"Building a REST API with Spring Boot","date":"2024-12-11","summary":"Learn how to create a REST API using Spring Boot. Includes HTTP methods, JSON handling, Lombok integration, and curl for testing.","thumbnail":"/images/spring-boot-rest-api-thumbnail.webp","readingTime":"3 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"rest-api","name":"REST API","color":"blue"},{"id":"programming","name":"Programming","color":"orange"}]},{"id":"spring-boot-first-application","title":"Spring Boot - First Application","date":"2024-12-10","summary":"A beginner-friendly guide to creating your first Spring Boot application from scratch. Learn the basics and start your journey with Spring Boot.","thumbnail":"/images/spring-boot-first-app-thumbnail.webp","readingTime":"2 min read","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"beginner-guide","name":"Beginner Guide","color":"orange"},{"id":"programming","name":"Programming","color":"blue"}]}]},"__N_SSG":true}