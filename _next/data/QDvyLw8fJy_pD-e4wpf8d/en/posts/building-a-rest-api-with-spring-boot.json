{"pageProps":{"_nextI18Next":{"initialI18nStore":{"en":{"common":{"common":{"language":"Language","header":{"logoAlt":"My Blog Logo","title":"My Blog","menu":{"home":"Home","about":"About","contact":"Contact"},"themeToggle":"Toggle Theme","theme":{"light":"Light Mode","dark":"Dark Mode"}},"footer":{"text":"© {{year}} My Blog. All rights reserved."},"pagination":{"pageSize":"Page size","showingResults":"Showing {{start}}–{{end}} of {{total}} results"},"searchBar":{"placeholder":"Search"},"sort":{"newest":"Newest First","oldest":"Oldest First"},"contactInfo":{"email":"Email"}}},"post":{"post":{"readMore":"Read More","noPostsFound":"No posts found."}}}},"initialLocale":"en","ns":["common","post"],"userConfig":{"debug":false,"i18n":{"defaultLocale":"en","locales":["en","tr"]},"localePath":"/home/runner/work/blog/blog/public/locales","reloadOnPrerender":false,"default":{"debug":false,"i18n":{"defaultLocale":"en","locales":["en","tr"]},"localePath":"/home/runner/work/blog/blog/public/locales","reloadOnPrerender":false}}},"post":{"contentHtml":"<p>Spring Boot is an excellent tool for quickly developing RESTful web services. In this article, we’ll walk through creating a REST API step by step using Spring Boot.</p>\n<hr>\n<h2><strong>What is a REST API?</strong></h2>\n<p>REST (Representational State Transfer) is an architectural style for designing web services. It uses standard HTTP methods for communication between clients and servers.</p>\n<h3><strong>HTTP Methods</strong></h3>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th><strong>Method</strong></th>\n<th><strong>Description</strong></th>\n<th><strong>Example Endpoint</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>GET</strong></td>\n<td>Retrieves a resource.</td>\n<td><code>/api/todos</code></td>\n</tr>\n<tr>\n<td><strong>POST</strong></td>\n<td>Creates a new resource.</td>\n<td><code>/api/todos</code></td>\n</tr>\n<tr>\n<td><strong>PUT</strong></td>\n<td>Updates or creates a resource.</td>\n<td><code>/api/todos/1</code></td>\n</tr>\n<tr>\n<td><strong>DELETE</strong></td>\n<td>Deletes a resource.</td>\n<td><code>/api/todos/1</code></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2><strong>Step 1: Create a Project</strong></h2>\n<p>You can create a Spring Boot project using <a href=\"https://start.spring.io/\">Spring Initializr</a>. Select the following settings:</p>\n<ul>\n<li><strong>Project:</strong> Maven</li>\n<li><strong>Language:</strong> Java</li>\n<li><strong>Spring Boot Version:</strong> 3.0.0+</li>\n<li><strong>Dependencies:</strong> Spring Web, Spring Boot DevTools, Lombok</li>\n</ul>\n<p>Download the project, open it in your IDE, and get ready to run it.</p>\n<hr>\n<h2><strong>Step 2: Create a Model Class</strong></h2>\n<p>Use Lombok to create a model class for a <code>Todo</code> object:</p>\n<pre><code class=\"language-java\">package com.example.demo.model;\n\nimport lombok.Data;\n\n@Data\npublic class Todo {\n    private Long id;\n    private String title;\n    private boolean completed;\n}\n</code></pre>\n<p>Lombok's <code>@Data</code> annotation automatically generates getters, setters, <code>toString</code>, <code>equals</code>, and <code>hashCode</code> methods.</p>\n<hr>\n<h2><strong>Step 3: Create a Controller Class</strong></h2>\n<p>Add a <code>TodoController</code> class to define CRUD operations as REST endpoints:</p>\n<pre><code class=\"language-java\">package com.example.demo.controller;\n\nimport com.example.demo.model.Todo;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/todos\")\npublic class TodoController {\n\n    private List&#x3C;Todo> todos = new ArrayList&#x3C;>();\n\n    @GetMapping\n    public List&#x3C;Todo> getAllTodos() {\n        return todos;\n    }\n\n    @PostMapping\n    public Todo createTodo(@RequestBody Todo todo) {\n        todo.setId((long) (todos.size() + 1));\n        todos.add(todo);\n        return todo;\n    }\n\n    @PutMapping(\"/{id}\")\n    public Todo updateTodo(@PathVariable Long id, @RequestBody Todo updatedTodo) {\n        Todo todo = todos.stream().filter(t -> t.getId().equals(id)).findFirst().orElse(null);\n        if (todo != null) {\n            todo.setTitle(updatedTodo.getTitle());\n            todo.setCompleted(updatedTodo.isCompleted());\n        }\n        return todo;\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public void deleteTodo(@PathVariable Long id) {\n        todos.removeIf(todo -> todo.getId().equals(id));\n    }\n}\n</code></pre>\n<hr>\n<h2><strong>Step 4: Test the API</strong></h2>\n<p>Test your API using <code>curl</code> commands:</p>\n<ul>\n<li><strong>GET All Todos:</strong></li>\n</ul>\n<pre><code class=\"language-bash\">curl -X GET http://localhost:8080/api/todos\n</code></pre>\n<ul>\n<li><strong>POST New Todo:</strong></li>\n</ul>\n<pre><code class=\"language-bash\">curl -X POST http://localhost:8080/api/todos -H \"Content-Type: application/json\" -d '{\"title\": \"New Todo\", \"completed\": false}'\n</code></pre>\n<ul>\n<li><strong>PUT Update Todo:</strong></li>\n</ul>\n<pre><code class=\"language-bash\">curl -X PUT http://localhost:8080/api/todos/1 -H \"Content-Type: application/json\" -d '{\"title\": \"Updated Todo\", \"completed\": true}'\n</code></pre>\n<ul>\n<li><strong>DELETE Delete Todo:</strong></li>\n</ul>\n<pre><code class=\"language-bash\">curl -X DELETE http://localhost:8080/api/todos/1\n</code></pre>\n<hr>\n<p>By following these steps, you’ll have built a REST API with Spring Boot.</p>\n","id":"building-a-rest-api-with-spring-boot","title":"Building a REST API with Spring Boot","date":"2024-12-10","summary":"Learn how to create a REST API using Spring Boot. Includes HTTP methods, JSON handling, Lombok integration, and curl for testing.","thumbnail":"/images/spring-boot-rest-api-thumbnail.jpg","topics":[{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"rest-api","name":"REST API","color":"blue"},{"id":"programming","name":"Programming","color":"orange"}]}},"__N_SSG":true}