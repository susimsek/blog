{"pageProps":{"_nextI18Next":{"initialI18nStore":{"tr":{"common":{"common":{"language":"Dil","header":{"logoAlt":"Blog Logom","title":"Blogum","menu":{"home":"Ana Sayfa","about":"Hakkında","contact":"İletişim"},"themeToggle":"Temayı Değiştir","theme":{"light":"Açık Mod","dark":"Koyu Mod"}},"footer":{"text":"© {{year}} Blogum. Tüm hakları saklıdır."},"pagination":{"pageSize":"Sayfa Boyutu","showingResults":"{{start}}–{{end}} arası {{total}} sonuç gösteriliyor"},"searchBar":{"placeholder":"Ara"},"sort":{"newest":"En Yeni Önce","oldest":"En Eski Önce"},"contactInfo":{"email":"E-posta"}}},"post":{"post":{"noPostsFound":"Hiçbir gönderi bulunamadı.","readMore":"Daha Fazla Oku"}}},"en":{"common":{"common":{"language":"Language","header":{"logoAlt":"My Blog Logo","title":"My Blog","menu":{"home":"Home","about":"About","contact":"Contact"},"themeToggle":"Toggle Theme","theme":{"light":"Light Mode","dark":"Dark Mode"}},"footer":{"text":"© {{year}} My Blog. All rights reserved."},"pagination":{"pageSize":"Page size","showingResults":"Showing {{start}}–{{end}} of {{total}} results"},"searchBar":{"placeholder":"Search"},"sort":{"newest":"Newest First","oldest":"Oldest First"},"contactInfo":{"email":"Email"}}},"post":{"post":{"readMore":"Read More","noPostsFound":"No posts found."}}}},"initialLocale":"tr","ns":["common","post"],"userConfig":{"debug":false,"i18n":{"defaultLocale":"en","locales":["en","tr"]},"localePath":"/home/runner/work/blog/blog/public/locales","reloadOnPrerender":false,"default":{"debug":false,"i18n":{"defaultLocale":"en","locales":["en","tr"]},"localePath":"/home/runner/work/blog/blog/public/locales","reloadOnPrerender":false}}},"post":{"contentHtml":"<p>Spring Boot, RESTful web servislerini hızlı ve kolay bir şekilde geliştirmek için mükemmel bir araçtır. Bu yazıda, Spring Boot kullanarak bir REST API'nin nasıl oluşturulacağını adım adım göreceğiz.</p>\n<hr>\n<h2><strong>REST API Nedir?</strong></h2>\n<p>REST (Representational State Transfer), web servislerini tasarlamak için kullanılan bir mimari stildir. Temel HTTP metodlarını kullanarak istemcilerle sunucular arasında veri alışverişi yapılır.</p>\n<h3><strong>HTTP Metodları</strong></h3>\n<table class=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th><strong>Metot</strong></th>\n<th><strong>Açıklama</strong></th>\n<th><strong>Örnek Endpoint</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>GET</strong></td>\n<td>Kaynağı alır.</td>\n<td><code>/api/todos</code></td>\n</tr>\n<tr>\n<td><strong>POST</strong></td>\n<td>Yeni bir kaynak oluşturur.</td>\n<td><code>/api/todos</code></td>\n</tr>\n<tr>\n<td><strong>PUT</strong></td>\n<td>Var olan bir kaynağı günceller veya oluşturur.</td>\n<td><code>/api/todos/1</code></td>\n</tr>\n<tr>\n<td><strong>DELETE</strong></td>\n<td>Bir kaynağı siler.</td>\n<td><code>/api/todos/1</code></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2><strong>Adım 1: Proje Oluşturma</strong></h2>\n<p>Spring Boot projesi oluşturmak için <a href=\"https://start.spring.io/\">Spring Initializr</a> kullanabilirsiniz. Aşağıdaki ayarları seçin:</p>\n<ul>\n<li><strong>Project:</strong> Maven</li>\n<li><strong>Language:</strong> Java</li>\n<li><strong>Spring Boot Version:</strong> 3.0.0+</li>\n<li><strong>Dependencies:</strong> Spring Web, Spring Boot DevTools, Lombok</li>\n</ul>\n<p>Projeyi indirin, IDE'nizde açın ve çalıştırmaya hazır olun.</p>\n<hr>\n<h2><strong>Adım 2: Model Sınıfı Oluşturma</strong></h2>\n<p>Lombok kullanarak <code>Todo</code> nesnesi için bir model sınıfı oluşturun:</p>\n<pre><code class=\"language-java\">package com.example.demo.model;\n\nimport lombok.Data;\n\n@Data\npublic class Todo {\n    private Long id;\n    private String title;\n    private boolean completed;\n}\n</code></pre>\n<p>Lombok, <code>@Data</code> anotasyonu sayesinde getter, setter, <code>toString</code>, <code>equals</code> ve <code>hashCode</code> gibi metodları otomatik olarak oluşturur.</p>\n<hr>\n<h2><strong>Adım 3: Controller Sınıfı Oluşturma</strong></h2>\n<p><code>TodoController</code> adında bir controller sınıfı ekleyerek CRUD işlemleri için REST endpoint'leri tanımlayın:</p>\n<pre><code class=\"language-java\">package com.example.demo.controller;\n\nimport com.example.demo.model.Todo;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/todos\")\npublic class TodoController {\n\n    private List&#x3C;Todo> todos = new ArrayList&#x3C;>();\n\n    @GetMapping\n    public List&#x3C;Todo> getAllTodos() {\n        return todos;\n    }\n\n    @PostMapping\n    public Todo createTodo(@RequestBody Todo todo) {\n        todo.setId((long) (todos.size() + 1));\n        todos.add(todo);\n        return todo;\n    }\n\n    @PutMapping(\"/{id}\")\n    public Todo updateTodo(@PathVariable Long id, @RequestBody Todo updatedTodo) {\n        Todo todo = todos.stream().filter(t -> t.getId().equals(id)).findFirst().orElse(null);\n        if (todo != null) {\n            todo.setTitle(updatedTodo.getTitle());\n            todo.setCompleted(updatedTodo.isCompleted());\n        }\n        return todo;\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public void deleteTodo(@PathVariable Long id) {\n        todos.removeIf(todo -> todo.getId().equals(id));\n    }\n}\n</code></pre>\n<hr>\n<h2><strong>Adım 4: API'yi Test Etme</strong></h2>\n<p>API'nizi <code>curl</code> komutlarıyla test edebilirsiniz:</p>\n<ul>\n<li><strong>GET Tüm Görevler:</strong></li>\n</ul>\n<pre><code class=\"language-bash\">curl -X GET http://localhost:8080/api/todos\n</code></pre>\n<ul>\n<li><strong>POST Yeni Görev:</strong></li>\n</ul>\n<pre><code class=\"language-bash\">curl -X POST http://localhost:8080/api/todos -H \"Content-Type: application/json\" -d '{\"title\": \"Yeni Görev\", \"completed\": false}'\n</code></pre>\n<ul>\n<li><strong>PUT Görev Güncelleme:</strong></li>\n</ul>\n<pre><code class=\"language-bash\">curl -X PUT http://localhost:8080/api/todos/1 -H \"Content-Type: application/json\" -d '{\"title\": \"Güncellenmiş Görev\", \"completed\": true}'\n</code></pre>\n<ul>\n<li><strong>DELETE Görev Silme:</strong></li>\n</ul>\n<pre><code class=\"language-bash\">curl -X DELETE http://localhost:8080/api/todos/1\n</code></pre>\n<hr>\n<p>Bu adımları izleyerek Spring Boot ile REST API geliştirmiş oldunuz.</p>\n","id":"building-a-rest-api-with-spring-boot","title":"Spring Boot ile REST API Geliştirme","date":"2024-12-10","summary":"Spring Boot kullanarak REST API nasıl geliştirilir? HTTP metodları, JSON veri işleme, Lombok entegrasyonu ve curl ile test etme.","thumbnail":"/images/spring-boot-rest-api-thumbnail.jpg","topics":[{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"rest-api","name":"REST API","color":"blue"},{"id":"programming","name":"Programlama","color":"orange"}]}},"__N_SSG":true}