{"pageProps":{"_nextI18Next":{"initialI18nStore":{"en":{"common":{"common":{"language":"Language","theme":"Theme","header":{"logoAlt":"My Blog Logo","title":"My Blog","menu":{"home":"Home","about":"About","contact":"Contact"},"themeToggle":"Toggle Theme","theme":{"light":"Light Mode","dark":"Dark Mode"}},"footer":{"text":"¬© {{year}} My Blog. All rights reserved."},"pagination":{"pageSize":"Page size","showingResults":"Showing {{start}}‚Äì{{end}} of {{total}} results"},"searchBar":{"placeholder":"Search"},"sort":{"newest":"Newest First","oldest":"Oldest First"},"contactInfo":{"email":"Email"},"codeBlock":{"copy":"Copy","copied":"Copied!"},"selected":"Selected","selectAll":"Select All","clearAll":"Clear All","noResults":"No results found","andMore":"and {{count}} more","datePicker":{"selectDate":"Select Date","today":"Today","last7Days":"Last 7 Days","last30Days":"Last 30 Days","customDate":"Custom Date","startDatePlaceholder":"Start Date","endDatePlaceholder":"End Date","startDateLabel":"Start Date","endDateLabel":"End Date","clearSelection":"Clear Selection"}}},"post":{"post":{"readMore":"Read More","noPostsFound":"No posts found."}}}},"initialLocale":"en","ns":["common","post"],"userConfig":{"debug":false,"i18n":{"defaultLocale":"en","locales":["en","tr"]},"localePath":"/home/runner/work/blog/blog/public/locales","default":{"debug":false,"i18n":{"defaultLocale":"en","locales":["en","tr"]},"localePath":"/home/runner/work/blog/blog/public/locales"}}},"post":{"contentHtml":"\nSpring Boot Actuator provides production-ready features to monitor and manage your applications. This guide explores Actuator's capabilities, how to enable it, and secure its endpoints.\n\n---\n\n## üåü Why Use Spring Boot Actuator?\n\nSpring Boot Actuator allows developers to:\n\n- Monitor application health\n- Gather metrics and information\n- Expose management endpoints for operational tasks\n\n---\n\n## üåü Prerequisites\n\nüìã Ensure you have the following:\n\n- ‚òï **Java Development Kit (JDK)** 17+\n- üíº **Maven or Gradle** installed\n- üÑÑ A **Java IDE** (e.g., IntelliJ IDEA, Eclipse)\n\n---\n\n## üõ†Ô∏è Step 1: Add Dependencies\n\nTo enable Actuator, add the following dependency to your Spring Boot project:\n\n- **Maven:**\n\n```xml\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n```\n\n- **Gradle:**\n\n```groovy\nimplementation 'org.springframework.boot:spring-boot-starter-actuator'\n```\n\n---\n\n## üìú Step 2: Enable Actuator Endpoints\n\nBy default, Actuator exposes several endpoints to provide application insights. You can enable these endpoints in your `application.properties` or `application.yml` file.\n\n### Configuration Example:\n\n```properties\nmanagement.endpoints.web.exposure.include=health,info,metrics\nmanagement.endpoint.health.show-details=always\n```\n\n---\n\n## üìñ Step 3: Using Actuator Endpoints\n\nHere are some commonly used Actuator endpoints:\n\n- **`/actuator/health`**: Provides application health status.\n- **`/actuator/info`**: Displays application metadata.\n- **`/actuator/metrics`**: Offers application performance metrics.\n\nYou can access these endpoints via a browser or API tools like cURL.\n\nExample:\n\n```bash\ncurl -X GET http://localhost:8080/actuator/health\n```\n\n---\n\n## üìò Step 4: Customize Actuator Endpoints\n\nYou can customize Actuator endpoints to suit your needs. For example, you can define additional metadata in the `application.properties` file for the `/actuator/info` endpoint:\n\n```properties\ninfo.app.name=My Application\ninfo.app.version=1.0.0\ninfo.app.description=Spring Boot Actuator Example\n```\n\n---\n\n## üîí Step 5: Secure Actuator Endpoints\n\nFor production environments, it's essential to secure Actuator endpoints. Use Spring Security to restrict access.\n\n:::tabs\n@tab Java [icon=java]\n\n### Example Security Configuration\n\n```java\npackage com.example.demo.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.web.SecurityFilterChain;\n\n@Configuration\npublic class SecurityConfig {\n\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests()\n                .requestMatchers(\"/actuator/**\").hasRole(\"ADMIN\")\n                .anyRequest().authenticated()\n            .and()\n            .httpBasic();\n        return http.build();\n    }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n### Example Security Configuration\n\n```kotlin\npackage com.example.demo.config\n\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity\nimport org.springframework.security.web.SecurityFilterChain\n\n@Configuration\nclass SecurityConfig {\n\n    @Bean\n    fun securityFilterChain(http: HttpSecurity): SecurityFilterChain {\n        http\n            .authorizeHttpRequests()\n                .requestMatchers(\"/actuator/**\").hasRole(\"ADMIN\")\n                .anyRequest().authenticated()\n            .and()\n            .httpBasic()\n        return http.build()\n    }\n}\n```\n\n:::\n\n---\n\n## ‚ñ∂Ô∏è Running the Application\n\nRun the application using the following command:\n\n```bash\n./mvnw spring-boot:run\n```\n\nAccess the Actuator endpoints at:\n\n```\nhttp://localhost:8080/actuator/health\n```\n\n---\n\n## üß™ Test the API\n\nYou can test the Actuator endpoints using cURL or browser:\n\n- **Health Endpoint:**\n\n```bash\ncurl -X GET http://localhost:8080/actuator/health\n```\n\n- **Info Endpoint:**\n\n```bash\ncurl -X GET http://localhost:8080/actuator/info\n```\n\n---\n\nSpring Boot Actuator simplifies monitoring and managing your application. This guide covered enabling, customizing, and securing Actuator endpoints to improve your Spring Boot project.\n","id":"spring-boot-actuator","title":"Spring Boot Actuator","date":"2024-12-18","summary":"Learn how to use Spring Boot Actuator to monitor and manage your applications with ease. Includes endpoints, customization, and security examples.","thumbnail":"/images/spring-boot-actuator-thumbnail.jpg","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"actuator","name":"Actuator","color":"orange"},{"id":"monitoring","name":"Monitoring","color":"purple"},{"id":"programming","name":"Programming","color":"blue"}]}},"__N_SSG":true}