{"pageProps":{"_nextI18Next":{"initialI18nStore":{"en":{"common":{"common":{"language":"Language","theme":"Theme","header":{"logoAlt":"My Blog Logo","title":"My Blog","menu":{"home":"Home","about":"About","contact":"Contact"},"themeToggle":"Toggle Theme","theme":{"light":"Light Mode","dark":"Dark Mode"}},"footer":{"text":"¬© {{year}} My Blog. All rights reserved."},"pagination":{"pageSize":"Page size","showingResults":"Showing {{start}}‚Äì{{end}} of {{total}} results"},"searchBar":{"placeholder":"Search"},"sort":{"newest":"Newest First","oldest":"Oldest First"},"contactInfo":{"email":"Email"},"codeBlock":{"copy":"Copy","copied":"Copied!"},"selected":"Selected","selectAll":"Select All","clearAll":"Clear All","noResults":"No results found","andMore":"and {{count}} more","datePicker":{"selectDate":"Select Date","today":"Today","last7Days":"Last 7 Days","last30Days":"Last 30 Days","customDate":"Custom Date","startDatePlaceholder":"Start Date","endDatePlaceholder":"End Date","startDateLabel":"Start Date","endDateLabel":"End Date","clearSelection":"Clear Selection"}}},"post":{"post":{"readMore":"Read More","noPostsFound":"No posts found."}}}},"initialLocale":"en","ns":["common","post"],"userConfig":{"debug":false,"i18n":{"defaultLocale":"en","locales":["en","tr"]},"localePath":"/home/runner/work/blog/blog/public/locales","default":{"debug":false,"i18n":{"defaultLocale":"en","locales":["en","tr"]},"localePath":"/home/runner/work/blog/blog/public/locales"}}},"post":{"contentHtml":"\nClean coding practices ensure that your Spring Boot applications are maintainable, readable, and scalable. This guide provides essential tips and code examples to help you write cleaner and more efficient code in both Java and Kotlin.\n\n---\n\n## üåü Why Focus on Clean Coding?\n\nAdopting clean coding principles helps to:\n\n- Improve code readability and maintainability.\n- Reduce technical debt.\n- Make onboarding new developers easier.\n- Enhance scalability and debugging processes.\n\n---\n\n## üåü Prerequisites\n\nüìã Ensure you have the following:\n\n- ‚òï **Java Development Kit (JDK)** 17+\n- üì¶ **Maven or Gradle** installed\n- üî§ A **Java IDE** (e.g., IntelliJ IDEA, Eclipse)\n- üõ†Ô∏è Familiarity with Spring Boot basics\n\n---\n\n## üõ†Ô∏è Step 1: Structure Your Project\n\nOrganize your Spring Boot project for better clarity:\n\n- **Controller Layer:** Handles incoming HTTP requests.\n- **Service Layer:** Contains business logic.\n- **Repository Layer:** Interacts with the database.\n\n### Example Folder Structure:\n\n```\nsrc/main/java/com/example/cleanproject\n‚îú‚îÄ‚îÄ controller\n‚îú‚îÄ‚îÄ service\n‚îú‚îÄ‚îÄ repository\n‚îú‚îÄ‚îÄ entity\n‚îî‚îÄ‚îÄ dto\n```\n\n---\n\n## üìã Step 2: Use Lombok for Cleaner Java Code\n\nLombok reduces boilerplate code in Java, making your classes more concise and readable. Here's how to use Lombok effectively:\n\n### Add Lombok Dependency\n\n- **Maven:**\n\n```xml\n<dependency>\n  <groupId>org.projectlombok</groupId>\n  <artifactId>lombok</artifactId>\n  <scope>provided</scope>\n</dependency>\n```\n\n- **Gradle:**\n\n```groovy\nprovided 'org.projectlombok:lombok'\nannotationProcessor 'org.projectlombok:lombok'\n```\n\n### Example: Entity with Lombok\n\n```java\npackage com.example.cleanproject.entity;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.AllArgsConstructor;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Entity\npublic class User {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String name;\n\n    private String email;\n}\n```\n\n**Benefits:**\n\n- `@Data` generates getters, setters, equals, hashCode, and toString methods.\n- `@NoArgsConstructor` and `@AllArgsConstructor` create constructors.\n\n---\n\n## üìñ Step 3: Write Concise and Readable Code in Kotlin\n\nKotlin offers modern features that naturally lead to cleaner code:\n\n### Example: Entity in Kotlin\n\n```kotlin\npackage com.example.cleanproject.entity\n\nimport jakarta.persistence.*\n\n@Entity\ndata class User(\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    val id: Long = 0,\n    var name: String,\n    var email: String\n)\n```\n\n**Advantages of Kotlin:**\n\n- `data class` automatically generates `toString`, `equals`, and `hashCode` methods.\n- Immutable properties (`val`) ensure better stability.\n\n---\n\n## üìò Step 4: Follow Dependency Injection Principles\n\nUse dependency injection to decouple components and improve testability.\n\n### Example: Service Layer with DI\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage com.example.cleanproject.service;\n\nimport com.example.cleanproject.entity.User;\nimport com.example.cleanproject.repository.UserRepository;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\n@RequiredArgsConstructor\npublic class UserService {\n\n    private final UserRepository userRepository;\n\n    public List<User> getAllUsers() {\n        return userRepository.findAll();\n    }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage com.example.cleanproject.service\n\nimport com.example.cleanproject.entity.User\nimport com.example.cleanproject.repository.UserRepository\nimport org.springframework.stereotype.Service\n\n@Service\nclass UserService(\n    private val userRepository: UserRepository\n) {\n    fun getAllUsers(): List<User> = userRepository.findAll()\n}\n```\n\n:::\n\n---\n\n## üîí Step 5: Use DTOs for Data Transfer\n\nData Transfer Objects (DTOs) separate your domain and API layers, promoting better encapsulation.\n\n### Example: DTO for User\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage com.example.cleanproject.dto;\n\nimport lombok.Data;\n\n@Data\npublic class UserDTO {\n    private String name;\n    private String email;\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage com.example.cleanproject.dto\n\ndata class UserDTO(\n    val name: String,\n    val email: String\n)\n```\n\n:::\n\n---\n\n## üìñ Controller Layer\n\nImplement a controller to handle HTTP requests and interact with the service layer.\n\n:::tabs\n@tab Java [icon=java]\n\n```java\npackage com.example.cleanproject.controller;\n\nimport com.example.cleanproject.dto.UserDTO;\nimport com.example.cleanproject.service.UserService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/users\")\n@RequiredArgsConstructor\npublic class UserController {\n\n    private final UserService userService;\n\n    @GetMapping\n    public List<UserDTO> getAllUsers() {\n        return userService.getAllUsers();\n    }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\npackage com.example.cleanproject.controller\n\nimport com.example.cleanproject.dto.UserDTO\nimport com.example.cleanproject.service.UserService\nimport org.springframework.web.bind.annotation.*\n\n@RestController\n@RequestMapping(\"/api/users\")\nclass UserController(\n    private val userService: UserService\n) {\n\n    @GetMapping\n    fun getAllUsers(): List<UserDTO> = userService.getAllUsers()\n}\n```\n\n:::\n\n---\n\n## ‚ñ∂Ô∏è Running the Application\n\nRun the application using the following command:\n\n```bash\n./mvnw spring-boot:run\n```\n\nTest endpoints using a tool like Postman or cURL.\n\n---\n\n## üß™ Testing the API\n\nYou can test the API using the following cURL command:\n\n- **Fetch all users:**\n\n```bash\ncurl -X GET http://localhost:8080/api/users\n```\n\n---\n\nClean coding practices are essential for building maintainable and scalable Spring Boot applications. By leveraging tools like Lombok and Kotlin's features, you can write concise and readable code that adheres to modern development standards.\n","id":"spring-boot-clean-coding","title":"Clean Coding Practices in Spring Boot","date":"2024-12-19","summary":"Learn how to apply clean coding principles in Spring Boot projects. Includes best practices, examples, and benefits of using Lombok in Java and Kotlin clean code techniques.","thumbnail":"/images/spring-boot-clean-coding-thumbnail.jpg","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"clean-coding","name":"Clean Coding","color":"orange"},{"id":"programming","name":"Programming","color":"blue"}]}},"__N_SSG":true}