{"pageProps":{"_nextI18Next":{"initialI18nStore":{"tr":{"common":{"common":{"siteName":"Şuayb Şimşek'in Blogu","language":"Dil","theme":"Tema","header":{"logoAlt":"Şuayb'in Blogu Logo","title":"Şuayb'in Blogu","menu":{"home":"Ana Sayfa","about":"Hakkında","contact":"İletişim","search":"Ara"},"themeToggle":"Temayı Değiştir","theme":{"light":"Açık Mod","dark":"Koyu Mod"}},"sidebar":{"title":"Konular","loading":"Daha fazla konu yükleniyor..."},"footer":{"text":"© {{year}} Şuayb'in Blogu. Tüm hakları saklıdır."},"pagination":{"pageSize":"Sayfa Boyutu","showingResults":"{{start}}–{{end}} arası {{total}} sonuç gösteriliyor"},"searchBar":{"placeholder":"Ara"},"sort":{"newest":"En Yeni Önce","oldest":"En Eski Önce"},"contactInfo":{"email":"E-posta"},"codeBlock":{"copy":"Kopyala","copied":"Kopyalandı!"},"selected":"Seçildi","selectAll":"Tümünü Seç","clearAll":"Tümünü Temizle","noResults":"Sonuç bulunamadı","andMore":"ve {{count}} daha","datePicker":{"selectDate":"Tarih Seçin","today":"Bugün","yesterday":"Dün","last7Days":"Son 7 Gün","last30Days":"Son 30 Gün","customDate":"Özel Tarih","startDatePlaceholder":"Başlangıç Tarihi","endDatePlaceholder":"Bitiş Tarihi","startDateLabel":"Başlangıç Tarihi","endDateLabel":"Bitiş Tarihi","clearSelection":"Seçimi Temizle","applySelection":"Seçimi Uygula"},"validation":{"required":"Bu alan zorunludur.","minlength":"Bu alan en az {{ min }} karakter olmalıdır.","maxlength":"Bu alan en fazla {{ max }} karakter olabilir.","min":"Bu alan en az {{ min }} olmalıdır.","max":"Bu alan en fazla {{ max }} olabilir.","minbytes":"Bu alan en az {{ min }} bayt olmalıdır.","maxbytes":"Bu alan en fazla {{ max }} bayt olabilir.","pattern":"Bu alan {{ pattern }} deseniyle eşleşmelidir.","number":"Bu alan bir sayı olmalıdır.","datetimelocal":"Bu alan bir tarih ve saat olmalıdır.","patternLogin":"Bu alan sadece harfler, rakamlar ve e-posta adresleri içerebilir.","email":"Lütfen geçerli bir e-posta adresi girin.","url":"Lütfen geçerli bir URL girin.","alpha":"Bu alan sadece harf içermelidir.","alphanumeric":"Bu alan sadece harf ve rakam içermelidir.","passwordStrength":"Şifre en az bir büyük harf, bir sayı ve bir özel karakter içeren en az 8 karakter olmalıdır.","startDateAfterEndDate":"Başlangıç tarihi, bitiş tarihinden sonra olamaz.","endDateBeforeStartDate":"Bitiş tarihi, başlangıç tarihinden önce olamaz."},"viewAllResults":"\"{{query}}\" için tüm sonuçları gör"}},"post":{"post":{"noPostsFound":"Hiçbir gönderi bulunamadı.","readMore":"Daha Fazla Oku"}}},"en":{"common":{"common":{"siteName":"Şuayb Şimşek's Blog","language":"Language","theme":"Theme","header":{"logoAlt":"Şuayb's Blog Logo","title":"Şuayb's Blog","menu":{"home":"Home","about":"About","contact":"Contact","search":"Search"},"themeToggle":"Toggle Theme","theme":{"light":"Light Mode","dark":"Dark Mode"}},"sidebar":{"title":"Topics","loading":"Loading more topics..."},"footer":{"text":"© {{year}} Şuayb's Blog. All rights reserved."},"pagination":{"pageSize":"Page size","showingResults":"Showing {{start}}–{{end}} of {{total}} results"},"searchBar":{"placeholder":"Search"},"sort":{"newest":"Newest First","oldest":"Oldest First"},"contactInfo":{"email":"Email"},"codeBlock":{"copy":"Copy","copied":"Copied!"},"selected":"Selected","selectAll":"Select All","clearAll":"Clear All","noResults":"No results found","andMore":"and {{count}} more","datePicker":{"selectDate":"Select Date","today":"Today","yesterday":"Yesterday","last7Days":"Last 7 Days","last30Days":"Last 30 Days","customDate":"Custom Date","startDatePlaceholder":"Start Date","endDatePlaceholder":"End Date","startDateLabel":"Start Date","endDateLabel":"End Date","clearSelection":"Clear Selection","applySelection":"Apply Selection"},"validation":{"required":"This field is required.","minlength":"This field must be at least {{ min }} characters.","maxlength":"This field cannot be longer than {{ max }} characters.","min":"This field should be at least {{ min }}.","max":"This field cannot be more than {{ max }}.","minbytes":"This field should be at least {{ min }} bytes.","maxbytes":"This field cannot be more than {{ max }} bytes.","pattern":"This field should match the pattern for {{ pattern }}.","number":"This field should be a number.","datetimelocal":"This field should be a date and time.","patternLogin":"This field can only contain letters, digits, and e-mail addresses.","email":"Please enter a valid email address.","url":"Please enter a valid URL.","alpha":"This field should only contain letters.","alphanumeric":"This field should only contain letters and numbers.","passwordStrength":"Password must contain at least 8 characters, including an uppercase letter, a number, and a special character.","startDateAfterEndDate":"Start date cannot be after end date.","endDateBeforeStartDate":"End date cannot be before start date."},"viewAllResults":"See all results for \"{{query}}\""}},"post":{"post":{"readMore":"Read More","noPostsFound":"No posts found."}}}},"initialLocale":"tr","ns":["common","post"],"userConfig":{"debug":false,"i18n":{"defaultLocale":"en","locales":["en","tr"]},"localePath":"/home/circleci/project/public/locales","default":{"debug":false,"i18n":{"defaultLocale":"en","locales":["en","tr"]},"localePath":"/home/circleci/project/public/locales"}}},"post":{"contentHtml":"\nSpring Boot 3.2+ ile Java veya Kotlin arayüzleri üzerinden deklaratif ve tip güvenli HTTP istemcileri tanımlayabilirsiniz. Bu makalede JSONPlaceholder API örneği ile baştan sona nasıl yapılandıracağınızı öğreneceksiniz.\n\n---\n\n## 🌟 Neden HTTP Arayüz İstemcisi?\n\n- **Deklaratif**: Bir arayüz tanımlayıp HTTP çağrılarını yöntem anotasyonlarıyla eşleyin.\n- **Tip güvenli**: Yanlış imzalar veya hatalı yol konfigürasyonları derleme zamanında yakalanır.\n- **Azaltılmış tekrar eden kod**: Tek bir bean tanımı, manuel proxy veya template koduna gerek yok.\n- **Spring Dostu**: Spring Framework 6.2’nin `@HttpExchange`, `@GetExchange` ve `WebClientAdapter` bileşenlerini kullanır.\n\n---\n\n## 🌟 Ön Koşullar\n\n- ☕ **Java Development Kit (JDK) 21** veya üstü\n- 📦 **Spring Boot 3.2+**\n- 🔤 **IDE** (IntelliJ IDEA, Eclipse vb.)\n\n---\n\n## 🛠️ Adım 1: Bağımlılıkları Ekle\n\nProjenizin yapı dosyasına Web starter’ı ekleyin:\n\n**Maven**:\n\n```xml\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n**Gradle**:\n\n```groovy\nimplementation 'org.springframework.boot:spring-boot-starter-web'\n```\n\n---\n\n## 📝 Adım 2: Temel URL Ayarı\n\n`application.yml` veya `application.properties` dosyanıza ekleyin:\n\n```yaml\njsonplaceholder:\n  base-url: https://jsonplaceholder.typicode.com\n```\n\n```properties\njsonplaceholder.base-url=https://jsonplaceholder.typicode.com\n```\n\n---\n\n## 🛠️ Adım 3: DTO ve İstemci Arayüzü Tanımla\n\n:::tabs\n@tab Java [icon=java]\n\n```java\n// src/main/java/com/example/client/dto/PostDTO.java\npackage com.example.client.dto;\n\npublic record PostDTO(\n    Integer userId,\n    Integer id,\n    String title,\n    String body\n) {}\n\n// src/main/java/com/example/client/JsonPlaceholderClient.java\npackage com.example.client;\n\nimport com.example.client.dto.PostDTO;\nimport org.springframework.web.service.annotation.GetExchange;\nimport org.springframework.web.service.annotation.HttpExchange;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport java.util.List;\n\n@HttpExchange(url = \"${jsonplaceholder.base-url}\", accept = \"application/json\")\npublic interface JsonPlaceholderClient {\n\n    @GetExchange(\"/posts\")\n    List<PostDTO> getPosts();\n\n    @GetExchange(\"/posts/{id}\")\n    PostDTO getPost(@PathVariable(\"id\") Integer id);\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\n// src/main/kotlin/com/example/client/dto/PostDTO.kt\npackage com.example.client.dto\n\ndata class PostDTO(\n    val userId: Int,\n    val id: Int,\n    val title: String,\n    val body: String\n)\n\n// src/main/kotlin/com/example/client/JsonPlaceholderClient.kt\npackage com.example.client\n\nimport com.example.client.dto.PostDTO\nimport org.springframework.web.service.annotation.GetExchange\nimport org.springframework.web.service.annotation.HttpExchange\nimport org.springframework.web.bind.annotation.PathVariable\n\n@HttpExchange(url = \"${jsonplaceholder.base-url}\", accept = \"application/json\")\ninterface JsonPlaceholderClient {\n\n    @GetExchange(\"/posts\")\n    fun getPosts(): List<PostDTO>\n\n    @GetExchange(\"/posts/{id}\")\n    fun getPost(@PathVariable(\"id\") id: Int): PostDTO\n}\n```\n\n:::\n\n---\n\n## 🛠️ Adım 4: İstemci Bean’ini Yapılandır\n\n:::tabs\n@tab Java [icon=java]\n\n```java\n// src/main/java/com/example/config/HttpClientConfig.java\npackage com.example.config;\n\nimport com.example.client.JsonPlaceholderClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.client.support.RestClientAdapter;\nimport org.springframework.web.service.invoker.HttpServiceProxyFactory;\nimport org.springframework.web.service.invoker.RestClient;\n\n@Configuration\npublic class HttpClientConfig {\n\n    @Bean\n    public JsonPlaceholderClient jsonPlaceholderClient(RestClient.Builder restClientBuilder) {\n        RestClient restClient = restClientBuilder\n            .baseUrl(\"https://jsonplaceholder.typicode.com\")\n            .build();\n\n        var factory = HttpServiceProxyFactory\n            .builderFor(RestClientAdapter.create(restClient))\n            .build();\n\n        return factory.createClient(JsonPlaceholderClient.class);\n    }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\n// src/main/kotlin/com/example/config/HttpClientConfig.kt\npackage com.example.config\n\nimport com.example.client.JsonPlaceholderClient\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\nimport org.springframework.web.client.support.RestClientAdapter\nimport org.springframework.web.service.invoker.HttpServiceProxyFactory\nimport org.springframework.web.service.invoker.RestClient\n\n@Configuration\nclass HttpClientConfig {\n\n    @Bean\n    fun jsonPlaceholderClient(restClientBuilder: RestClient.Builder): JsonPlaceholderClient {\n        val restClient = restClientBuilder\n            .baseUrl(\"https://jsonplaceholder.typicode.com\")\n            .build()\n\n        val factory = HttpServiceProxyFactory\n            .builderFor(RestClientAdapter.create(restClient))\n            .build()\n\n        return factory.createClient(JsonPlaceholderClient::class.java)\n    }\n}\n```\n\n:::\n\n---\n\n## 🔄 Adım 5: Servis ve Controller Oluşturun\n\n:::tabs\n@tab Java [icon=java]\n\n```java\n// src/main/java/com/example/service/PostService.java\npackage com.example.service;\n\nimport com.example.client.JsonPlaceholderClient;\nimport com.example.client.dto.PostDTO;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Service;\nimport java.util.List;\n\n@Service\n@RequiredArgsConstructor\npublic class PostService {\n    private final JsonPlaceholderClient client;\n\n    public List<PostDTO> getAllPosts() {\n        return client.getPosts();\n    }\n\n    public PostDTO getPostById(Integer id) {\n        return client.getPost(id);\n    }\n}\n\n// src/main/java/com/example/controller/PostController.java\npackage com.example.controller;\n\nimport com.example.client.dto.PostDTO;\nimport com.example.service.PostService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/posts\")\n@RequiredArgsConstructor\npublic class PostController {\n    private final PostService postService;\n\n    @GetMapping\n    public List<PostDTO> getAllPosts() {\n        return postService.getAllPosts();\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<PostDTO> getPostById(@PathVariable Integer id) {\n        PostDTO post = postService.getPostById(id);\n        return post != null ? ResponseEntity.ok(post) : ResponseEntity.notFound().build();\n    }\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n```kotlin\n// src/main/kotlin/com/example/service/PostService.kt\npackage com.example.service\n\nimport com.example.client.JsonPlaceholderClient\nimport com.example.client.dto.PostDTO\nimport org.springframework.stereotype.Service\n\n@Service\nclass PostService(private val client: JsonPlaceholderClient) {\n    fun getAllPosts(): List<PostDTO> = client.getPosts()\n    fun getPostById(id: Int): PostDTO = client.getPost(id)\n}\n\n// src/main/kotlin/com/example/controller/PostController.kt\npackage com.example.controller\n\nimport com.example.client.dto.PostDTO\nimport com.example.service.PostService\nimport org.springframework.http.ResponseEntity\nimport org.springframework.web.bind.annotation.*\n\n@RestController\n@RequestMapping(\"/posts\")\nclass PostController(private val postService: PostService) {\n    @GetMapping\n    fun getAllPosts(): List<PostDTO> = postService.getAllPosts()\n\n    @GetMapping(\"/{id}\")\n    fun getPostById(@PathVariable id: Int): ResponseEntity<PostDTO> =\n        ResponseEntity.ok(postService.getPostById(id))\n}\n```\n\n:::\n\n---\n\n## ▶️ Uygulamayı Çalıştır\n\n```bash\n./mvnw spring-boot:run\n# veya\ngradle bootRun\n```\n\n---\n\n## 🧪 Endpointleri Test Et\n\n```bash\ncurl http://localhost:8080/posts\ncurl http://localhost:8080/posts/1\n```\n\n---\n\nSonuç olarak, bu adımları takip ederek Spring Boot’un HTTP Interface Clienti deklaratif ve tip güvenli REST iletişimi için başarıyla yapılandırmış oldunuz. Bu yaklaşım, tekrar eden kodları azaltır ve güçlü Rest Client altyapısını kullanır.\n","id":"spring-boot-http-interface-client","title":"Spring Boot HTTP Interface Client","date":"2025-04-27","summary":"Deklaratif, tip güvenli HTTP çağrıları için Spring Boot 3.2+ HTTP Interface Client nasıl kullanılır öğrenin.","thumbnail":"/images/spring-boot-http-interface-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"rest-api","name":"REST API","color":"blue"},{"id":"rest-client","name":"Rest Client","color":"purple"},{"id":"programming","name":"Programlama","color":"brown"}]},"posts":[{"id":"spring-boot-graphql-jwe-authentication","title":"Spring Boot GraphQL JWE Kimlik Doğrulama","date":"2025-05-17","summary":"Stateless şifreli JWT’ler (JWE) kullanarak Spring Boot GraphQL API’lerinizi nasıl güvenli hale getirirken, kullanıcı kimliklerini ve rolleri JPA destekli bir veritabanında nasıl saklayacağınızı öğrenin.","thumbnail":"/images/spring-boot-graphql-jwe-auth-thumbnail.webp","readingTime":"5 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"security","name":"Güvenlik","color":"blue"},{"id":"jwt","name":"JWT","color":"pink"},{"id":"jwe","name":"JWE"},{"id":"graphql","name":"GraphQL","color":"pink"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-jwe-authentication-with-jpa","title":"Spring Boot JPA ile JWE Kimlik Doğrulaması","date":"2025-05-11","summary":"Stateless şifreli JWT’ler (JWE) kullanarak Spring Boot API’lerinizi güvenli hale getirirken, kullanıcı kimliklerini ve rolleri JPA destekli bir veritabanında nasıl saklayacağınızı öğrenin.","thumbnail":"/images/spring-boot-jwe-auth-with-jpa-thumbnail.webp","readingTime":"5 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"security","name":"Güvenlik","color":"blue"},{"id":"jwt","name":"JWT","color":"pink"},{"id":"jwe","name":"JWE","color":"orange"},{"id":"jpa","name":"JPA","color":"blue"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-ldap-jwe-authentication","title":"Spring Boot LDAP ve JWE Kimlik Doğrulama","date":"2025-05-10","summary":"LDAP kimlik doğrulama ve JWE şifreli JWT’lerle Spring Boot API’lerinizi external directory entegrasyonu ve token gizliliği ile nasıl güvene alacağınızı öğrenin.","thumbnail":"/images/spring-boot-ldap-jwe-auth-thumbnail.webp","readingTime":"5 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"security","name":"Güvenlik","color":"blue"},{"id":"jwt","name":"JWT","color":"pink"},{"id":"jwe","name":"JWE","color":"orange"},{"id":"ldap","name":"LDAP","color":"red"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-jwe-authentication","title":"Spring Boot JWE Kimlik Doğrulama","date":"2025-05-03","summary":"JWT’lerinizi JWE ile şifreleyerek gizlilik ve bütünlüğü sağlamak için Spring Boot API’lerinizi nasıl güvence altına alacağınızı öğrenin.","thumbnail":"/images/spring-boot-jwe-auth-thumbnail.webp","readingTime":"5 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"security","name":"Güvenlik","color":"blue"},{"id":"jwt","name":"JWT","color":"pink"},{"id":"jwe","name":"JWE","color":"orange"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-http-interface-client","title":"Spring Boot HTTP Interface Client","date":"2025-04-27","summary":"Deklaratif, tip güvenli HTTP çağrıları için Spring Boot 3.2+ HTTP Interface Client nasıl kullanılır öğrenin.","thumbnail":"/images/spring-boot-http-interface-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"rest-api","name":"REST API","color":"blue"},{"id":"rest-client","name":"Rest Client","color":"orange"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-async-tasks-virtual","title":"Spring Boot Sanal Thread’li Asenkron Görevler","date":"2025-04-26","summary":"Spring Boot’ta JDK 21 sanal thread’leri ve `@Async` anotasyonunu kullanarak hafif ve ölçeklenebilir asenkron görevleri nasıl oluşturacağınızı öğrenin.","thumbnail":"/images/spring-boot-async-virtual-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"async-tasks","name":"Asenkron Görevler","color":"blue"},{"id":"virtual-thread","name":"Sanal Thread","color":"orange"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-ai","title":"Spring Boot AI Entegrasyonu","date":"2025-04-23","summary":"Modüler, taşınabilir ve gözlemlenebilir AI iş akışları için Spring AI kullanarak Spring Boot uygulamalarına AI modellerini nasıl entegre edeceğinizi öğrenin.","thumbnail":"/images/spring-boot-ai-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"spring-ai","name":"Spring AI","color":"orange"},{"id":"ai","name":"Yapay Zeka","color":"pink"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-jpa-auditing","title":"Spring Boot JPA Auditing","date":"2025-04-10","summary":"Spring Boot uygulamalarında JPA Auditing ile oluşturulma/değiştirilme tarihlerini ve kullanıcılarını otomatik olarak nasıl yakalayacağınızı öğrenin.","thumbnail":"/images/spring-boot-jpa-auditing-thumbnail.webp","readingTime":"1 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"spring-data","name":"Spring Data","color":"yellow"},{"id":"jpa","name":"JPA","color":"blue"},{"id":"auditing","name":"Auditing","color":"orange"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-tdd","title":"Spring Boot ile Test Odaklı Geliştirme (TDD)","date":"2025-04-09","summary":"Spring Boot ile TDD yaklaşımını uygulamayı; önce test yazarak, iş mantığını geliştirerek ve testlerle kaliteyi garanti altına alarak öğrenin.","thumbnail":"/images/spring-boot-tdd-thumbnail.webp","readingTime":"1 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"tdd","name":"TDD","color":"blue"},{"id":"testing","name":"Test","color":"orange"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-circuit-breaker","title":"Spring Boot Circuit Breaker","date":"2025-03-13","summary":"Spring Boot uygulamalarında Circuit Breaker kullanımını öğrenerek mikro hizmetlerin dayanıklılığını artırın.","thumbnail":"/images/spring-boot-circuit-breaker-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"spring-cloud","name":"Spring Cloud","color":"pink"},{"id":"circuit-breaker","name":"Circuit Breaker","color":"blue"},{"id":"microservice","name":"Mikroservis","color":"orange"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-eureka-server","title":"Spring Boot Eureka Server","date":"2025-02-23","summary":"Mikro hizmet mimarisinde servis keşfi için Spring Boot Eureka serverın nasıl kurulacağını ve yapılandırılacağını öğrenin.","thumbnail":"/images/spring-boot-eureka-server-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"spring-cloud","name":"Spring Cloud","color":"pink"},{"id":"eureka-server","name":"Eureka Server","color":"blue"},{"id":"microservice","name":"Mikroservis","color":"orange"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-config-server","title":"Spring Boot Config Server","date":"2025-02-22","summary":"Spring Boot Config Server kullanarak merkezi yapılandırma yönetimini nasıl gerçekleştireceğinizi öğrenin.","thumbnail":"/images/spring-boot-config-server-thumbnail.webp","readingTime":"4 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"spring-cloud","name":"Spring Cloud","color":"pink"},{"id":"config-server","name":"Config Server","color":"blue"},{"id":"microservice","name":"Mikroservis","color":"orange"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-docker","title":"Spring Boot Docker Entegrasyonu","date":"2025-02-21","summary":"Spring Boot uygulamalarını Docker kullanarak Buildpacks ve Jib ile nasıl oluşturup dağıtabileceğinizi öğrenin.","thumbnail":"/images/spring-boot-docker-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"docker","name":"Docker","color":"blue"},{"id":"containerization","name":"Konteynerizasyon","color":"orange"},{"id":"jib","name":"Jib","color":"pink"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-kubernetes","title":"Spring Boot Kubernetes Entegrasyonu","date":"2025-02-21","summary":"Spring Boot uygulamalarını Kubernetes üzerinde nasıl ölçeklenebilir ve konteyner tabanlı olarak dağıtabileceğinizi öğrenin.","thumbnail":"/images/spring-boot-kubernetes-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"kubernetes","name":"Kubernetes","color":"blue"},{"id":"microservice","name":"Mikroservis","color":"orange"},{"id":"containerization","name":"Konteynerizasyon","color":"pink"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-async-tasks","title":"Spring Boot Asenkron Görevler","date":"2025-02-20","summary":"Spring Boot ile @Async kullanarak görevleri ana threadi engellemeden asenkron olarak nasıl çalıştıracağınızı öğrenin.","thumbnail":"/images/spring-boot-async-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"async-tasks","name":"Asenkron Görevler","color":"blue"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-scheduled-tasks","title":"Spring Boot Planlanmış Görevler","date":"2025-02-20","summary":"Spring Boot ile @Scheduled anotasyonunu kullanarak belirli aralıklarla veya cron ifadeleriyle arka plan görevlerini nasıl çalıştıracağınızı öğrenin.","thumbnail":"/images/spring-boot-scheduled-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"scheduled-tasks","name":"Planlanmış Görevler","color":"blue"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-reactive-programming","title":"Spring Boot Reaktif Programlama","date":"2025-02-19","summary":"Spring Boot ile Project Reactor ve WebFlux kullanarak yüksek performanslı, eşzamanlı işleme sahip reaktif uygulamalar oluşturmayı öğrenin.","thumbnail":"/images/spring-boot-reactive-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"reactive-programming","name":"Reaktif Programlama","color":"blue"},{"id":"webflux","name":"Spring WebFlux","color":"orange"},{"id":"programming","name":"Programlama","color":"brown"}]},{"id":"spring-boot-graalvm","title":"Spring Boot ile GraalVM Native Uygulama","date":"2024-12-28","summary":"Spring Boot uygulamalarınızı GraalVM native imajı olarak derleyerek daha hızlı başlatma süreleri ve azaltılmış kaynak kullanımı elde etmeyi öğrenin.","thumbnail":"/images/spring-boot-graalvm-thumbnail.webp","readingTime":"2 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"graalvm","name":"GraalVM","color":"pink"},{"id":"native-image","name":"Native İmaj","color":"orange"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"spring-boot-kafka","title":"Spring Boot ile Kafka Entegrasyonu","date":"2024-12-25","summary":"Spring Boot uygulamanızın Kafka topicleri aracılığıyla JSON mesajları göndermesini ve tüketmesini nasıl entegre edeceğinizi öğrenin.","thumbnail":"/images/spring-boot-kafka-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"kafka","name":"Kafka","color":"orange"},{"id":"messaging","name":"Mesajlaşma","color":"brown"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"spring-boot-redis-caching","title":"Spring Boot ile Redis Önbellekleme","date":"2024-12-22","summary":"Spring Boot uygulamanıza Redis önbellekleme uygulayarak performansını ve verimliliğini artırmayı öğrenin.","thumbnail":"/images/spring-boot-redis-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"redis","name":"Redis","color":"orange"},{"id":"caching","name":"Önbellekleme","color":"brown"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"spring-boot-openapi","title":"Spring Boot ile OpenAPI","date":"2024-12-20","summary":"SpringDoc kullanarak Spring Boot uygulamanızda OpenAPI entegrasyonu ile API dokümantasyonu ve test yöntemlerini öğrenin.","thumbnail":"/images/spring-boot-openapi-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"openapi","name":"OpenAPI","color":"orange"},{"id":"documentation","name":"Dokümantasyon","color":"brown"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"spring-boot-clean-coding","title":"Spring Boot Temiz Kodlama Pratikleri","date":"2024-12-19","summary":"Spring Boot projelerinde temiz kodlama ilkelerini uygulamayı öğrenin. En iyi uygulamalar, örnekler ve Java'da Lombok ile Kotlin temiz kodlama tekniklerinin faydaları.","thumbnail":"/images/spring-boot-clean-coding-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"clean-coding","name":"Temiz Kodlama","color":"orange"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"spring-boot-devtools","title":"Spring Boot DevTools","date":"2024-12-19","summary":"Spring Boot DevTools ile hızlı geliştirme sürecinizi nasıl hızlandırabileceğinizi keşfedin. Canlı yeniden yükleme, önbellekleme ve hata ayıklama ipuçları içerir.","thumbnail":"/images/spring-boot-devtools-thumbnail.webp","readingTime":"2 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"devtools","name":"Geliştirme Araçları","color":"orange"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"spring-boot-actuator","title":"Spring Boot Actuator","date":"2024-12-18","summary":"Spring Boot Actuator kullanarak uygulamalarınızı izleme ve yönetme. Endpointler, özelleştirme ve güvenlik örneklerini içerir.","thumbnail":"/images/spring-boot-actuator-thumbnail.webp","readingTime":"2 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"actuator","name":"Actuator","color":"orange"},{"id":"monitoring","name":"İzleme","color":"purple"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"spring-boot-aop","title":"Spring Boot ile Aspect-Oriented Programming (AOP)","date":"2024-12-18","summary":"Spring Boot ile AOP uygulamasını nasıl yapacağınızı öğrenin. Java ve Kotlin örnekleri ile temel kavramlar ve uygulamalar.","thumbnail":"/images/spring-boot-aop-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"aop","name":"AOP","color":"orange"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"spring-boot-di","title":"Spring Boot ile Dependency Injection","date":"2024-12-18","summary":"Spring Boot ile Bağımlılık Enjeksiyonu (Dependency Injection - DI) nasıl çalışır? Java ve Kotlin örnekleriyle temel kavramlar, anotasyonlar ve pratik kullanım senaryolarını öğrenin.","thumbnail":"/images/spring-boot-di-thumbnail.webp","readingTime":"2 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"dependency-injection","name":"Bağımlılık Enjeksiyonu","color":"orange"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"object-relational-mapping","title":"Object-Relational Mapping (ORM)","date":"2024-12-16","summary":"Spring Boot kullanarak Java, Kotlin ve Go (Gin) ile PostgreSQL entegrasyonu ve temel CRUD işlemlerini içeren bir ORM tabanlı uygulamanın nasıl kurulacağını öğrenin.","thumbnail":"/images/orm-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"go","name":"Go","color":"brown"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"gin","name":"Gin","color":"green"},{"id":"orm","name":"ORM","color":"orange"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"rest-api-input-validation","title":"REST API’lerde Girdi Doğrulama","date":"2024-12-15","summary":"Spring Boot ve Gin gibi framework’leri kullanarak Java, Kotlin ve Go ile REST API’lerde girdi doğrulamasını nasıl uygulayacağnızı öğrenin. Anotasyonlar, özel doğrulama ve hata yönetimi örnekleri içerir.","thumbnail":"/images/input-validation-thumbnail.webp","readingTime":"4 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"go","name":"Go","color":"brown"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"gin","name":"Gin","color":"green"},{"id":"validation","name":"Doğrulama","color":"orange"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"spring-boot-graphql","title":"Spring GraphQL ile API Oluşturma","date":"2024-12-15","summary":"Java ve Kotlin kullanarak Spring for GraphQL ile GraphQL API\\u201leri nasıl oluşturacağınızı öğrenin. Şema oluşturma, sorgu işleme ve entegrasyonu içerir.","thumbnail":"/images/spring-boot-graphql-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"graphql","name":"GraphQL","color":"pink"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"golang-gin-first-application","title":"Gin - İlk Uygulama","date":"2024-12-14","summary":"Sıfırdan ilk Golang Gin uygulamanızı oluşturmanıza yardımcı olacak, yeni başlayanlar için rehber. Temelleri öğrenin ve Gin ile yolculuğunuza başlayın.","thumbnail":"/images/golang-gin-first-app-thumbnail.webp","readingTime":"1 dk okuma","topics":[{"id":"go","name":"Go","color":"brown"},{"id":"gin","name":"Gin","color":"green"},{"id":"beginner-guide","name":"Başlangıç Rehberi","color":"orange"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"building-a-rest-api-with-spring-boot","title":"Spring Boot ile REST API Geliştirme","date":"2024-12-10","summary":"Spring Boot kullanarak REST API nasıl geliştirilir? HTTP metodları, JSON veri işleme, Lombok entegrasyonu ve curl ile test etme.","thumbnail":"/images/spring-boot-rest-api-thumbnail.webp","readingTime":"3 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"rest-api","name":"REST API","color":"orange"},{"id":"programming","name":"Programlama","color":"blue"}]},{"id":"spring-boot-first-application","title":"Spring Boot - İlk Uygulama","date":"2024-12-10","summary":"Spring Boot ile ilk uygulamanızı sıfırdan oluşturmak için başlangıç seviyesinde bir rehber. Temel bilgileri öğrenin ve Spring Boot ile yolculuğunuza başlayın.","thumbnail":"/images/spring-boot-first-app-thumbnail.webp","readingTime":"2 dk okuma","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"beginner-guide","name":"Başlangıç Rehberi","color":"orange"},{"id":"programming","name":"Programlama","color":"blue"}]}]},"__N_SSG":true}