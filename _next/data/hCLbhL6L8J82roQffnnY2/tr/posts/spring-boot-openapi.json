{"pageProps":{"_nextI18Next":{"initialI18nStore":{"tr":{"common":{"common":{"language":"Dil","theme":"Tema","header":{"logoAlt":"Blog Logom","title":"Blogum","menu":{"home":"Ana Sayfa","about":"Hakkında","contact":"İletişim"},"themeToggle":"Temayı Değiştir","theme":{"light":"Açık Mod","dark":"Koyu Mod"}},"footer":{"text":"© {{year}} Blogum. Tüm hakları saklıdır."},"pagination":{"pageSize":"Sayfa Boyutu","showingResults":"{{start}}–{{end}} arası {{total}} sonuç gösteriliyor"},"searchBar":{"placeholder":"Ara"},"sort":{"newest":"En Yeni Önce","oldest":"En Eski Önce"},"contactInfo":{"email":"E-posta"},"codeBlock":{"copy":"Kopyala","copied":"Kopyalandı!"},"allTopics":"Tüm Konular","searchTopics":"Konuları Ara"}},"post":{"post":{"noPostsFound":"Hiçbir gönderi bulunamadı.","readMore":"Daha Fazla Oku"}}},"en":{"common":{"common":{"language":"Language","theme":"Theme","header":{"logoAlt":"My Blog Logo","title":"My Blog","menu":{"home":"Home","about":"About","contact":"Contact"},"themeToggle":"Toggle Theme","theme":{"light":"Light Mode","dark":"Dark Mode"}},"footer":{"text":"© {{year}} My Blog. All rights reserved."},"pagination":{"pageSize":"Page size","showingResults":"Showing {{start}}–{{end}} of {{total}} results"},"searchBar":{"placeholder":"Search"},"sort":{"newest":"Newest First","oldest":"Oldest First"},"contactInfo":{"email":"Email"},"codeBlock":{"copy":"Copy","copied":"Copied!"},"allTopics":"All Topics","searchTopics":"Search Topics"}},"post":{"post":{"readMore":"Read More","noPostsFound":"No posts found."}}}},"initialLocale":"tr","ns":["common","post"],"userConfig":{"debug":false,"i18n":{"defaultLocale":"en","locales":["en","tr"]},"localePath":"/home/runner/work/blog/blog/public/locales","default":{"debug":false,"i18n":{"defaultLocale":"en","locales":["en","tr"]},"localePath":"/home/runner/work/blog/blog/public/locales"}}},"post":{"contentHtml":"\nOpenAPI, API dokümantasyonu ve test işlemlerini kolaylaştıran etkileşimli bir arayüz ve makine tarafından okunabilir belgeler sağlar. Bu kılavuz, SpringDoc kullanarak OpenAPI'yi Spring Boot uygulamanıza entegre etmenin yollarını gösterecektir.\n\n---\n\n## 🌟 Neden OpenAPI Kullanmalıyız?\n\n- **Etkileşimli Dokümantasyon**: API'leri keşfetmek için kullanıcı dostu bir arayüz sağlar.\n- **Standartlaştırılmış Format**: Makine tarafından okunabilir API tanımları oluşturur.\n- **Kolay Test**: Endpoint'leri test etmek için yerleşik araçlar sunar.\n- **İstemci Kod Üretimi**: Çeşitli programlama dilleri için otomatik istemci kodu üretimi sağlar.\n\n---\n\n## 🌟 Gereksinimler\n\n📋 Şunlara sahip olduğunuzdan emin olun:\n\n- ☕ **Java Development Kit (JDK)** 17+\n- 📦 **Maven veya Gradle** yüklü\n- 🔤 Bir **Java IDE** (Örneğin IntelliJ IDEA, Eclipse)\n\n---\n\n## 🛠️ 1. Adım: Bağımlılıkları Ekleyin\n\nSpringDoc kullanarak OpenAPI'yi entegre etmek için aşağıdaki bağımlılığı projenize ekleyin:\n\n- **Maven:**\n\n```xml\n<dependency>\n  <groupId>org.springdoc</groupId>\n  <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>\n  <version>2.1.0</version>\n</dependency>\n```\n\n- **Gradle:**\n\n```groovy\nimplementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'\n```\n\n---\n\n## 📋 2. Adım: OpenAPI'yi Yapılandırın\n\nSpringDoc minimal konfigürasyon gerektirir. `application.properties` veya `application.yml` dosyası üzerinden dokümantasyonu özelleştirebilirsiniz.\n\n### Örnek Konfigürasyon:\n\n```properties\nspringdoc.api-docs.path=/api-docs\nspringdoc.swagger-ui.path=/swagger-ui.html\n```\n\n---\n\n## 📖 3. Adım: REST Kontrollerinizi Anotasyonlarla Belgeleyin\n\nREST kontrollerinize ve modellerinize anotasyonlar ekleyerek OpenAPI dokümantasyonunu otomatik olarak oluşturabilirsiniz.\n\n:::tabs\n@tab Java [icon=java]\n\n### Controller Örneği\n\n```java\npackage com.example.openapi.controller;\n\nimport com.example.openapi.model.User;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.media.Content;\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/users\")\npublic class UserController {\n\n  @Operation(summary = \"Tüm kullanıcıları getir\", description = \"Kullanıcı listesini alır\")\n  @ApiResponse(responseCode = \"200\", description = \"Başarılı işlem\",\n    content = @Content(mediaType = \"application/json\"))\n  @GetMapping\n  public List<User> getAllUsers() {\n    return List.of(new User(1L, \"John Doe\", \"john@example.com\"));\n  }\n\n  @Operation(summary = \"Yeni bir kullanıcı oluştur\", description = \"Sisteme yeni bir kullanıcı ekler\")\n  @ApiResponse(responseCode = \"201\", description = \"Kullanıcı başarıyla oluşturuldu\",\n    content = @Content(mediaType = \"application/json\"))\n  @PostMapping\n  public User createUser(@RequestBody User user) {\n    return user;\n  }\n}\n```\n\n### User Model\n\n```java\npackage com.example.openapi.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class User {\n\n    private Long id;\n    private String name;\n    private String email;\n}\n```\n\n@tab Kotlin [icon=kotlin]\n\n### Controller Örneği\n\n```kotlin\npackage com.example.openapi.controller\n\nimport com.example.openapi.model.User\nimport io.swagger.v3.oas.annotations.*\nimport io.swagger.v3.oas.annotations.responses.*\nimport io.swagger.v3.oas.annotations.media.*\nimport org.springframework.web.bind.annotation.*\n\n@RestController\n@RequestMapping(\"/users\")\nclass UserController {\n\n    @Operation(summary = \"Tüm kullanıcıları getir\", description = \"Kullanıcı listesini alır\")\n    @ApiResponse(responseCode = \"200\", description = \"Başarılı işlem\",\n                 content = [Content(mediaType = \"application/json\")])\n    @GetMapping\n    fun getAllUsers(): List<User> = listOf(User(1L, \"John Doe\", \"john@example.com\"))\n\n    @Operation(summary = \"Yeni bir kullanıcı oluştur\", description = \"Sisteme yeni bir kullanıcı ekler\")\n    @ApiResponse(responseCode = \"201\", description = \"Kullanıcı başarıyla oluşturuldu\",\n                 content = [Content(mediaType = \"application/json\")])\n    @PostMapping\n    fun createUser(@RequestBody user: User): User = user\n}\n```\n\n### User Model\n\n```kotlin\npackage com.example.openapi.model\n\ndata class User(\n  val id: Long,\n  val name: String,\n  val email: String\n)\n```\n\n:::\n\n---\n\n## ▶️ Uygulamayı Çalıştırma\n\nUygulamayı aşağıdaki komutla çalıştırın:\n\n```bash\n./mvnw spring-boot:run\n```\n\nOpenAPI dokümantasyonuna erişmek için:\n\n- **API Docs:** `http://localhost:8080/api-docs`\n- **Swagger UI:** `http://localhost:8080/swagger-ui.html`\n\n---\n\n## 🧪 API'yi Test Etme\n\nSwagger UI arayüzüne erişerek oluşturulan API dokümantasyonunu test edebilirsiniz:\n\n1. Tarayıcınızda `http://localhost:8080/swagger-ui.html` adresine gidin.\n2. Endpoint'leri etkileşimli olarak test etmek için girişler yapın ve yanıtları gözlemleyin.\n\n---\n\nSpring Boot ile OpenAPI entegrasyonu, API dokümantasyonu ve test süreçlerini kolaylaştırır. SpringDoc kullanarak etkileşimli dokümantasyon oluşturabilir ve API'lerinizi daha erişilebilir hale getirebilirsiniz.\n","id":"spring-boot-openapi","title":"Spring Boot ile OpenAPI","date":"2024-12-20","summary":"SpringDoc kullanarak Spring Boot uygulamanızda OpenAPI entegrasyonu ile API dokümantasyonu ve test yöntemlerini öğrenin.","thumbnail":"/images/spring-boot-openapi-thumbnail.jpg","topics":[{"id":"java","name":"Java","color":"red"},{"id":"kotlin","name":"Kotlin","color":"purple"},{"id":"spring-boot","name":"Spring Boot","color":"green"},{"id":"openapi","name":"OpenAPI","color":"orange"},{"id":"documentation","name":"Dokümantasyon","color":"brown"},{"id":"programming","name":"Programlama","color":"blue"}]}},"__N_SSG":true}